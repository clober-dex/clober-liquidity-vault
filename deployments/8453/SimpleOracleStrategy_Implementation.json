{
  "address": "0xFC4646a3892041edF0352C33B2706Faeae62eECf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "referenceOracle_",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidityVault",
          "name": "liquidityVault_",
          "type": "address"
        },
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOraclePrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "UpdateConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LAST_RAW_AMOUNT_MASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "burnHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "computeOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersA",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersB",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getLastAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "internalType": "uint176",
              "name": "oraclePrice",
              "type": "uint176"
            },
            {
              "internalType": "uint24",
              "name": "rate",
              "type": "uint24"
            },
            {
              "internalType": "Tick",
              "name": "tickA",
              "type": "int24"
            },
            {
              "internalType": "Tick",
              "name": "tickB",
              "type": "int24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "isOraclePriceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityVault",
      "outputs": [
        {
          "internalType": "contract ILiquidityVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintHook",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "rebalanceHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referenceOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rebalanceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "rate",
          "type": "uint24"
        }
      ],
      "name": "updatePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c0c66fb77ab5a5a058a9cc74fe3c9e7678a9996d04c05e232af611505263428",
  "receipt": {
    "to": null,
    "from": "0x4587dd6356d7293E5f10db4D853332BD5b218C0B",
    "contractAddress": "0xFC4646a3892041edF0352C33B2706Faeae62eECf",
    "transactionIndex": 113,
    "gasUsed": "3392108",
    "logsBloom": "0x
    "blockHash": "0xa90fafb7acef3b547eb20c1c70b9e3c3a3dcbcf20ddb7681666a0ceb14c65418",
    "transactionHash": "0x7c0c66fb77ab5a5a058a9cc74fe3c9e7678a9996d04c05e232af611505263428",
    "logs": [
      {
        "transactionIndex": 113,
        "blockNumber": 26199242,
        "transactionHash": "0x7c0c66fb77ab5a5a058a9cc74fe3c9e7678a9996d04c05e232af611505263428",
        "address": "0xFC4646a3892041edF0352C33B2706Faeae62eECf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004587dd6356d7293e5f10db4d853332bd5b218c0b"
        ],
        "data": "0x",
        "logIndex": 201,
        "blockHash": "0xa90fafb7acef3b547eb20c1c70b9e3c3a3dcbcf20ddb7681666a0ceb14c65418"
      }
    ],
    "blockNumber": 26199242,
    "cumulativeGasUsed": "25052775",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb0272A76d2B2414415D474d55b2fAe15f04E3D20",
    "0xeA0E19fbca0D9D707f3dA10Ef846cC255B0aAdf3",
    "0x382CCccbD3b142D7DA063bF68cd0c89634767F76"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb08b08c607a06add251fc51587fdadf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"referenceOracle_\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityVault\",\"name\":\"liquidityVault_\",\"type\":\"address\"},{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOraclePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAST_RAW_AMOUNT_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTotalSupply\",\"type\":\"uint256\"}],\"name\":\"burnHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"computeOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersA\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersB\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getLastAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint176\",\"name\":\"oraclePrice\",\"type\":\"uint176\"},{\"internalType\":\"uint24\",\"name\":\"rate\",\"type\":\"uint24\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"isOraclePriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityVault\",\"outputs\":[{\"internalType\":\"contract ILiquidityVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintHook\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"rebalanceHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rebalanceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"rate\",\"type\":\"uint24\"}],\"name\":\"updatePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"computeOrders(bytes32)\":{\"details\":\"Clears pool orders if an error occurs and retains current orders if the list is empty.\",\"params\":{\"key\":\"The key of the pool.\"},\"returns\":{\"ordersA\":\"The orders for the first token.\",\"ordersB\":\"The orders for the second token.\"}},\"getConfig(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"},\"returns\":{\"_0\":\"The current Config struct associated with the key.\"}},\"getLastAmount(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"},\"returns\":{\"_0\":\"(uint256, uint256) representing the two amounts (likely token A / token B).\"}},\"getPosition(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"},\"returns\":{\"_0\":\"A Position struct containing paused state, oracle price, rate, tickA, and tickB.\"}},\"isOraclePriceValid(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"},\"returns\":{\"_0\":\"True if the oracle price is valid, otherwise false.\"}},\"isPaused(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"},\"returns\":{\"_0\":\"True if paused, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"}},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setConfig(bytes32,(uint24,uint24,uint24,uint24,uint24,uint24,uint24,uint24))\":{\"params\":{\"config\":\"The new configuration parameters (thresholds, rates, etc.).\",\"key\":\"A unique identifier for the position or pool.\"}},\"setOperator(address,bool)\":{\"params\":{\"operator\":\"The address whose operator status is being updated.\",\"status\":\"True to grant operator privileges, false to revoke.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"},\"unpause(bytes32)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\"}},\"updatePosition(bytes32,uint256,int24,int24,uint24)\":{\"params\":{\"key\":\"A unique identifier for the position or pool.\",\"oraclePrice\":\"The new oracle price used to guide the strategy.\",\"rate\":\"The multiplier applied at the final step of order amount calculation.\",\"tickA\":\"The updated tick parameters for side A of the orderbook.\",\"tickB\":\"The updated tick parameters for side B of the orderbook.\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"isOperator\":{\"params\":{\"operator\":\"The address to query.\"},\"return\":\"True if the address is an operator, otherwise false.\",\"returns\":{\"_0\":\"True if the address is an operator, otherwise false.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bookManager()\":{\"notice\":\"Returns the IBookManager instance controlling the underlying orderbooks.\"},\"computeOrders(bytes32)\":{\"notice\":\"Retrieves the orders for a specified key.\"},\"getConfig(bytes32)\":{\"notice\":\"Fetches the configuration (Config struct) for a specified key.\"},\"getLastAmount(bytes32)\":{\"notice\":\"Returns two amounts recorded in the last operation for a specified key.\"},\"getPosition(bytes32)\":{\"notice\":\"Retrieves the position (Position struct) for a specified key.\"},\"isOperator(address)\":{\"notice\":\"Checks if a given address is granted operator privileges.\"},\"isOraclePriceValid(bytes32)\":{\"notice\":\"Checks if the oracle price for the specified key is valid according to the strategy's criteria.\"},\"isPaused(bytes32)\":{\"notice\":\"Queries whether the position for a specified key is paused.\"},\"pause(bytes32)\":{\"notice\":\"Pauses the position corresponding to the given key, preventing further updates or orders.\"},\"referenceOracle()\":{\"notice\":\"Returns the reference IOracle contract used by this strategy.\"},\"setConfig(bytes32,(uint24,uint24,uint24,uint24,uint24,uint24,uint24,uint24))\":{\"notice\":\"Updates the configuration settings for the specified key.\"},\"setOperator(address,bool)\":{\"notice\":\"Assigns or revokes operator permissions for a given address.\"},\"unpause(bytes32)\":{\"notice\":\"Unpauses the position for the given key, allowing normal strategy operations to resume.\"},\"updatePosition(bytes32,uint256,int24,int24,uint24)\":{\"notice\":\"Updates the position parameters based on a newly fetched oracle price and tick ranges.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleOracleStrategy.sol\":\"SimpleOracleStrategy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02caa0e5f7bade9a0d8ad6058467d641cb67697cd4678c7b1c170686bafe9128\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d86af5c7b10d03d08d63f33ade56ef89c99c25d6816526ed815a111d2796534\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnitSize();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unitSize The unit size of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unitSize,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param unit The order unit\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 unit, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param unit The order unit\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param unit The canceled unit\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param unit The claimed unit\\n     */\\n    event Claim(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    /**\\n     * @notice This structure represents a unique identifier for a book in the BookManager.\\n     * @param base The base currency of the book\\n     * @param unitSize The unit size of the book\\n     * @param quote The quote currency of the book\\n     * @param makerPolicy The maker fee policy of the book\\n     * @param hooks The hooks contract of the book\\n     * @param takerPolicy The taker fee policy of the book\\n     */\\n    struct BookKey {\\n        Currency base;\\n        uint64 unitSize;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    /**\\n     * @notice This structure represents a current status for an order in the BookManager.\\n     * @param provider The provider of the order\\n     * @param open The open unit of the order\\n     * @param claimable The claimable unit of the order\\n     */\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable unit\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Encodes a BookKey into a BookId\\n     * @param key The BookKey to encode\\n     * @return The encoded BookId\\n     */\\n    function encodeBookKey(BookKey calldata key) external pure returns (BookId);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    /**\\n     * @notice This structure represents the parameters for making an order.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param unit The unit for the order. Times key.unitSize to get actual bid amount.\\n     * @param provider The provider for the order. The limit order service provider address to collect fees.\\n     */\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 unit;\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for taking orders in the specified tick.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param maxUnit The max unit to take\\n     */\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxUnit;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for canceling an order.\\n     * @param id The order id for the order\\n     * @param toUnit The remaining open unit for the order after cancellation. Must not exceed the current open unit.\\n     */\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 toUnit;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xda8dffc751ac3554033e084919f1e431eb2585c80e1e30b9a0198366a8607086\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6baab4710fa674981395f428bd6550c4e288ac44a1a5d38c2a58fd67234d57e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenUnit The unit that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledUnit The unit that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedUnit The unit that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedUnit, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbff95e07debd7d51cb3aa79172fd3c31efb57cea1c03d21b5740a565198d8343\",\"license\":\"MIT\"},\"clober-dex/v2-core/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := and(hash, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f9ed99dfb9a5ce14c29359a5ad8b43de0c756e44b2e5f581e8ea6db7cacbeb\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(and(rate_, 0xffffff), MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, reverseFee);\\n    }\\n}\\n\",\"keccak256\":\"0xa945c8e3ced4dd6f7be34da0306de74d466bf1a6ea74de5c54672fb49234cfef\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                    sar(96, mul(add(24828157081833163892658089445524,\\n                        sar(96, mul(add(3273285459638523848632254066296,\\n                            x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Base conversion: mul `2**96 / (5**18 * 2**192)`.\\n            r := sdiv(p, 302231454903657293676544000000000000000000)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2dc502dd66a9e36e6c4bb8c4fb3d21120f9f0ff7a934dcfe21ec820cac72275\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := and(shr(40, id), 0xffffff)\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := and(shr(40, id), 0xffffff)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c384badc4971d774987c6f5bce9d578712c7469688735b3c1eafaf2e748fe6\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for *;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 1350587;\\n    uint256 internal constant MAX_PRICE = 4647684107270898330752324302845848816923571339324334;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990;\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357c;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624ea;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db5883;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b3;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074c;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a39;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7f;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f7;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea92604;\\n    uint256 private constant _R18 = 0x48a170391f7dc42;\\n    uint256 private constant _R19 = 0x149b34;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        unchecked {\\n            int24 tick = int24((int256(price).lnWad() * 42951820407860) / 2 ** 128);\\n            if (toPrice(Tick.wrap(tick)) > price) return Tick.wrap(tick - 1);\\n            return Tick.wrap(tick);\\n        }\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 96;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 96;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 96;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 96;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 96;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 96;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 96;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 96;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 96;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 96;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 96;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 96;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 96;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 96;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 96;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 96;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 96;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 96;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 96;\\n        }\\n        if (tickValue > 0) price = 0x1000000000000000000000000000000000000000000000000 / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 96, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = unit(uint64) * unitSize(uint64) < 2^96\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 96, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xffbe19efd2b2e4e1eee3ed15c9363f5c45d70a6058b0b85ec9199e34de3b6b9b\",\"license\":\"GPL-2.0-or-later\"},\"src/SimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\n\\nimport {IStrategy} from \\\"./interfaces/IStrategy.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport {ISimpleOracleStrategy} from \\\"./interfaces/ISimpleOracleStrategy.sol\\\";\\nimport {ILiquidityVault} from \\\"./interfaces/ILiquidityVault.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract SimpleOracleStrategy is ISimpleOracleStrategy, Ownable2Step, UUPSUpgradeable, Initializable {\\n    using CurrencyLibrary for Currency;\\n    using FeePolicyLibrary for FeePolicy;\\n    using TickLibrary for Tick;\\n\\n    uint256 public constant RATE_PRECISION = 1e6;\\n    uint256 public constant LAST_RAW_AMOUNT_MASK = (1 << 128) - 1;\\n\\n    IOracle public immutable referenceOracle;\\n    ILiquidityVault public immutable liquidityVault;\\n    IBookManager public immutable bookManager;\\n\\n    mapping(address => bool) public isOperator;\\n    mapping(bytes32 => Config) internal _configs;\\n    mapping(bytes32 => Position) internal _positions;\\n    mapping(bytes32 => uint256) internal _lastAmountA;\\n    mapping(bytes32 => uint256) internal _lastAmountB;\\n\\n    modifier onlyOperator() {\\n        if (!isOperator[msg.sender]) revert NotOperator();\\n        _;\\n    }\\n\\n    constructor(IOracle referenceOracle_, ILiquidityVault liquidityVault_, IBookManager bookManager_)\\n        Ownable(msg.sender)\\n    {\\n        referenceOracle = referenceOracle_;\\n        liquidityVault = liquidityVault_;\\n        bookManager = bookManager_;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function initialize(address initialOwner) external initializer {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    function getConfig(bytes32 key) external view returns (Config memory) {\\n        return _configs[key];\\n    }\\n\\n    function getPosition(bytes32 key) external view returns (Position memory) {\\n        return _positions[key];\\n    }\\n\\n    function getLastAmount(bytes32 key) external view returns (uint256, uint256) {\\n        return (_lastAmountA[key], _lastAmountB[key]);\\n    }\\n\\n    function computeOrders(bytes32 key) external view returns (Order[] memory ordersA, Order[] memory ordersB) {\\n        Position memory position = _positions[key];\\n        if (position.paused) revert Paused();\\n\\n        Config memory config = _configs[key];\\n\\n        IBookManager.BookKey memory bookKeyA;\\n        IBookManager.BookKey memory bookKeyB;\\n        ILiquidityVault.Liquidity memory liquidityA;\\n        ILiquidityVault.Liquidity memory liquidityB;\\n        {\\n            (BookId bookIdA, BookId bookIdB) = liquidityVault.getBookPairs(key);\\n            bookKeyA = bookManager.getBookKey(bookIdA);\\n            bookKeyB = bookManager.getBookKey(bookIdB);\\n\\n            (liquidityA, liquidityB) = liquidityVault.getLiquidity(key);\\n\\n            if (\\n                (_lastAmountA[key] > 0 || _lastAmountB[key] > 0)\\n                    && (\\n                        liquidityA.cancelable > _lastAmountA[key] * config.rebalanceThreshold / RATE_PRECISION\\n                            || liquidityB.cancelable > _lastAmountB[key] * config.rebalanceThreshold / RATE_PRECISION\\n                    )\\n            ) {\\n                return (ordersA, ordersB);\\n            }\\n\\n            if (!_isOraclePriceValid(position.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base)) {\\n                revert InvalidOraclePrice();\\n            }\\n        }\\n\\n        (uint256 amountA, uint256 amountB) = _calculateAmounts(\\n            liquidityA.reserve + liquidityA.cancelable + liquidityA.claimable,\\n            liquidityB.reserve + liquidityB.cancelable + liquidityB.claimable,\\n            position.oraclePrice,\\n            _getCurrencyDecimals(bookKeyA.quote),\\n            _getCurrencyDecimals(bookKeyA.base),\\n            config\\n        );\\n\\n        if (bookKeyA.makerPolicy.usesQuote()) amountA = bookKeyA.makerPolicy.calculateOriginalAmount(amountA, false);\\n        if (bookKeyB.makerPolicy.usesQuote()) amountB = bookKeyB.makerPolicy.calculateOriginalAmount(amountB, false);\\n\\n        // SimpleStrategy has only one bid and one ask order\\n        ordersA = new Order[](1);\\n        ordersB = new Order[](1);\\n        ordersA[0] = Order({\\n            tick: position.tickA,\\n            rawAmount: SafeCast.toUint64(amountA * position.rate / bookKeyA.unitSize / RATE_PRECISION)\\n        });\\n        ordersB[0] = Order({\\n            tick: position.tickB,\\n            rawAmount: SafeCast.toUint64(amountB * position.rate / bookKeyB.unitSize / RATE_PRECISION)\\n        });\\n\\n        return (ordersA, ordersB);\\n    }\\n\\n    function _calculateAmounts(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 oraclePrice,\\n        uint8 decimalsA,\\n        uint8 decimalsB,\\n        Config memory config\\n    ) internal view returns (uint256 resultA, uint256 resultB) {\\n        // @dev Use the same decimals for both amounts to calculate the value properly\\n        if (decimalsA > decimalsB) {\\n            amountB = amountB * 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            amountA = amountA * 10 ** (decimalsB - decimalsA);\\n        }\\n\\n        resultA = amountA * config.rateA / RATE_PRECISION;\\n        resultB = amountB * config.rateB / RATE_PRECISION;\\n\\n        uint256 basePrice = 10 ** referenceOracle.decimals();\\n        uint256 valueA = resultA * basePrice;\\n        uint256 valueB = resultB * oraclePrice;\\n\\n        if (valueA > valueB) {\\n            resultA = valueB / basePrice;\\n            valueA = resultA * basePrice;\\n        } else {\\n            resultB = valueA / oraclePrice;\\n            valueB = resultB * oraclePrice;\\n        }\\n\\n        if (valueA < amountA * config.minRateA / RATE_PRECISION * basePrice) {\\n            resultA = amountA * config.minRateA / RATE_PRECISION;\\n        }\\n        if (valueB < amountB * config.minRateB / RATE_PRECISION * oraclePrice) {\\n            resultB = amountB * config.minRateB / RATE_PRECISION;\\n        }\\n\\n        // @dev Turn back to original decimals\\n        if (decimalsA > decimalsB) {\\n            resultB = resultB / 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            resultA = resultA / 10 ** (decimalsB - decimalsA);\\n        }\\n    }\\n\\n    function isOraclePriceValid(bytes32 key) external view returns (bool) {\\n        Config memory config = _configs[key];\\n        Position memory position = _positions[key];\\n\\n        (BookId bookIdA,) = liquidityVault.getBookPairs(key);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n\\n        return _isOraclePriceValid(position.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base);\\n    }\\n\\n    function _isOraclePriceValid(\\n        uint256 oraclePrice,\\n        uint256 referenceThreshold,\\n        Currency currencyA,\\n        Currency currencyB\\n    ) internal view returns (bool) {\\n        uint256 referencePrice;\\n        address[] memory assets = new address[](2);\\n        assets[0] = Currency.unwrap(currencyA);\\n        assets[1] = Currency.unwrap(currencyB);\\n\\n        try referenceOracle.getAssetsPrices(assets) returns (uint256[] memory prices) {\\n            // price = basePrice / quotePrice\\n            referencePrice = prices[1] * 10 ** referenceOracle.decimals() / prices[0];\\n        } catch {\\n            return false;\\n        }\\n\\n        if (\\n            referencePrice * (RATE_PRECISION + referenceThreshold) / RATE_PRECISION < oraclePrice\\n                || referencePrice * (RATE_PRECISION - referenceThreshold) / RATE_PRECISION > oraclePrice\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function isPaused(bytes32 key) external view returns (bool) {\\n        return _positions[key].paused;\\n    }\\n\\n    function pause(bytes32 key) external onlyOperator {\\n        delete _lastAmountA[key];\\n        delete _lastAmountB[key];\\n        _positions[key].paused = true;\\n        emit Pause(key);\\n    }\\n\\n    function unpause(bytes32 key) external onlyOperator {\\n        _positions[key].paused = false;\\n        emit Unpause(key);\\n    }\\n\\n    function updatePosition(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB, uint24 rate)\\n        external\\n        onlyOperator\\n    {\\n        if (rate > RATE_PRECISION) revert InvalidValue();\\n\\n        uint256 priceA = tickA.toPrice();\\n        uint256 priceB = Tick.wrap(-Tick.unwrap(tickB)).toPrice();\\n\\n        Config memory config = _configs[key];\\n        if (\\n            oraclePrice < TickLibrary.MIN_PRICE || oraclePrice > TickLibrary.MAX_PRICE\\n                || oraclePrice * (RATE_PRECISION + config.priceThresholdA) / RATE_PRECISION < priceA\\n                || oraclePrice * (RATE_PRECISION - config.priceThresholdB) / RATE_PRECISION > priceB\\n        ) revert ExceedsThreshold();\\n\\n        (BookId bookIdA, BookId bookIdB) = liquidityVault.getBookPairs(key);\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n        priceA = bookKeyA.makerPolicy.usesQuote()\\n            ? uint256(int256(priceA) + bookKeyA.makerPolicy.calculateFee(priceA, false))\\n            : bookKeyA.makerPolicy.calculateOriginalAmount(priceA, true);\\n\\n        IBookManager.BookKey memory bookKeyB = bookManager.getBookKey(bookIdB);\\n        priceB = bookKeyB.makerPolicy.usesQuote()\\n            ? bookKeyB.makerPolicy.calculateOriginalAmount(priceB, false)\\n            : uint256(int256(priceB) - bookKeyB.makerPolicy.calculateFee(priceB, false));\\n\\n        if (priceA >= priceB) revert InvalidPrice();\\n\\n        // @dev Convert oracle price to the same decimals as the reference oracle\\n        oraclePrice =\\n            oraclePrice * 10 ** _getCurrencyDecimals(bookKeyA.base) / 10 ** _getCurrencyDecimals(bookKeyA.quote);\\n        oraclePrice = Math.mulDiv(oraclePrice, 10 ** referenceOracle.decimals(), 1 << 96);\\n        if (!_isOraclePriceValid(oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base)) {\\n            revert InvalidOraclePrice();\\n        }\\n\\n        Position memory position = _positions[key];\\n        position.oraclePrice = SafeCast.toUint176(oraclePrice);\\n        position.tickA = tickA;\\n        position.tickB = tickB;\\n        position.rate = rate;\\n\\n        _positions[key] = position;\\n        delete _lastAmountA[key];\\n        delete _lastAmountB[key];\\n        emit UpdatePosition(key, oraclePrice, tickA, tickB, rate);\\n    }\\n\\n    function setConfig(bytes32 key, Config memory config) external onlyOwner {\\n        if (\\n            config.referenceThreshold > RATE_PRECISION || config.rebalanceThreshold > RATE_PRECISION\\n                || config.rateA > RATE_PRECISION || config.rateB > RATE_PRECISION || config.minRateA > RATE_PRECISION\\n                || config.minRateB > RATE_PRECISION || config.priceThresholdA > RATE_PRECISION\\n                || config.priceThresholdB > RATE_PRECISION\\n        ) revert InvalidConfig();\\n\\n        if (config.rateA < config.minRateA || config.rateB < config.minRateB) revert InvalidConfig();\\n\\n        _configs[key] = config;\\n        emit UpdateConfig(key, config);\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        isOperator[operator] = status;\\n        emit SetOperator(operator, status);\\n    }\\n\\n    function _getCurrencyDecimals(Currency currency) internal view returns (uint8) {\\n        return currency.isNative() ? 18 : IERC20Metadata(Currency.unwrap(currency)).decimals();\\n    }\\n\\n    function mintHook(address, bytes32, uint256, uint256) external view {\\n        if (msg.sender != address(liquidityVault)) revert InvalidAccess();\\n    }\\n\\n    function burnHook(address, bytes32 key, uint256 burnAmount, uint256 lastTotalSupply) external {\\n        if (msg.sender != address(liquidityVault)) revert InvalidAccess();\\n        _lastAmountA[key] -= _lastAmountA[key] * burnAmount / lastTotalSupply;\\n        _lastAmountB[key] -= _lastAmountB[key] * burnAmount / lastTotalSupply;\\n    }\\n\\n    function rebalanceHook(address, bytes32 key, Order[] memory, Order[] memory, uint256 amountA, uint256 amountB)\\n        external\\n    {\\n        if (msg.sender != address(liquidityVault)) revert InvalidAccess();\\n        _lastAmountA[key] = amountA;\\n        _lastAmountB[key] = amountB;\\n    }\\n}\\n\",\"keccak256\":\"0xebc5fc50176c9e18d7b017dfd3059b5dcb5f332b678f1f63f86ae7549358f70a\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/ILiquidityVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {OrderId} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\nimport {Currency} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\n\\ninterface ILiquidityVault {\\n    struct Pool {\\n        BookId bookIdA;\\n        BookId bookIdB;\\n        IStrategy strategy;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        OrderId[] orderListA;\\n        OrderId[] orderListB;\\n    }\\n\\n    error InvalidRate();\\n    error NotSelf();\\n    error InvalidHook();\\n    error InvalidStrategy();\\n    error InvalidBookPair();\\n    error AlreadyOpened();\\n    error InvalidLockAcquiredSender();\\n    error InvalidLockCaller();\\n    error LockFailure();\\n    error InvalidAmount();\\n    error InvalidValue();\\n    error Slippage();\\n\\n    event Open(bytes32 indexed key, BookId indexed bookIdA, BookId indexed bookIdB, bytes32 salt, address strategy);\\n    event Mint(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Burn(\\n        address indexed user,\\n        bytes32 indexed key,\\n        uint256 lpAmount,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 feeA,\\n        uint256 feeB\\n    );\\n    event Rebalance(bytes32 indexed key);\\n    event Claim(bytes32 indexed key, uint256 claimedAmountA, uint256 claimedAmountB);\\n    event Cancel(bytes32 indexed key, uint256 canceledAmountA, uint256 canceledAmountB);\\n    event Collect(Currency indexed currency, address indexed to, uint256 amount);\\n\\n    struct Liquidity {\\n        uint256 reserve;\\n        uint256 claimable;\\n        uint256 cancelable;\\n    }\\n\\n    /// @notice Retrieves the burn fee rate.\\n    /// @return The burn fee rate.\\n    function burnFeeRate() external view returns (uint256);\\n\\n    /// @notice Returns the amount of pending fees for a given currency that can be collected\\n    /// @param currency The currency to check pending fees for\\n    /// @return The total amount of uncollected fees in the specified currency\\n    function fees(Currency currency) external view returns (uint256);\\n\\n    /// @notice Retrieves the book pair for a specified book ID.\\n    /// @param bookId The book ID.\\n    /// @return The book pair.\\n    function bookPair(BookId bookId) external view returns (BookId);\\n\\n    /// @notice Retrieves the pool for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return The pool.\\n    function getPool(bytes32 key) external view returns (Pool memory);\\n\\n    /// @notice Retrieves the book pairs for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return bookIdA The book ID for the first book.\\n    /// @return bookIdB The book ID for the second book.\\n    function getBookPairs(bytes32 key) external view returns (BookId bookIdA, BookId bookIdB);\\n\\n    /// @notice Retrieves the liquidity for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return liquidityA The liquidity for the first token.\\n    /// @return liquidityB The liquidity for the second token.\\n    function getLiquidity(bytes32 key)\\n        external\\n        view\\n        returns (Liquidity memory liquidityA, Liquidity memory liquidityB);\\n\\n    /// @notice Opens a new pool with the specified parameters.\\n    /// @param bookKeyA The book key for the first book.\\n    /// @param bookKeyB The book key for the second book.\\n    /// @param salt The salt value.\\n    /// @param strategy The address of the strategy.\\n    /// @return key The key of the opened pool.\\n    function open(\\n        IBookManager.BookKey calldata bookKeyA,\\n        IBookManager.BookKey calldata bookKeyB,\\n        bytes32 salt,\\n        address strategy\\n    ) external returns (bytes32 key);\\n\\n    /// @notice Mints liquidity for the specified key.\\n    /// @param key The key of the pool.\\n    /// @param amountA The amount of the first token.\\n    /// @param amountB The amount of the second token.\\n    /// @param minLpAmount The minimum amount of liquidity tokens to mint.\\n    /// @return The amount of liquidity tokens minted.\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB, uint256 minLpAmount)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /// @notice Burns liquidity for the specified key.\\n    /// @param key The key of the pool.\\n    /// @param amount The amount of liquidity tokens to burn.\\n    /// @param minAmountA The amount of the first token to receive.\\n    /// @param minAmountB The minimum amount of the second token to receive.\\n    /// @return The amounts of the first and second tokens to receive.\\n    function burn(bytes32 key, uint256 amount, uint256 minAmountA, uint256 minAmountB)\\n        external\\n        returns (uint256, uint256);\\n\\n    /// @notice Rebalances the pool for the specified key.\\n    /// @param key The key of the pool.\\n    function rebalance(bytes32 key) external;\\n\\n    /// @notice Collects the pending fees for a given currency.\\n    /// @param currency The currency to collect fees for.\\n    /// @param to The address to send the collected fees to.\\n    /// @dev Only the owner can collect fees.\\n    function collect(Currency currency, address to) external;\\n}\\n\",\"keccak256\":\"0x1b7e92bcd0a466dd2eace67172dc650289b434e59735e9b24385ade86a64269c\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Retrieves the number of decimals used by the oracle.\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Retrieves the price of a specified asset.\\n    /// @param asset The address of the asset.\\n    /// @return The price of the asset.\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    /// @notice Retrieves the prices of a list of specified assets.\\n    /// @param assets The list of asset addresses.\\n    /// @return The list of prices for the specified assets.\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x10bd571d6c9d1c030bd0ca175f9f1e94abbd5ed3495a82985f61bf5757a372f4\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/ISimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport \\\"./ILiquidityVault.sol\\\";\\n\\ninterface ISimpleOracleStrategy is IStrategy {\\n    error InvalidPrice();\\n    error InvalidAccess();\\n    error InvalidOraclePrice();\\n    error InvalidConfig();\\n    error InvalidValue();\\n    error ExceedsThreshold();\\n    error NotOperator();\\n    error Paused();\\n\\n    event SetOperator(address indexed operator, bool status);\\n    event UpdateConfig(bytes32 indexed key, Config config);\\n    event UpdatePosition(bytes32 indexed key, uint256 oraclePrice, Tick tickA, Tick tickB, uint256 rate);\\n    event Pause(bytes32 indexed key);\\n    event Unpause(bytes32 indexed key);\\n\\n    struct Config {\\n        uint24 referenceThreshold;\\n        uint24 rebalanceThreshold;\\n        uint24 rateA;\\n        uint24 rateB;\\n        uint24 minRateA;\\n        uint24 minRateB;\\n        uint24 priceThresholdA;\\n        uint24 priceThresholdB;\\n    }\\n\\n    struct Position {\\n        bool paused;\\n        uint176 oraclePrice;\\n        uint24 rate;\\n        Tick tickA;\\n        Tick tickB;\\n    }\\n\\n    /// @notice Returns the reference IOracle contract used by this strategy.\\n    function referenceOracle() external view returns (IOracle);\\n\\n    /// @notice Returns the IBookManager instance controlling the underlying orderbooks.\\n    function bookManager() external view returns (IBookManager);\\n\\n    /// @notice Checks if a given address is granted operator privileges.\\n    /// @param operator The address to query.\\n    /// @return True if the address is an operator, otherwise false.\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Fetches the configuration (Config struct) for a specified key.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @return The current Config struct associated with the key.\\n    function getConfig(bytes32 key) external view returns (Config memory);\\n\\n    /// @notice Retrieves the position (Position struct) for a specified key.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @return A Position struct containing paused state, oracle price, rate, tickA, and tickB.\\n    function getPosition(bytes32 key) external view returns (Position memory);\\n\\n    /// @notice Returns two amounts recorded in the last operation for a specified key.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @return (uint256, uint256) representing the two amounts (likely token A / token B).\\n    function getLastAmount(bytes32 key) external view returns (uint256, uint256);\\n\\n    /// @notice Checks if the oracle price for the specified key is valid according to the strategy's criteria.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @return True if the oracle price is valid, otherwise false.\\n    function isOraclePriceValid(bytes32 key) external view returns (bool);\\n\\n    /// @notice Queries whether the position for a specified key is paused.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @return True if paused, false otherwise.\\n    function isPaused(bytes32 key) external view returns (bool);\\n\\n    /// @notice Pauses the position corresponding to the given key, preventing further updates or orders.\\n    /// @param key A unique identifier for the position or pool.\\n    function pause(bytes32 key) external;\\n\\n    /// @notice Unpauses the position for the given key, allowing normal strategy operations to resume.\\n    /// @param key A unique identifier for the position or pool.\\n    function unpause(bytes32 key) external;\\n\\n    /// @notice Updates the position parameters based on a newly fetched oracle price and tick ranges.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @param oraclePrice The new oracle price used to guide the strategy.\\n    /// @param tickA The updated tick parameters for side A of the orderbook.\\n    /// @param tickB The updated tick parameters for side B of the orderbook.\\n    /// @param rate The multiplier applied at the final step of order amount calculation.\\n    function updatePosition(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB, uint24 rate) external;\\n\\n    /// @notice Updates the configuration settings for the specified key.\\n    /// @param key A unique identifier for the position or pool.\\n    /// @param config The new configuration parameters (thresholds, rates, etc.).\\n    function setConfig(bytes32 key, Config memory config) external;\\n\\n    /// @notice Assigns or revokes operator permissions for a given address.\\n    /// @param operator The address whose operator status is being updated.\\n    /// @param status True to grant operator privileges, false to revoke.\\n    function setOperator(address operator, bool status) external;\\n}\\n\",\"keccak256\":\"0x91ff1f36730ec210b08db086bb066228252a3e256d5971c84d85146af67e36cf\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\n\\ninterface IStrategy {\\n    struct Order {\\n        Tick tick;\\n        uint64 rawAmount;\\n    }\\n\\n    /// @notice Retrieves the orders for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return ordersA The orders for the first token.\\n    /// @return ordersB The orders for the second token.\\n    /// @dev Clears pool orders if an error occurs and retains current orders if the list is empty.\\n    function computeOrders(bytes32 key) external view returns (Order[] memory ordersA, Order[] memory ordersB);\\n\\n    /// @notice Hook that is called after minting.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param mintAmount The amount minted.\\n    /// @param lastTotalSupply The total supply before minting.\\n    function mintHook(address sender, bytes32 key, uint256 mintAmount, uint256 lastTotalSupply) external;\\n\\n    /// @notice Hook that is called after burning.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param burnAmount The amount burned.\\n    /// @param lastTotalSupply The total supply before burning.\\n    function burnHook(address sender, bytes32 key, uint256 burnAmount, uint256 lastTotalSupply) external;\\n\\n    /// @notice Hook that is called after rebalancing.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param liquidityA The liquidity orders for the first token.\\n    /// @param liquidityB The liquidity orders for the second token.\\n    /// @param amountA The amount of the first token.\\n    /// @param amountB The amount of the second token.\\n    function rebalanceHook(\\n        address sender,\\n        bytes32 key,\\n        Order[] memory liquidityA,\\n        Order[] memory liquidityB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external;\\n}\\n\",\"keccak256\":\"0x985206b3c2d3c586c80cdec9f692b23077a60ade97b6a1fd5099a3b02870fcde\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61010060405230608052348015610014575f80fd5b50604051613deb380380613deb833981016040819052610033916100fe565b338061005857604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100618161007f565b506001600160a01b0392831660a05290821660c0521660e052610148565b600180546001600160a01b03191690556100988161009b565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610098575f80fd5b5f805f60608486031215610110575f80fd5b835161011b816100ea565b602085015190935061012c816100ea565b604085015190925061013d816100ea565b809150509250925092565b60805160a05160c05160e051613bf26101f95f395f81816103fc01528181610d8a01528181610e1c015281816116ac015281816117930152611d7d01525f81816105c101528181610cff01528181610ebf015281816112910152818161161701528181611ce101528181611e250152611faf01525f8181610384015281816118d20152818161225d015281816122fa015261255301525f81816127e60152818161280f01526129920152613bf25ff3fe6080604052600436106101ba575f3560e01c8063708666ad116100f2578063a3c8dc1f11610092578063db7c74b611610062578063db7c74b614610768578063e30c397814610787578063ed56531a146107a4578063f2fde38b146107c3575f80fd5b8063a3c8dc1f14610684578063ad3cb1cc146106d1578063b5a562bd14610726578063c4d66de814610749575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461060b578063a0f1533114610627578063a30416d314610646578063a3a36f5514610665575f80fd5b8063708666ad146105b0578063715018a6146105e357806379ba5097146105f7575f80fd5b80633f322bc91161015d57806352d1902d1161013857806352d1902d14610450578063558a7297146104645780636d70f7ae146104835780636dd5b69d146104b1575f80fd5b80633f322bc9146103eb5780634424d7f51461041e5780634f1ef2861461043d575f80fd5b80632b3ba681116101985780632b3ba681146103305780632f4dae9f14610354578063337cceb9146103735780633b93fabc146103be575f80fd5b8063063570bd146101be5780631928b3cb146101df578063241b71bb146102f2575b5f80fd5b3480156101c9575f80fd5b506101dd6101d83660046131d3565b6107e2565b005b3480156101ea575f80fd5b506102926101f9366004613299565b6040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152505f90815260046020908152604091829020825160a081018452905460ff8116151582526001600160b01b036101008204169282019290925262ffffff600160b81b83041692810192909252600160d01b8104600290810b6060840152600160e81b909104900b608082015290565b6040516102e991905f60a0820190508251151582526001600160b01b03602084015116602083015262ffffff6040840151166040830152606083015160020b6060830152608083015160020b608083015292915050565b60405180910390f35b3480156102fd575f80fd5b5061032061030c366004613299565b5f9081526004602052604090205460ff1690565b60405190151581526020016102e9565b34801561033b575f80fd5b50610346620f424081565b6040519081526020016102e9565b34801561035f575f80fd5b506101dd61036e366004613299565b610a9d565b34801561037e575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102e9565b3480156103c9575f80fd5b506103dd6103d8366004613299565b610b0b565b6040516102e9929190613302565b3480156103f6575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b348015610429575f80fd5b506101dd61043836600461341d565b611286565b6101dd61044b3660046134a9565b6112f2565b34801561045b575f80fd5b50610346611311565b34801561046f575f80fd5b506101dd61047e36600461354b565b61133f565b34801561048e575f80fd5b5061032061049d366004613586565b60026020525f908152604090205460ff1681565b3480156104bc575f80fd5b506105a36104cb366004613299565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152505f90815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290565b6040516102e991906135a1565b3480156105bb575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ee575f80fd5b506101dd61139e565b348015610602575f80fd5b506101dd6113b1565b348015610616575f80fd5b505f546001600160a01b03166103a6565b348015610632575f80fd5b506101dd610641366004613624565b6113fa565b348015610651575f80fd5b50610320610660366004613299565b611bcd565b348015610670575f80fd5b506101dd61067f36600461367b565b611e1a565b34801561068f575f80fd5b506106bc61069e366004613299565b5f908152600560209081526040808320546006909252909120549091565b604080519283526020830191909152016102e9565b3480156106dc575f80fd5b506107196040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516102e991906136b3565b348015610731575f80fd5b506103466fffffffffffffffffffffffffffffffff81565b348015610754575f80fd5b506101dd610763366004613586565b611e69565b348015610773575f80fd5b506101dd61078236600461367b565b611fa4565b348015610792575f80fd5b506001546001600160a01b03166103a6565b3480156107af575f80fd5b506101dd6107be366004613299565b612081565b3480156107ce575f80fd5b506101dd6107dd366004613586565b612109565b6107ea612186565b620f4240815f015162ffffff16118061080e5750620f4240816020015162ffffff16115b806108245750620f4240816040015162ffffff16115b8061083a5750620f4240816060015162ffffff16115b806108505750620f4240816080015162ffffff16115b806108665750620f42408160a0015162ffffff16115b8061087c5750620f42408160c0015162ffffff16115b806108925750620f42408160e0015162ffffff16115b156108b0576040516306b7c75960e31b815260040160405180910390fd5b806080015162ffffff16816040015162ffffff1610806108e157508060a0015162ffffff16816060015162ffffff16105b156108ff576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151858501516060870151608088015160a089015160c08a015160e08b015162ffffff97881665ffffffffffff19909a1699909917630100000096881696909602959095176bffffffffffff00000000000019166601000000000000948716949094026bffffff000000000000000000191693909317690100000000000000000092861692909202919091177fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff16600160601b918516919091027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff1617600160781b91841691909102177fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff16600160901b918316919091027fffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff1617600160a81b91909316029190911790555182907fa6796aaa3e8df6d8ed1c3d26d8a54828d50465a6b4151685c28954b40e3be4c190610a919084906135a1565b60405180910390a25050565b335f9081526002602052604090205460ff16610acc57604051631f0853c160e21b815260040160405180910390fd5b5f81815260046020526040808220805460ff191690555182917fbd104d77fb864be973a9ad3964a3b186ad15178d292d6e9b0e6783e16162fd2291a250565b5f81815260046020908152604091829020825160a081018452905460ff811615801583526001600160b01b036101008304169383019390935262ffffff600160b81b82041693820193909352600160d01b8304600290810b606083810191909152600160e81b909404900b60808201528291610bb3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f848152600360209081526040808320815161010081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c080880191909152600160a81b90950490931660e086015285518085018752888152808801899052808701899052808301899052808201899052808401899052865194850187528885528488018990528487018990528483018990529084018890529183018790528451908101855286815294850186905292840194909452929091610cdd60405180606001604052805f81526020015f81526020015f81525090565b60405163c630ed7d60e01b8152600481018a90525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa158015610d43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d6791906136fe565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610dd7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dfb919061372f565b604051639b22917d60e01b81526001600160c01b03831660048201529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610e69573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e8d919061372f565b6040517ffa6793d5000000000000000000000000000000000000000000000000000000008152600481018d90529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fa6793d59060240160c060405180830381865afa158015610f0c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f309190613832565b5f8d8152600560205260409020549195509350151580610f5c57505f8b81526006602052604090205415155b8015610fde5750620f4240876020015162ffffff1660055f8e81526020019081526020015f2054610f8d9190613870565b610f97919061389b565b84604001511180610fde5750620f4240876020015162ffffff1660065f8e81526020019081526020015f2054610fcd9190613870565b610fd7919061389b565b8360400151115b15610ff0575050505050505050915091565b61101888602001516001600160b01b0316885f015162ffffff168860400151895f01516121b2565b6110345760405162fc7cad60e51b815260040160405180910390fd5b50505f806110a984602001518560400151865f015161105391906138ba565b61105d91906138ba565b60208501516040860151865161107391906138ba565b61107d91906138ba565b8a602001516001600160b01b03166110988a60400151612422565b8a516110a390612422565b8c6124a0565b915091506110c0866060015162ffffff1660171c90565b156110dd5760608601516110da9062ffffff16835f61275e565b91505b6110f0856060015162ffffff1660171c90565b1561110d57606085015161110a9062ffffff16825f61275e565b90505b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081611122575050604080516001808252818301909252919b50602082015b604080518082019091525f808252602082015281526020019060019003908161115e5790505098506040518060400160405280896060015160020b81526020016111e2620f4240896020015167ffffffffffffffff168c6040015162ffffff16876111c99190613870565b6111d3919061389b565b6111dd919061389b565b6127a1565b67ffffffffffffffff168152508a5f81518110611201576112016138cd565b60200260200101819052506040518060400160405280896080015160020b815260200161124f620f4240886020015167ffffffffffffffff168c6040015162ffffff16866111c99190613870565b67ffffffffffffffff16815250895f8151811061126e5761126e6138cd565b60200260200101819052505050505050505050915091565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112cf57604051633006171960e21b815260040160405180910390fd5b5f9485526005602090815260408087209390935560069052932092909255505050565b6112fa6127db565b61130382612892565b61130d828261289a565b5050565b5f61131a612987565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b611347612186565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b9101610a91565b6113a6612186565b6113af5f6129d0565b565b60015433906001600160a01b031681146113ee5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6113f7816129d0565b50565b335f9081526002602052604090205460ff1661142957604051631f0853c160e21b815260040160405180910390fd5b620f42408162ffffff16111561146b576040517faa7feadc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6114788460020b6129f6565b90505f61148f611487856138e1565b60020b6129f6565b5f88815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290915062149bbb87108061154c5750750c6c1313451aab317fb9b67e11777e9a5a6ccdb2ebae87115b80611585575082620f42408260c0015162ffffff16620f424061156f91906138ba565b611579908a613870565b611583919061389b565b105b806115be575081620f42408260e0015162ffffff16620f42406115a89190613901565b6115b2908a613870565b6115bc919061389b565b115b156115f5576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018990525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa15801561165b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061167f91906136fe565b604051639b22917d60e01b81526001600160c01b038316600482015291935091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156116f1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611715919061372f565b905061172a816060015162ffffff1660171c90565b6117495760608101516117449062ffffff1687600161275e565b611768565b606081015161175e9062ffffff16875f612cb5565b6117689087613914565b604051639b22917d60e01b81526001600160c01b03841660048201529096505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156117d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117fc919061372f565b9050611811816060015162ffffff1660171c90565b61183957606081015161182a9062ffffff16875f612cb5565b611834908761393b565b61184e565b606081015161184e9062ffffff16875f61275e565b9550858710611888576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118958260400151612422565b6118a090600a613a3a565b82516118ab90612422565b6118b690600a613a3a565b6118c0908d613870565b6118ca919061389b565b9a506119658b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119509190613a48565b61195b90600a613a3a565b600160601b612d35565b9a506119828b865f015162ffffff168460400151855f01516121b2565b61199e5760405162fc7cad60e51b815260040160405180910390fd5b5f8c815260046020908152604091829020825160a081018452905460ff8116151582526001600160b01b036101008204169282019290925262ffffff600160b81b83041692810192909252600160d01b8104600290810b6060840152600160e81b909104900b6080820152611a128c612dec565b81602001906001600160b01b031690816001600160b01b0316815250508a816060019060020b908160020b8152505089816080019060020b908160020b8152505088816040019062ffffff16908162ffffff16815250508060045f8f81526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a8154816001600160b01b0302191690836001600160b01b031602179055506040820151815f0160176101000a81548162ffffff021916908362ffffff1602179055506060820151815f01601a6101000a81548162ffffff021916908360020b62ffffff1602179055506080820151815f01601d6101000a81548162ffffff021916908360020b62ffffff16021790555090505060055f8e81526020019081526020015f205f905560065f8e81526020019081526020015f205f90558c7f6bfe82e0fc1c0e49aa5a610028c276fddb4bc3c4f8ae34f09277ce63597818f98d8d8d8d604051611bb69493929190938452600292830b6020850152910b604083015262ffffff16606082015260800190565b60405180910390a250505050505050505050505050565b5f81815260036020908152604080832081516101008082018452915462ffffff80821683526301000000820481168387015266010000000000008204811683860152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c0870152600160a81b909404831660e08601528989526004808952878a20885195860189525460ff8116151586529687046001600160b01b031698850198909852600160b81b860490921683870152600160d01b8504600290810b91840191909152600160e81b90940490930b92810192909252915163c630ed7d60e01b8152928301859052909183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa158015611d2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d5191906136fe565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611dc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de6919061372f565b9050611e1083602001516001600160b01b0316855f015162ffffff168360400151845f01516121b2565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e6357604051633006171960e21b815260040160405180910390fd5b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015611eb35750825b90505f8267ffffffffffffffff166001148015611ecf5750303b155b905081158015611edd575080155b15611f14576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611f4857845468ff00000000000000001916680100000000000000001785555b611f51866129d0565b8315611f9c57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611fed57604051633006171960e21b815260040160405180910390fd5b5f838152600560205260409020548190612008908490613870565b612012919061389b565b5f848152600560205260408120805490919061202f908490613901565b90915550505f83815260066020526040902054819061204f908490613870565b612059919061389b565b5f8481526006602052604081208054909190612076908490613901565b909155505050505050565b335f9081526002602052604090205460ff166120b057604051631f0853c160e21b815260040160405180910390fd5b5f818152600560209081526040808320839055600682528083208390556004909152808220805460ff191660011790555182917f6e78d720a83dbf19884c4e27501ba84a8a2e5ca1503419b03ee68d28d548e85791a250565b612111612186565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915561214e5f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146113af5760405163118cdaa760e01b81523360048201526024016113e5565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f815181106121eb576121eb6138cd565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061221f5761221f6138cd565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f290612294908490600401613a68565b5f60405180830381865afa9250505080156122d057506040513d5f823e601f3d908101601f191682016040526122cd9190810190613ab4565b60015b6122de575f9250505061241a565b805f815181106122f0576122f06138cd565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123789190613a48565b61238390600a613a3a565b82600181518110612396576123966138cd565b60200260200101516123a89190613870565b6123b2919061389b565b92505086620f42406123c488826138ba565b6123ce9085613870565b6123d8919061389b565b1080612404575086620f42406123ee8882613901565b6123f89085613870565b612402919061389b565b115b15612413575f9250505061241a565b6001925050505b949350505050565b5f6001600160a01b0382161561249757816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124929190613a48565b61249a565b60125b92915050565b5f808360ff168560ff1611156124d6576124ba8486613b40565b6124c590600a613a3a565b6124cf9088613870565b9650612506565b8360ff168560ff161015612506576124ee8585613b40565b6124f990600a613a3a565b6125039089613870565b97505b620f4240836040015162ffffff168961251f9190613870565b612529919061389b565b9150620f4240836060015162ffffff16886125449190613870565b61254e919061389b565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125d19190613a48565b6125dc90600a613a3a565b90505f6125e98285613870565b90505f6125f68985613870565b90508082111561261d5761260a838261389b565b94506126168386613870565b9150612636565b612627898361389b565b93506126338985613870565b90505b82620f4240876080015162ffffff168d6126509190613870565b61265a919061389b565b6126649190613870565b82101561269157620f4240866080015162ffffff168c6126849190613870565b61268e919061389b565b94505b88620f42408760a0015162ffffff168c6126ab9190613870565b6126b5919061389b565b6126bf9190613870565b8110156126ec57620f42408660a0015162ffffff168b6126df9190613870565b6126e9919061389b565b93505b8660ff168860ff161115612720576127048789613b40565b61270f90600a613a3a565b612719908561389b565b9350612750565b8660ff168860ff161015612750576127388888613b40565b61274390600a613a3a565b61274d908661389b565b94505b505050965096945050505050565b5f6207a11f19627fffff85160181831561277857815f0391505b81620f4240019050611e10620f4240866127929190613870565b82810615158616908390040190565b5f67ffffffffffffffff8211156127d757604080516306dfcc6560e41b81526004810191909152602481018390526044016113e5565b5090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061287457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128687f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156113af5760405163703e46dd60e11b815260040160405180910390fd5b6113f7612186565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128f4575060408051601f3d908101601f191682019092526128f191810190613b59565b60015b61291c57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016113e5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612978576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016113e5565b6129828383612e1f565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113af5760405163703e46dd60e11b815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff191690556113f781612e74565b5f612a0082612ed0565b815f600282900b8113612a135781612a1c565b612a1c826138e1565b62ffffff8116915060011615612a40576bfff97272373d413259a469909250612a48565b600160601b92505b6002811615612a675760606bfff2e50f5f656932ef12357c8402901c92505b6004811615612a865760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615612aa55760606bffcb9843d60f6159c9db58838402901c92505b6010811615612ac45760606bff973b41fa98c081472e68968402901c92505b6020811615612ae35760606bff2ea16466c96a3843ec78b38402901c92505b6040811615612b025760606bfe5dee046a99a2a811c461f18402901c92505b6080811615612b215760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615612b415760606bf987a7253ac413176f2b074c8402901c92505b610200811615612b615760606bf3392b0822b70005940c7a398402901c92505b610400811615612b815760606be7159475a2c29b7443b29c7f8402901c92505b610800811615612ba15760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615612bc15760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615612be15760606b70d869a156d2a1b890bb3df68402901c92505b614000811615612c015760606b31be135f97d08fd9812315058402901c92505b618000811615612c215760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615612c415760606a5d6af8dedb81196699c3298402901c92505b62020000811615612c60576060692216e584f5fa1ea926048402901c92505b62040000811615612c7d57606067048a170391f7dc428402901c92505b5f8260020b1315612cae57612cab83780100000000000000000000000000000000000000000000000061389b565b92505b5050919050565b5f6207a11f19627fffff851601600281900b82128281612cd757825f03612cd9565b825b62ffffff1690505f612d12612cee8389613870565b620f424088612d04578581830615151691040190565b808206151586151691040190565b905082612d2757612d2281613b70565b612d29565b805b98975050505050505050565b5f838302815f1985870982811083820303915050805f03612d6957838281612d5f57612d5f613887565b0492505050612de5565b808411612d8057612d806003851502601118612f2c565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b5f6001600160b01b038211156127d7576040516306dfcc6560e41b815260b06004820152602481018390526044016113e5565b612e2882612f3d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115612e6c576129828282612fc0565b61130d613032565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6207ffff600282900b1380612ef55750612eec6207ffff6138e1565b60020b8160020b125b156113f7576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b715f52806020526024601cfd5b806001600160a01b03163b5f03612f7257604051634c9c8ce360e01b81526001600160a01b03821660048201526024016113e5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051612fdc9190613ba6565b5f60405180830381855af49150503d805f8114613014576040519150601f19603f3d011682016040523d82523d5f602084013e613019565b606091505b509150915061302985838361306a565b95945050505050565b34156113af576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608261307f5761307a826130df565b612de5565b815115801561309657506001600160a01b0384163b155b156130d8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016113e5565b5080612de5565b8051156130ef5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b604051610100810167ffffffffffffffff8111828210171561315957613159613121565b60405290565b6040805190810167ffffffffffffffff8111828210171561315957613159613121565b604051601f8201601f1916810167ffffffffffffffff811182821017156131ab576131ab613121565b604052919050565b62ffffff811681146113f7575f80fd5b80356131ce816131b3565b919050565b5f808284036101208112156131e6575f80fd5b8335925061010080601f19830112156131fd575f80fd5b613205613135565b91506020850135613215816131b3565b8252613223604086016131c3565b6020830152613234606086016131c3565b6040830152613245608086016131c3565b606083015261325660a086016131c3565b608083015261326760c086016131c3565b60a083015261327860e086016131c3565b60c08301526132888186016131c3565b60e083015250809150509250929050565b5f602082840312156132a9575f80fd5b5035919050565b5f815180845260208085019450602084015f5b838110156132f7578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016132c3565b509495945050505050565b604081525f61331460408301856132b0565b828103602084015261302981856132b0565b6001600160a01b03811681146113f7575f80fd5b5f67ffffffffffffffff82111561335357613353613121565b5060051b60200190565b8035600281900b81146131ce575f80fd5b67ffffffffffffffff811681146113f7575f80fd5b5f82601f830112613392575f80fd5b813560206133a76133a28361333a565b613182565b82815260069290921b840181019181810190868411156133c5575f80fd5b8286015b8481101561341257604081890312156133e0575f80fd5b6133e861315f565b6133f18261335d565b8152848201356134008161336e565b818601528352918301916040016133c9565b509695505050505050565b5f805f805f8060c08789031215613432575f80fd5b863561343d81613326565b955060208701359450604087013567ffffffffffffffff80821115613460575f80fd5b61346c8a838b01613383565b95506060890135915080821115613481575f80fd5b5061348e89828a01613383565b9350506080870135915060a087013590509295509295509295565b5f80604083850312156134ba575f80fd5b82356134c581613326565b915060208381013567ffffffffffffffff808211156134e2575f80fd5b818601915086601f8301126134f5575f80fd5b81358181111561350757613507613121565b613519601f8201601f19168501613182565b9150808252878482850101111561352e575f80fd5b80848401858401375f848284010152508093505050509250929050565b5f806040838503121561355c575f80fd5b823561356781613326565b91506020830135801515811461357b575f80fd5b809150509250929050565b5f60208284031215613596575f80fd5b8135612de581613326565b5f6101008201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525060c083015161360660c084018262ffffff169052565b5060e083015161361d60e084018262ffffff169052565b5092915050565b5f805f805f60a08688031215613638575f80fd5b853594506020860135935061364f6040870161335d565b925061365d6060870161335d565b9150608086013561366d816131b3565b809150509295509295909350565b5f805f806080858703121561368e575f80fd5b843561369981613326565b966020860135965060408601359560600135945092505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80516001600160c01b03811681146131ce575f80fd5b5f806040838503121561370f575f80fd5b613718836136e8565b9150613726602084016136e8565b90509250929050565b5f60c0828403121561373f575f80fd5b60405160c0810181811067ffffffffffffffff8211171561376257613762613121565b604052825161377081613326565b815260208301516137808161336e565b6020820152604083015161379381613326565b604082015260608301516137a6816131b3565b606082015260808301516137b981613326565b608082015260a08301516137cc816131b3565b60a08201529392505050565b5f606082840312156137e8575f80fd5b6040516060810181811067ffffffffffffffff8211171561380b5761380b613121565b80604052508091508251815260208301516020820152604083015160408201525092915050565b5f8060c08385031215613843575f80fd5b61384d84846137d8565b915061372684606085016137d8565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761249a5761249a61385c565b634e487b7160e01b5f52601260045260245ffd5b5f826138b557634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561249a5761249a61385c565b634e487b7160e01b5f52603260045260245ffd5b5f8160020b627fffff1981036138f9576138f961385c565b5f0392915050565b8181038181111561249a5761249a61385c565b8082018281125f8312801582168215821617156139335761393361385c565b505092915050565b8181035f83128015838313168383128216171561361d5761361d61385c565b600181815b8085111561399457815f190482111561397a5761397a61385c565b8085161561398757918102915b93841c939080029061395f565b509250929050565b5f826139aa5750600161249a565b816139b657505f61249a565b81600181146139cc57600281146139d6576139f2565b600191505061249a565b60ff8411156139e7576139e761385c565b50506001821b61249a565b5060208310610133831016604e8410600b8410161715613a15575081810a61249a565b613a1f838361395a565b805f1904821115613a3257613a3261385c565b029392505050565b5f612de560ff84168361399c565b5f60208284031215613a58575f80fd5b815160ff81168114612de5575f80fd5b602080825282518282018190525f9190848201906040850190845b81811015613aa85783516001600160a01b031683529284019291840191600101613a83565b50909695505050505050565b5f6020808385031215613ac5575f80fd5b825167ffffffffffffffff811115613adb575f80fd5b8301601f81018513613aeb575f80fd5b8051613af96133a28261333a565b81815260059190911b82018301908381019087831115613b17575f80fd5b928401925b82841015613b3557835182529284019290840190613b1c565b979650505050505050565b60ff828116828216039081111561249a5761249a61385c565b5f60208284031215613b69575f80fd5b5051919050565b5f7f80000000000000000000000000000000000000000000000000000000000000008203613ba057613ba061385c565b505f0390565b5f82518060208501845e5f92019182525091905056fea2646970667358221220ee0c7e0424a225701a18bdd1ad8f52e14d0b69957b8f7ed57a95286a85cea23c64736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106101ba575f3560e01c8063708666ad116100f2578063a3c8dc1f11610092578063db7c74b611610062578063db7c74b614610768578063e30c397814610787578063ed56531a146107a4578063f2fde38b146107c3575f80fd5b8063a3c8dc1f14610684578063ad3cb1cc146106d1578063b5a562bd14610726578063c4d66de814610749575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461060b578063a0f1533114610627578063a30416d314610646578063a3a36f5514610665575f80fd5b8063708666ad146105b0578063715018a6146105e357806379ba5097146105f7575f80fd5b80633f322bc91161015d57806352d1902d1161013857806352d1902d14610450578063558a7297146104645780636d70f7ae146104835780636dd5b69d146104b1575f80fd5b80633f322bc9146103eb5780634424d7f51461041e5780634f1ef2861461043d575f80fd5b80632b3ba681116101985780632b3ba681146103305780632f4dae9f14610354578063337cceb9146103735780633b93fabc146103be575f80fd5b8063063570bd146101be5780631928b3cb146101df578063241b71bb146102f2575b5f80fd5b3480156101c9575f80fd5b506101dd6101d83660046131d3565b6107e2565b005b3480156101ea575f80fd5b506102926101f9366004613299565b6040805160a0810182525f80825260208201819052918101829052606081018290526080810191909152505f90815260046020908152604091829020825160a081018452905460ff8116151582526001600160b01b036101008204169282019290925262ffffff600160b81b83041692810192909252600160d01b8104600290810b6060840152600160e81b909104900b608082015290565b6040516102e991905f60a0820190508251151582526001600160b01b03602084015116602083015262ffffff6040840151166040830152606083015160020b6060830152608083015160020b608083015292915050565b60405180910390f35b3480156102fd575f80fd5b5061032061030c366004613299565b5f9081526004602052604090205460ff1690565b60405190151581526020016102e9565b34801561033b575f80fd5b50610346620f424081565b6040519081526020016102e9565b34801561035f575f80fd5b506101dd61036e366004613299565b610a9d565b34801561037e575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102e9565b3480156103c9575f80fd5b506103dd6103d8366004613299565b610b0b565b6040516102e9929190613302565b3480156103f6575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b348015610429575f80fd5b506101dd61043836600461341d565b611286565b6101dd61044b3660046134a9565b6112f2565b34801561045b575f80fd5b50610346611311565b34801561046f575f80fd5b506101dd61047e36600461354b565b61133f565b34801561048e575f80fd5b5061032061049d366004613586565b60026020525f908152604090205460ff1681565b3480156104bc575f80fd5b506105a36104cb366004613299565b60408051610100810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152505f90815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290565b6040516102e991906135a1565b3480156105bb575f80fd5b506103a67f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ee575f80fd5b506101dd61139e565b348015610602575f80fd5b506101dd6113b1565b348015610616575f80fd5b505f546001600160a01b03166103a6565b348015610632575f80fd5b506101dd610641366004613624565b6113fa565b348015610651575f80fd5b50610320610660366004613299565b611bcd565b348015610670575f80fd5b506101dd61067f36600461367b565b611e1a565b34801561068f575f80fd5b506106bc61069e366004613299565b5f908152600560209081526040808320546006909252909120549091565b604080519283526020830191909152016102e9565b3480156106dc575f80fd5b506107196040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516102e991906136b3565b348015610731575f80fd5b506103466fffffffffffffffffffffffffffffffff81565b348015610754575f80fd5b506101dd610763366004613586565b611e69565b348015610773575f80fd5b506101dd61078236600461367b565b611fa4565b348015610792575f80fd5b506001546001600160a01b03166103a6565b3480156107af575f80fd5b506101dd6107be366004613299565b612081565b3480156107ce575f80fd5b506101dd6107dd366004613586565b612109565b6107ea612186565b620f4240815f015162ffffff16118061080e5750620f4240816020015162ffffff16115b806108245750620f4240816040015162ffffff16115b8061083a5750620f4240816060015162ffffff16115b806108505750620f4240816080015162ffffff16115b806108665750620f42408160a0015162ffffff16115b8061087c5750620f42408160c0015162ffffff16115b806108925750620f42408160e0015162ffffff16115b156108b0576040516306b7c75960e31b815260040160405180910390fd5b806080015162ffffff16816040015162ffffff1610806108e157508060a0015162ffffff16816060015162ffffff16105b156108ff576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151858501516060870151608088015160a089015160c08a015160e08b015162ffffff97881665ffffffffffff19909a1699909917630100000096881696909602959095176bffffffffffff00000000000019166601000000000000948716949094026bffffff000000000000000000191693909317690100000000000000000092861692909202919091177fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff16600160601b918516919091027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff1617600160781b91841691909102177fffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffff16600160901b918316919091027fffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff1617600160a81b91909316029190911790555182907fa6796aaa3e8df6d8ed1c3d26d8a54828d50465a6b4151685c28954b40e3be4c190610a919084906135a1565b60405180910390a25050565b335f9081526002602052604090205460ff16610acc57604051631f0853c160e21b815260040160405180910390fd5b5f81815260046020526040808220805460ff191690555182917fbd104d77fb864be973a9ad3964a3b186ad15178d292d6e9b0e6783e16162fd2291a250565b5f81815260046020908152604091829020825160a081018452905460ff811615801583526001600160b01b036101008304169383019390935262ffffff600160b81b82041693820193909352600160d01b8304600290810b606083810191909152600160e81b909404900b60808201528291610bb3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f848152600360209081526040808320815161010081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c080880191909152600160a81b90950490931660e086015285518085018752888152808801899052808701899052808301899052808201899052808401899052865194850187528885528488018990528487018990528483018990529084018890529183018790528451908101855286815294850186905292840194909452929091610cdd60405180606001604052805f81526020015f81526020015f81525090565b60405163c630ed7d60e01b8152600481018a90525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa158015610d43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d6791906136fe565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610dd7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dfb919061372f565b604051639b22917d60e01b81526001600160c01b03831660048201529096507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610e69573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e8d919061372f565b6040517ffa6793d5000000000000000000000000000000000000000000000000000000008152600481018d90529095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fa6793d59060240160c060405180830381865afa158015610f0c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f309190613832565b5f8d8152600560205260409020549195509350151580610f5c57505f8b81526006602052604090205415155b8015610fde5750620f4240876020015162ffffff1660055f8e81526020019081526020015f2054610f8d9190613870565b610f97919061389b565b84604001511180610fde5750620f4240876020015162ffffff1660065f8e81526020019081526020015f2054610fcd9190613870565b610fd7919061389b565b8360400151115b15610ff0575050505050505050915091565b61101888602001516001600160b01b0316885f015162ffffff168860400151895f01516121b2565b6110345760405162fc7cad60e51b815260040160405180910390fd5b50505f806110a984602001518560400151865f015161105391906138ba565b61105d91906138ba565b60208501516040860151865161107391906138ba565b61107d91906138ba565b8a602001516001600160b01b03166110988a60400151612422565b8a516110a390612422565b8c6124a0565b915091506110c0866060015162ffffff1660171c90565b156110dd5760608601516110da9062ffffff16835f61275e565b91505b6110f0856060015162ffffff1660171c90565b1561110d57606085015161110a9062ffffff16825f61275e565b90505b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081611122575050604080516001808252818301909252919b50602082015b604080518082019091525f808252602082015281526020019060019003908161115e5790505098506040518060400160405280896060015160020b81526020016111e2620f4240896020015167ffffffffffffffff168c6040015162ffffff16876111c99190613870565b6111d3919061389b565b6111dd919061389b565b6127a1565b67ffffffffffffffff168152508a5f81518110611201576112016138cd565b60200260200101819052506040518060400160405280896080015160020b815260200161124f620f4240886020015167ffffffffffffffff168c6040015162ffffff16866111c99190613870565b67ffffffffffffffff16815250895f8151811061126e5761126e6138cd565b60200260200101819052505050505050505050915091565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112cf57604051633006171960e21b815260040160405180910390fd5b5f9485526005602090815260408087209390935560069052932092909255505050565b6112fa6127db565b61130382612892565b61130d828261289a565b5050565b5f61131a612987565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b611347612186565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b9101610a91565b6113a6612186565b6113af5f6129d0565b565b60015433906001600160a01b031681146113ee5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6113f7816129d0565b50565b335f9081526002602052604090205460ff1661142957604051631f0853c160e21b815260040160405180910390fd5b620f42408162ffffff16111561146b576040517faa7feadc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6114788460020b6129f6565b90505f61148f611487856138e1565b60020b6129f6565b5f88815260036020908152604091829020825161010081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b8304821660c0820152600160a81b9092041660e082015290915062149bbb87108061154c5750750c6c1313451aab317fb9b67e11777e9a5a6ccdb2ebae87115b80611585575082620f42408260c0015162ffffff16620f424061156f91906138ba565b611579908a613870565b611583919061389b565b105b806115be575081620f42408260e0015162ffffff16620f42406115a89190613901565b6115b2908a613870565b6115bc919061389b565b115b156115f5576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018990525f9081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c630ed7d906024016040805180830381865afa15801561165b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061167f91906136fe565b604051639b22917d60e01b81526001600160c01b038316600482015291935091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156116f1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611715919061372f565b905061172a816060015162ffffff1660171c90565b6117495760608101516117449062ffffff1687600161275e565b611768565b606081015161175e9062ffffff16875f612cb5565b6117689087613914565b604051639b22917d60e01b81526001600160c01b03841660048201529096505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156117d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117fc919061372f565b9050611811816060015162ffffff1660171c90565b61183957606081015161182a9062ffffff16875f612cb5565b611834908761393b565b61184e565b606081015161184e9062ffffff16875f61275e565b9550858710611888576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118958260400151612422565b6118a090600a613a3a565b82516118ab90612422565b6118b690600a613a3a565b6118c0908d613870565b6118ca919061389b565b9a506119658b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561192c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119509190613a48565b61195b90600a613a3a565b600160601b612d35565b9a506119828b865f015162ffffff168460400151855f01516121b2565b61199e5760405162fc7cad60e51b815260040160405180910390fd5b5f8c815260046020908152604091829020825160a081018452905460ff8116151582526001600160b01b036101008204169282019290925262ffffff600160b81b83041692810192909252600160d01b8104600290810b6060840152600160e81b909104900b6080820152611a128c612dec565b81602001906001600160b01b031690816001600160b01b0316815250508a816060019060020b908160020b8152505089816080019060020b908160020b8152505088816040019062ffffff16908162ffffff16815250508060045f8f81526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a8154816001600160b01b0302191690836001600160b01b031602179055506040820151815f0160176101000a81548162ffffff021916908362ffffff1602179055506060820151815f01601a6101000a81548162ffffff021916908360020b62ffffff1602179055506080820151815f01601d6101000a81548162ffffff021916908360020b62ffffff16021790555090505060055f8e81526020019081526020015f205f905560065f8e81526020019081526020015f205f90558c7f6bfe82e0fc1c0e49aa5a610028c276fddb4bc3c4f8ae34f09277ce63597818f98d8d8d8d604051611bb69493929190938452600292830b6020850152910b604083015262ffffff16606082015260800190565b60405180910390a250505050505050505050505050565b5f81815260036020908152604080832081516101008082018452915462ffffff80821683526301000000820481168387015266010000000000008204811683860152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b8504841660c0870152600160a81b909404831660e08601528989526004808952878a20885195860189525460ff8116151586529687046001600160b01b031698850198909852600160b81b860490921683870152600160d01b8504600290810b91840191909152600160e81b90940490930b92810192909252915163c630ed7d60e01b8152928301859052909183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa158015611d2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d5191906136fe565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611dc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611de6919061372f565b9050611e1083602001516001600160b01b0316855f015162ffffff168360400151845f01516121b2565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e6357604051633006171960e21b815260040160405180910390fd5b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015611eb35750825b90505f8267ffffffffffffffff166001148015611ecf5750303b155b905081158015611edd575080155b15611f14576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611f4857845468ff00000000000000001916680100000000000000001785555b611f51866129d0565b8315611f9c57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611fed57604051633006171960e21b815260040160405180910390fd5b5f838152600560205260409020548190612008908490613870565b612012919061389b565b5f848152600560205260408120805490919061202f908490613901565b90915550505f83815260066020526040902054819061204f908490613870565b612059919061389b565b5f8481526006602052604081208054909190612076908490613901565b909155505050505050565b335f9081526002602052604090205460ff166120b057604051631f0853c160e21b815260040160405180910390fd5b5f818152600560209081526040808320839055600682528083208390556004909152808220805460ff191660011790555182917f6e78d720a83dbf19884c4e27501ba84a8a2e5ca1503419b03ee68d28d548e85791a250565b612111612186565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915561214e5f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f546001600160a01b031633146113af5760405163118cdaa760e01b81523360048201526024016113e5565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f815181106121eb576121eb6138cd565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061221f5761221f6138cd565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f290612294908490600401613a68565b5f60405180830381865afa9250505080156122d057506040513d5f823e601f3d908101601f191682016040526122cd9190810190613ab4565b60015b6122de575f9250505061241a565b805f815181106122f0576122f06138cd565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123789190613a48565b61238390600a613a3a565b82600181518110612396576123966138cd565b60200260200101516123a89190613870565b6123b2919061389b565b92505086620f42406123c488826138ba565b6123ce9085613870565b6123d8919061389b565b1080612404575086620f42406123ee8882613901565b6123f89085613870565b612402919061389b565b115b15612413575f9250505061241a565b6001925050505b949350505050565b5f6001600160a01b0382161561249757816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124929190613a48565b61249a565b60125b92915050565b5f808360ff168560ff1611156124d6576124ba8486613b40565b6124c590600a613a3a565b6124cf9088613870565b9650612506565b8360ff168560ff161015612506576124ee8585613b40565b6124f990600a613a3a565b6125039089613870565b97505b620f4240836040015162ffffff168961251f9190613870565b612529919061389b565b9150620f4240836060015162ffffff16886125449190613870565b61254e919061389b565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125d19190613a48565b6125dc90600a613a3a565b90505f6125e98285613870565b90505f6125f68985613870565b90508082111561261d5761260a838261389b565b94506126168386613870565b9150612636565b612627898361389b565b93506126338985613870565b90505b82620f4240876080015162ffffff168d6126509190613870565b61265a919061389b565b6126649190613870565b82101561269157620f4240866080015162ffffff168c6126849190613870565b61268e919061389b565b94505b88620f42408760a0015162ffffff168c6126ab9190613870565b6126b5919061389b565b6126bf9190613870565b8110156126ec57620f42408660a0015162ffffff168b6126df9190613870565b6126e9919061389b565b93505b8660ff168860ff161115612720576127048789613b40565b61270f90600a613a3a565b612719908561389b565b9350612750565b8660ff168860ff161015612750576127388888613b40565b61274390600a613a3a565b61274d908661389b565b94505b505050965096945050505050565b5f6207a11f19627fffff85160181831561277857815f0391505b81620f4240019050611e10620f4240866127929190613870565b82810615158616908390040190565b5f67ffffffffffffffff8211156127d757604080516306dfcc6560e41b81526004810191909152602481018390526044016113e5565b5090565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061287457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128687f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156113af5760405163703e46dd60e11b815260040160405180910390fd5b6113f7612186565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156128f4575060408051601f3d908101601f191682019092526128f191810190613b59565b60015b61291c57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016113e5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612978576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016113e5565b6129828383612e1f565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113af5760405163703e46dd60e11b815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff191690556113f781612e74565b5f612a0082612ed0565b815f600282900b8113612a135781612a1c565b612a1c826138e1565b62ffffff8116915060011615612a40576bfff97272373d413259a469909250612a48565b600160601b92505b6002811615612a675760606bfff2e50f5f656932ef12357c8402901c92505b6004811615612a865760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615612aa55760606bffcb9843d60f6159c9db58838402901c92505b6010811615612ac45760606bff973b41fa98c081472e68968402901c92505b6020811615612ae35760606bff2ea16466c96a3843ec78b38402901c92505b6040811615612b025760606bfe5dee046a99a2a811c461f18402901c92505b6080811615612b215760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615612b415760606bf987a7253ac413176f2b074c8402901c92505b610200811615612b615760606bf3392b0822b70005940c7a398402901c92505b610400811615612b815760606be7159475a2c29b7443b29c7f8402901c92505b610800811615612ba15760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615612bc15760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615612be15760606b70d869a156d2a1b890bb3df68402901c92505b614000811615612c015760606b31be135f97d08fd9812315058402901c92505b618000811615612c215760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615612c415760606a5d6af8dedb81196699c3298402901c92505b62020000811615612c60576060692216e584f5fa1ea926048402901c92505b62040000811615612c7d57606067048a170391f7dc428402901c92505b5f8260020b1315612cae57612cab83780100000000000000000000000000000000000000000000000061389b565b92505b5050919050565b5f6207a11f19627fffff851601600281900b82128281612cd757825f03612cd9565b825b62ffffff1690505f612d12612cee8389613870565b620f424088612d04578581830615151691040190565b808206151586151691040190565b905082612d2757612d2281613b70565b612d29565b805b98975050505050505050565b5f838302815f1985870982811083820303915050805f03612d6957838281612d5f57612d5f613887565b0492505050612de5565b808411612d8057612d806003851502601118612f2c565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b5f6001600160b01b038211156127d7576040516306dfcc6560e41b815260b06004820152602481018390526044016113e5565b612e2882612f3d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115612e6c576129828282612fc0565b61130d613032565b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6207ffff600282900b1380612ef55750612eec6207ffff6138e1565b60020b8160020b125b156113f7576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b715f52806020526024601cfd5b806001600160a01b03163b5f03612f7257604051634c9c8ce360e01b81526001600160a01b03821660048201526024016113e5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051612fdc9190613ba6565b5f60405180830381855af49150503d805f8114613014576040519150601f19603f3d011682016040523d82523d5f602084013e613019565b606091505b509150915061302985838361306a565b95945050505050565b34156113af576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608261307f5761307a826130df565b612de5565b815115801561309657506001600160a01b0384163b155b156130d8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016113e5565b5080612de5565b8051156130ef5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b604051610100810167ffffffffffffffff8111828210171561315957613159613121565b60405290565b6040805190810167ffffffffffffffff8111828210171561315957613159613121565b604051601f8201601f1916810167ffffffffffffffff811182821017156131ab576131ab613121565b604052919050565b62ffffff811681146113f7575f80fd5b80356131ce816131b3565b919050565b5f808284036101208112156131e6575f80fd5b8335925061010080601f19830112156131fd575f80fd5b613205613135565b91506020850135613215816131b3565b8252613223604086016131c3565b6020830152613234606086016131c3565b6040830152613245608086016131c3565b606083015261325660a086016131c3565b608083015261326760c086016131c3565b60a083015261327860e086016131c3565b60c08301526132888186016131c3565b60e083015250809150509250929050565b5f602082840312156132a9575f80fd5b5035919050565b5f815180845260208085019450602084015f5b838110156132f7578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016132c3565b509495945050505050565b604081525f61331460408301856132b0565b828103602084015261302981856132b0565b6001600160a01b03811681146113f7575f80fd5b5f67ffffffffffffffff82111561335357613353613121565b5060051b60200190565b8035600281900b81146131ce575f80fd5b67ffffffffffffffff811681146113f7575f80fd5b5f82601f830112613392575f80fd5b813560206133a76133a28361333a565b613182565b82815260069290921b840181019181810190868411156133c5575f80fd5b8286015b8481101561341257604081890312156133e0575f80fd5b6133e861315f565b6133f18261335d565b8152848201356134008161336e565b818601528352918301916040016133c9565b509695505050505050565b5f805f805f8060c08789031215613432575f80fd5b863561343d81613326565b955060208701359450604087013567ffffffffffffffff80821115613460575f80fd5b61346c8a838b01613383565b95506060890135915080821115613481575f80fd5b5061348e89828a01613383565b9350506080870135915060a087013590509295509295509295565b5f80604083850312156134ba575f80fd5b82356134c581613326565b915060208381013567ffffffffffffffff808211156134e2575f80fd5b818601915086601f8301126134f5575f80fd5b81358181111561350757613507613121565b613519601f8201601f19168501613182565b9150808252878482850101111561352e575f80fd5b80848401858401375f848284010152508093505050509250929050565b5f806040838503121561355c575f80fd5b823561356781613326565b91506020830135801515811461357b575f80fd5b809150509250929050565b5f60208284031215613596575f80fd5b8135612de581613326565b5f6101008201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525060c083015161360660c084018262ffffff169052565b5060e083015161361d60e084018262ffffff169052565b5092915050565b5f805f805f60a08688031215613638575f80fd5b853594506020860135935061364f6040870161335d565b925061365d6060870161335d565b9150608086013561366d816131b3565b809150509295509295909350565b5f805f806080858703121561368e575f80fd5b843561369981613326565b966020860135965060408601359560600135945092505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80516001600160c01b03811681146131ce575f80fd5b5f806040838503121561370f575f80fd5b613718836136e8565b9150613726602084016136e8565b90509250929050565b5f60c0828403121561373f575f80fd5b60405160c0810181811067ffffffffffffffff8211171561376257613762613121565b604052825161377081613326565b815260208301516137808161336e565b6020820152604083015161379381613326565b604082015260608301516137a6816131b3565b606082015260808301516137b981613326565b608082015260a08301516137cc816131b3565b60a08201529392505050565b5f606082840312156137e8575f80fd5b6040516060810181811067ffffffffffffffff8211171561380b5761380b613121565b80604052508091508251815260208301516020820152604083015160408201525092915050565b5f8060c08385031215613843575f80fd5b61384d84846137d8565b915061372684606085016137d8565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761249a5761249a61385c565b634e487b7160e01b5f52601260045260245ffd5b5f826138b557634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561249a5761249a61385c565b634e487b7160e01b5f52603260045260245ffd5b5f8160020b627fffff1981036138f9576138f961385c565b5f0392915050565b8181038181111561249a5761249a61385c565b8082018281125f8312801582168215821617156139335761393361385c565b505092915050565b8181035f83128015838313168383128216171561361d5761361d61385c565b600181815b8085111561399457815f190482111561397a5761397a61385c565b8085161561398757918102915b93841c939080029061395f565b509250929050565b5f826139aa5750600161249a565b816139b657505f61249a565b81600181146139cc57600281146139d6576139f2565b600191505061249a565b60ff8411156139e7576139e761385c565b50506001821b61249a565b5060208310610133831016604e8410600b8410161715613a15575081810a61249a565b613a1f838361395a565b805f1904821115613a3257613a3261385c565b029392505050565b5f612de560ff84168361399c565b5f60208284031215613a58575f80fd5b815160ff81168114612de5575f80fd5b602080825282518282018190525f9190848201906040850190845b81811015613aa85783516001600160a01b031683529284019291840191600101613a83565b50909695505050505050565b5f6020808385031215613ac5575f80fd5b825167ffffffffffffffff811115613adb575f80fd5b8301601f81018513613aeb575f80fd5b8051613af96133a28261333a565b81815260059190911b82018301908381019087831115613b17575f80fd5b928401925b82841015613b3557835182529284019290840190613b1c565b979650505050505050565b60ff828116828216039081111561249a5761249a61385c565b5f60208284031215613b69575f80fd5b5051919050565b5f7f80000000000000000000000000000000000000000000000000000000000000008203613ba057613ba061385c565b505f0390565b5f82518060208501845e5f92019182525091905056fea2646970667358221220ee0c7e0424a225701a18bdd1ad8f52e14d0b69957b8f7ed57a95286a85cea23c64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "computeOrders(bytes32)": {
        "details": "Clears pool orders if an error occurs and retains current orders if the list is empty.",
        "params": {
          "key": "The key of the pool."
        },
        "returns": {
          "ordersA": "The orders for the first token.",
          "ordersB": "The orders for the second token."
        }
      },
      "getConfig(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        },
        "returns": {
          "_0": "The current Config struct associated with the key."
        }
      },
      "getLastAmount(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        },
        "returns": {
          "_0": "(uint256, uint256) representing the two amounts (likely token A / token B)."
        }
      },
      "getPosition(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        },
        "returns": {
          "_0": "A Position struct containing paused state, oracle price, rate, tickA, and tickB."
        }
      },
      "isOraclePriceValid(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        },
        "returns": {
          "_0": "True if the oracle price is valid, otherwise false."
        }
      },
      "isPaused(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        },
        "returns": {
          "_0": "True if paused, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        }
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setConfig(bytes32,(uint24,uint24,uint24,uint24,uint24,uint24,uint24,uint24))": {
        "params": {
          "config": "The new configuration parameters (thresholds, rates, etc.).",
          "key": "A unique identifier for the position or pool."
        }
      },
      "setOperator(address,bool)": {
        "params": {
          "operator": "The address whose operator status is being updated.",
          "status": "True to grant operator privileges, false to revoke."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      },
      "unpause(bytes32)": {
        "params": {
          "key": "A unique identifier for the position or pool."
        }
      },
      "updatePosition(bytes32,uint256,int24,int24,uint24)": {
        "params": {
          "key": "A unique identifier for the position or pool.",
          "oraclePrice": "The new oracle price used to guide the strategy.",
          "rate": "The multiplier applied at the final step of order amount calculation.",
          "tickA": "The updated tick parameters for side A of the orderbook.",
          "tickB": "The updated tick parameters for side B of the orderbook."
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "isOperator": {
        "params": {
          "operator": "The address to query."
        },
        "return": "True if the address is an operator, otherwise false.",
        "returns": {
          "_0": "True if the address is an operator, otherwise false."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bookManager()": {
        "notice": "Returns the IBookManager instance controlling the underlying orderbooks."
      },
      "computeOrders(bytes32)": {
        "notice": "Retrieves the orders for a specified key."
      },
      "getConfig(bytes32)": {
        "notice": "Fetches the configuration (Config struct) for a specified key."
      },
      "getLastAmount(bytes32)": {
        "notice": "Returns two amounts recorded in the last operation for a specified key."
      },
      "getPosition(bytes32)": {
        "notice": "Retrieves the position (Position struct) for a specified key."
      },
      "isOperator(address)": {
        "notice": "Checks if a given address is granted operator privileges."
      },
      "isOraclePriceValid(bytes32)": {
        "notice": "Checks if the oracle price for the specified key is valid according to the strategy's criteria."
      },
      "isPaused(bytes32)": {
        "notice": "Queries whether the position for a specified key is paused."
      },
      "pause(bytes32)": {
        "notice": "Pauses the position corresponding to the given key, preventing further updates or orders."
      },
      "referenceOracle()": {
        "notice": "Returns the reference IOracle contract used by this strategy."
      },
      "setConfig(bytes32,(uint24,uint24,uint24,uint24,uint24,uint24,uint24,uint24))": {
        "notice": "Updates the configuration settings for the specified key."
      },
      "setOperator(address,bool)": {
        "notice": "Assigns or revokes operator permissions for a given address."
      },
      "unpause(bytes32)": {
        "notice": "Unpauses the position for the given key, allowing normal strategy operations to resume."
      },
      "updatePosition(bytes32,uint256,int24,int24,uint24)": {
        "notice": "Updates the position parameters based on a newly fetched oracle price and tick ranges."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12196,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "isOperator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12201,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_configs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Config)15197_storage)"
      },
      {
        "astId": 12206,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_positions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Position)15210_storage)"
      },
      {
        "astId": 12210,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_lastAmountA",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 12214,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_lastAmountB",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Config)15197_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)15197_storage"
      },
      "t_mapping(t_bytes32,t_struct(Position)15210_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)15210_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Config)15197_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Config",
        "members": [
          {
            "astId": 15182,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "referenceThreshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15184,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rebalanceThreshold",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15186,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateA",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15188,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateB",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15190,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateA",
            "offset": 12,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15192,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateB",
            "offset": 15,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15194,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdA",
            "offset": 18,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15196,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdB",
            "offset": 21,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Position)15210_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Position",
        "members": [
          {
            "astId": 15199,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "paused",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15201,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "oraclePrice",
            "offset": 1,
            "slot": "0",
            "type": "t_uint176"
          },
          {
            "astId": 15203,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rate",
            "offset": 23,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15206,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickA",
            "offset": 26,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)8319"
          },
          {
            "astId": 15209,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickB",
            "offset": 29,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)8319"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint176": {
        "encoding": "inplace",
        "label": "uint176",
        "numberOfBytes": "22"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(Tick)8319": {
        "encoding": "inplace",
        "label": "Tick",
        "numberOfBytes": "3"
      }
    }
  }
}