{
  "address": "0x2ff23716b1CB9D414EFeFBDB4f4c711345035B6E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBookPair",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHook",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockAcquiredSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookIdA",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookIdB",
          "type": "uint192"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "OperatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "_burnAndRebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyB",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "_open",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "bookPair",
      "outputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getBookPairs",
      "outputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        },
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "bookIdA",
              "type": "uint192"
            },
            {
              "internalType": "BookId",
              "name": "bookIdB",
              "type": "uint192"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveB",
              "type": "uint256"
            },
            {
              "internalType": "OrderId[]",
              "name": "orderListA",
              "type": "uint256[]"
            },
            {
              "internalType": "OrderId[]",
              "name": "orderListB",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IRebalancer.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lockCaller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyB",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "open",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8349c998edf06eb9df47667342f5a0e1181c91195b4cfb17fa04029f99d830e4",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x2ff23716b1CB9D414EFeFBDB4f4c711345035B6E",
    "transactionIndex": 1,
    "gasUsed": "12832899",
    "logsBloom": "0x
    "blockHash": "0xd281f7bf449eefd70a543c5c5461d2a84be8d825410446d3cc00ba4df6fc2ef7",
    "transactionHash": "0x8349c998edf06eb9df47667342f5a0e1181c91195b4cfb17fa04029f99d830e4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 63951988,
        "transactionHash": "0x8349c998edf06eb9df47667342f5a0e1181c91195b4cfb17fa04029f99d830e4",
        "address": "0x2ff23716b1CB9D414EFeFBDB4f4c711345035B6E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f79ee8f8fa862e98201120d83c4ec39d9468d49"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd281f7bf449eefd70a543c5c5461d2a84be8d825410446d3cc00ba4df6fc2ef7"
      }
    ],
    "blockNumber": 63951988,
    "cumulativeGasUsed": "12832899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC528b9ED5d56d1D0d3C18A2342954CE1069138a4",
    "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ddc16c2f322caa059d8d7c4ac5e63ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBookPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHook\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockAcquiredSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookIdA\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookIdB\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"_burnAndRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyB\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"_open\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"bookPair\",\"outputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBookPairs\",\"outputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"},{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"bookIdA\",\"type\":\"uint192\"},{\"internalType\":\"BookId\",\"name\":\"bookIdB\",\"type\":\"uint192\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"OrderId[]\",\"name\":\"orderListA\",\"type\":\"uint256[]\"},{\"internalType\":\"OrderId[]\",\"name\":\"orderListB\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IRebalancer.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyB\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"lockAcquired(address,bytes)\":{\"params\":{\"data\":\"The data that was passed to the call to lock\"},\"returns\":{\"_0\":\"Any data that you want to be returned from the lock call\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20TransferFailed()\":[{\"notice\":\"Thrown when an ERC20 transfer fails\"}],\"NativeTransferFailed()\":[{\"notice\":\"Thrown when a native transfer fails\"}]},\"kind\":\"user\",\"methods\":{\"lockAcquired(address,bytes)\":{\"notice\":\"Called by the book manager on `msg.sender` when a lock is acquired\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Rebalancer.sol\":\"Rebalancer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x08b074ae1b12e70ce24d1335086ec5a418934311a6771d9f61fe24d392050e12\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9f21f1bcc51daf7fe3998608d7eeb96b16a9c3816898a0cf6a9407bd105c9253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde02e3a80c5c3b3a2187fbfbdfc7ed7c8c0d5b2e4a0ff5671611674b6c96bd91\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x80b4189de089dc632b752b365a16c5063b58cc24da0dd38b82f2c25f56d25c84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n}\\n\",\"keccak256\":\"0x1b0625096e82d06abdcf1844172ef78ef54a5e878761f4d905fda07eaf098424\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnitSize();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unitSize The unit size of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unitSize,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param unit The order unit\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 unit, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param unit The order unit\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param unit The canceled unit\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param unit The claimed unit\\n     */\\n    event Claim(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    /**\\n     * @notice This structure represents a unique identifier for a book in the BookManager.\\n     * @param base The base currency of the book\\n     * @param unitSize The unit size of the book\\n     * @param quote The quote currency of the book\\n     * @param makerPolicy The maker fee policy of the book\\n     * @param hooks The hooks contract of the book\\n     * @param takerPolicy The taker fee policy of the book\\n     */\\n    struct BookKey {\\n        Currency base;\\n        uint64 unitSize;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    /**\\n     * @notice This structure represents a current status for an order in the BookManager.\\n     * @param provider The provider of the order\\n     * @param open The open unit of the order\\n     * @param claimable The claimable unit of the order\\n     */\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable unit\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Encodes a BookKey into a BookId\\n     * @param key The BookKey to encode\\n     * @return The encoded BookId\\n     */\\n    function encodeBookKey(BookKey calldata key) external pure returns (BookId);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    /**\\n     * @notice This structure represents the parameters for making an order.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param unit The unit for the order. Times key.unitSize to get actual bid amount.\\n     * @param provider The provider for the order. The limit order service provider address to collect fees.\\n     */\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 unit;\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for taking orders in the specified tick.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param maxUnit The max unit to take\\n     */\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxUnit;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for canceling an order.\\n     * @param id The order id for the order\\n     * @param toUnit The remaining open unit for the order after cancellation. Must not exceed the current open unit.\\n     */\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 toUnit;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xda8dffc751ac3554033e084919f1e431eb2585c80e1e30b9a0198366a8607086\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6baab4710fa674981395f428bd6550c4e288ac44a1a5d38c2a58fd67234d57e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenUnit The unit that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledUnit The unit that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedUnit The unit that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedUnit, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbff95e07debd7d51cb3aa79172fd3c31efb57cea1c03d21b5740a565198d8343\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILocker\\n * @notice Interface for the locker contract\\n */\\ninterface ILocker {\\n    /**\\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\\n     * @param data The data that was passed to the call to lock\\n     * @return Any data that you want to be returned from the lock call\\n     */\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x664833ea7804ad5cbbe89f5b36169c6a2c19ef577c1dfb9418ddea290ed19106\",\"license\":\"MIT\"},\"clober-dex/v2-core/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := and(hash, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f9ed99dfb9a5ce14c29359a5ad8b43de0c756e44b2e5f581e8ea6db7cacbeb\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(and(rate_, 0xffffff), MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0x91f98ffef9d8a0bb460bcbc31d10820d9a1bee9bbf3df04eef23ca2937a4a26a\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                    sar(96, mul(add(24828157081833163892658089445524,\\n                        sar(96, mul(add(3273285459638523848632254066296,\\n                            x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Base conversion: mul `2**96 / (5**18 * 2**192)`.\\n            r := sdiv(p, 302231454903657293676544000000000000000000)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2dc502dd66a9e36e6c4bb8c4fb3d21120f9f0ff7a934dcfe21ec820cac72275\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := and(shr(40, id), 0xffffff)\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := and(shr(40, id), 0xffffff)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c384badc4971d774987c6f5bce9d578712c7469688735b3c1eafaf2e748fe6\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for *;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 1350587;\\n    uint256 internal constant MAX_PRICE = 4647684107270898330752324302845848816923571339324334;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990;\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357c;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624ea;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db5883;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b3;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074c;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a39;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7f;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f7;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea92604;\\n    uint256 private constant _R18 = 0x48a170391f7dc42;\\n    uint256 private constant _R19 = 0x149b34;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        unchecked {\\n            int24 tick = int24((int256(price).lnWad() * 42951820407860) / 2 ** 128);\\n            if (toPrice(Tick.wrap(tick)) > price) return Tick.wrap(tick - 1);\\n            return Tick.wrap(tick);\\n        }\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 96;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 96;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 96;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 96;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 96;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 96;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 96;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 96;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 96;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 96;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 96;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 96;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 96;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 96;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 96;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 96;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 96;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 96;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 96;\\n        }\\n        if (tickValue > 0) price = 0x1000000000000000000000000000000000000000000000000 / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 96, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = unit(uint64) * unitSize(uint64) < 2^96\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 96, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xffbe19efd2b2e4e1eee3ed15c9363f5c45d70a6058b0b85ec9199e34de3b6b9b\",\"license\":\"GPL-2.0-or-later\"},\"solmate/tokens/ERC6909.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC6909 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC6909.sol)\\nabstract contract ERC6909 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC6909 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(address => bool)) public isOperator;\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6909 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transfer(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        balanceOf[msg.sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, msg.sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (msg.sender != sender && !isOperator[sender][msg.sender]) {\\n            uint256 allowed = allowance[sender][msg.sender][id];\\n            if (allowed != type(uint256).max) allowance[sender][msg.sender][id] = allowed - amount;\\n        }\\n\\n        balanceOf[sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        allowance[msg.sender][spender][id] = amount;\\n\\n        emit Approval(msg.sender, spender, id, amount);\\n\\n        return true;\\n    }\\n\\n    function setOperator(address operator, bool approved) public virtual returns (bool) {\\n        isOperator[msg.sender][operator] = approved;\\n\\n        emit OperatorSet(msg.sender, operator, approved);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x0f632fb3; // ERC165 Interface ID for ERC6909\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, address(0), receiver, id, amount);\\n    }\\n\\n    function _burn(\\n        address sender,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[sender][id] -= amount;\\n\\n        emit Transfer(msg.sender, sender, address(0), id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x767ed60e11d739ed7eb9e10467eb0e0573293238b7a2a56f96b23f145297f1d2\",\"license\":\"MIT\"},\"solmate/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"},\"src/Rebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IRebalancer.sol\\\";\\n\\ncontract Rebalancer is IRebalancer, ILocker, Ownable2Step, ERC6909Supply {\\n    using BookIdLibrary for IBookManager.BookKey;\\n    using SafeERC20 for IERC20;\\n    using CurrencyLibrary for Currency;\\n    using OrderIdLibrary for OrderId;\\n    using TickLibrary for Tick;\\n    using FeePolicyLibrary for FeePolicy;\\n\\n    IBookManager public immutable bookManager;\\n\\n    mapping(bytes32 key => Pool) private _pools;\\n    mapping(BookId => BookId) public bookPair;\\n\\n    modifier selfOnly() {\\n        if (msg.sender != address(this)) revert NotSelf();\\n        _;\\n    }\\n\\n    constructor(IBookManager bookManager_, address initialOwner_) Ownable(initialOwner_) {\\n        bookManager = bookManager_;\\n    }\\n\\n    function getPool(bytes32 key) external view returns (Pool memory) {\\n        return _pools[key];\\n    }\\n\\n    function getBookPairs(bytes32 key) external view returns (BookId, BookId) {\\n        return (_pools[key].bookIdA, _pools[key].bookIdB);\\n    }\\n\\n    function getLiquidity(bytes32 key) public view returns (uint256 liquidityA, uint256 liquidityB) {\\n        Pool storage pool = _pools[key];\\n        liquidityA = pool.reserveA;\\n        liquidityB = pool.reserveB;\\n\\n        OrderId[] memory orderListA = pool.orderListA;\\n        OrderId[] memory orderListB = pool.orderListB;\\n\\n        if (orderListA.length > 0) {\\n            IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n            for (uint256 i; i < orderListA.length; ++i) {\\n                (uint256 cancelable, uint256 claimable) =\\n                    _getLiquidity(bookKeyA.makerPolicy, bookKeyA.unitSize, orderListA[i]);\\n                liquidityA += cancelable;\\n                liquidityB += claimable;\\n            }\\n        }\\n        if (orderListB.length > 0) {\\n            IBookManager.BookKey memory bookKeyB = bookManager.getBookKey(pool.bookIdB);\\n            for (uint256 i; i < orderListB.length; ++i) {\\n                (uint256 cancelable, uint256 claimable) =\\n                    _getLiquidity(bookKeyB.makerPolicy, bookKeyB.unitSize, orderListB[i]);\\n                liquidityA += claimable;\\n                liquidityB += cancelable;\\n            }\\n        }\\n    }\\n\\n    function _getLiquidity(FeePolicy makerPolicy, uint64 unitSize, OrderId orderId)\\n        internal\\n        view\\n        returns (uint256 cancelable, uint256 claimable)\\n    {\\n        IBookManager.OrderInfo memory orderInfo = bookManager.getOrder(orderId);\\n        cancelable = uint256(orderInfo.open) * unitSize;\\n        claimable = orderId.getTick().quoteToBase(uint256(orderInfo.claimable) * unitSize, false);\\n        if (makerPolicy.usesQuote()) {\\n            int256 fee = makerPolicy.calculateFee(cancelable, true);\\n            cancelable = uint256(int256(cancelable) + fee);\\n        } else {\\n            int256 fee = makerPolicy.calculateFee(claimable, false);\\n            claimable = uint256(int256(claimable) - fee);\\n        }\\n    }\\n\\n    function open(IBookManager.BookKey calldata bookKeyA, IBookManager.BookKey calldata bookKeyB, address strategy)\\n        external\\n        onlyOwner\\n        returns (bytes32)\\n    {\\n        return abi.decode(\\n            bookManager.lock(address(this), abi.encodeWithSelector(this._open.selector, bookKeyA, bookKeyB, strategy)),\\n            (bytes32)\\n        );\\n    }\\n\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB) external payable returns (uint256 mintAmount) {\\n        Pool storage pool = _pools[key];\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n\\n        uint256 supply = totalSupply[uint256(key)];\\n        if (supply == 0) {\\n            if (amountA == 0 || amountB == 0) revert InvalidAmount();\\n            mintAmount = amountA > amountB ? amountA : amountB;\\n        } else {\\n            uint256 mintA;\\n            uint256 mintB;\\n            (uint256 liquidityA, uint256 liquidityB) = getLiquidity(key);\\n            if (liquidityA == 0) {\\n                amountA = 0;\\n            } else {\\n                mintA = FixedPointMathLib.mulDivDown(amountA, supply, liquidityA);\\n            }\\n            if (liquidityB == 0) {\\n                amountB = 0;\\n            } else {\\n                mintB = FixedPointMathLib.mulDivDown(amountB, supply, liquidityB);\\n            }\\n\\n            if (mintA > mintB) {\\n                mintAmount = mintB;\\n                amountA = FixedPointMathLib.mulDivUp(liquidityA, mintAmount, supply);\\n            } else {\\n                mintAmount = mintA;\\n                amountB = FixedPointMathLib.mulDivUp(liquidityB, mintAmount, supply);\\n            }\\n        }\\n\\n        uint256 refund = msg.value;\\n        if (bookKeyA.quote.isNative()) {\\n            if (msg.value < amountA) {\\n                revert InvalidValue();\\n            } else {\\n                unchecked {\\n                    refund -= amountA;\\n                }\\n            }\\n        } else {\\n            IERC20(Currency.unwrap(bookKeyA.quote)).safeTransferFrom(msg.sender, address(this), amountA);\\n        }\\n        if (bookKeyA.base.isNative()) {\\n            if (msg.value < amountB) {\\n                revert InvalidValue();\\n            } else {\\n                unchecked {\\n                    refund -= amountB;\\n                }\\n            }\\n        } else {\\n            IERC20(Currency.unwrap(bookKeyA.base)).safeTransferFrom(msg.sender, address(this), amountB);\\n        }\\n\\n        pool.reserveA += amountA;\\n        pool.reserveB += amountB;\\n\\n        _mint(msg.sender, uint256(key), mintAmount);\\n\\n        emit Mint(msg.sender, key, amountA, amountB, mintAmount);\\n    }\\n\\n    function burn(bytes32 key, uint256 amount) external returns (uint256, uint256) {\\n        return abi.decode(\\n            bookManager.lock(\\n                address(this), abi.encodeWithSelector(this._burnAndRebalance.selector, key, msg.sender, amount)\\n            ),\\n            (uint256, uint256)\\n        );\\n    }\\n\\n    function rebalance(bytes32 key) public {\\n        bookManager.lock(address(this), abi.encodeWithSelector(this._burnAndRebalance.selector, key, address(0), 0));\\n    }\\n\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory) {\\n        if (msg.sender != address(bookManager)) revert InvalidLockAcquiredSender();\\n        if (lockCaller != address(this)) revert InvalidLockCaller();\\n\\n        (bool success, bytes memory returnData) = address(this).call(data);\\n        if (success) return returnData;\\n        if (returnData.length == 0) revert LockFailure();\\n        // if the call failed, bubble up the reason\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            revert(add(returnData, 32), mload(returnData))\\n        }\\n    }\\n\\n    function _open(IBookManager.BookKey calldata bookKeyA, IBookManager.BookKey calldata bookKeyB, address strategy)\\n        public\\n        selfOnly\\n        returns (bytes32 key)\\n    {\\n        if (!(bookKeyA.quote.equals(bookKeyB.base) && bookKeyA.base.equals(bookKeyB.quote))) revert InvalidBookPair();\\n        if (address(bookKeyA.hooks) != address(0) || address(bookKeyB.hooks) != address(0)) revert InvalidHook();\\n\\n        BookId bookIdA = bookKeyA.toId();\\n        BookId bookIdB = bookKeyB.toId();\\n        if (!bookManager.isOpened(bookIdA)) bookManager.open(bookKeyA, \\\"\\\");\\n        if (!bookManager.isOpened(bookIdB)) bookManager.open(bookKeyB, \\\"\\\");\\n\\n        key = _encodeKey(bookIdA, bookIdB);\\n        _pools[key].bookIdA = bookIdA;\\n        _pools[key].bookIdB = bookIdB;\\n        _pools[key].strategy = IStrategy(strategy);\\n        bookPair[bookIdA] = bookIdB;\\n        bookPair[bookIdB] = bookIdA;\\n\\n        emit Open(key, bookIdA, bookIdB, strategy);\\n    }\\n\\n    function _burnAndRebalance(bytes32 key, address user, uint256 burnAmount)\\n        public\\n        selfOnly\\n        returns (uint256 withdrawalA, uint256 withdrawalB)\\n    {\\n        Pool storage pool = _pools[key];\\n        if (pool.strategy == IStrategy(address(0))) revert InvalidBookPair();\\n\\n        uint256 amountA = pool.reserveA;\\n        uint256 amountB = pool.reserveB;\\n\\n        // Remove all orders\\n        (uint256 canceledAmount, uint256 claimedAmount) = _clearOrders(pool.orderListA);\\n        amountA += canceledAmount;\\n        amountB += claimedAmount;\\n        (canceledAmount, claimedAmount) = _clearOrders(pool.orderListB);\\n        amountA += claimedAmount;\\n        amountB += canceledAmount;\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n        IBookManager.BookKey memory bookKeyB = bookManager.getBookKey(pool.bookIdB);\\n\\n        if (burnAmount > 0) {\\n            uint256 supply = totalSupply[uint256(key)];\\n            _burn(user, uint256(key), burnAmount);\\n            withdrawalA = FixedPointMathLib.mulDivDown(amountA, burnAmount, supply);\\n            withdrawalB = FixedPointMathLib.mulDivDown(amountB, burnAmount, supply);\\n            amountA -= withdrawalA;\\n            amountB -= withdrawalB;\\n            emit Burn(user, key, withdrawalA, withdrawalB, burnAmount);\\n        }\\n\\n        // Compute allocation\\n        (IStrategy.Order[] memory liquidityA, IStrategy.Order[] memory liquidityB) =\\n            pool.strategy.computeOrders(key, amountA, amountB);\\n\\n        // @dev pool.orderListA.length == 0 && pool.orderListB.length == 0\\n        _setLiquidity(bookKeyA, liquidityA, pool.orderListA);\\n        _setLiquidity(bookKeyB, liquidityB, pool.orderListB);\\n\\n        pool.reserveA = _settleCurrency(bookKeyA.quote, pool.reserveA);\\n        pool.reserveB = _settleCurrency(bookKeyA.base, pool.reserveB);\\n\\n        if (withdrawalA > 0) {\\n            bookKeyA.quote.transfer(user, withdrawalA);\\n            pool.reserveA -= withdrawalA;\\n        }\\n        if (withdrawalB > 0) {\\n            bookKeyA.base.transfer(user, withdrawalB);\\n            pool.reserveB -= withdrawalB;\\n        }\\n\\n        emit Rebalance(key);\\n    }\\n\\n    function _clearOrders(OrderId[] storage orderIds)\\n        internal\\n        returns (uint256 canceledAmount, uint256 claimedAmount)\\n    {\\n        OrderId[] memory mOrderIds = orderIds;\\n        for (uint256 i = 0; i < mOrderIds.length; ++i) {\\n            OrderId orderId = mOrderIds[i];\\n            IBookManager.OrderInfo memory orderInfo = bookManager.getOrder(orderId);\\n            if (orderInfo.claimable > 0) {\\n                claimedAmount += bookManager.claim(orderId, \\\"\\\");\\n            }\\n            if (orderInfo.open > 0) {\\n                canceledAmount += bookManager.cancel(IBookManager.CancelParams({id: orderId, toUnit: 0}), \\\"\\\");\\n            }\\n        }\\n        assembly {\\n            sstore(orderIds.slot, 0)\\n        }\\n    }\\n\\n    function _setLiquidity(\\n        IBookManager.BookKey memory bookKey,\\n        IStrategy.Order[] memory liquidity,\\n        OrderId[] storage emptyOrderIds\\n    ) internal {\\n        for (uint256 i = 0; i < liquidity.length; ++i) {\\n            if (liquidity[i].rawAmount == 0) continue;\\n            (OrderId orderId,) = bookManager.make(\\n                IBookManager.MakeParams({\\n                    key: bookKey,\\n                    tick: liquidity[i].tick,\\n                    unit: liquidity[i].rawAmount,\\n                    provider: address(0)\\n                }),\\n                \\\"\\\"\\n            );\\n            emptyOrderIds.push(orderId);\\n        }\\n    }\\n\\n    function _settleCurrency(Currency currency, uint256 liquidity) internal returns (uint256) {\\n        bookManager.settle(currency);\\n\\n        int256 delta = bookManager.getCurrencyDelta(address(this), currency);\\n        if (delta > 0) {\\n            bookManager.withdraw(currency, address(this), uint256(delta));\\n            liquidity += uint256(delta);\\n        } else {\\n            currency.transfer(address(bookManager), uint256(-delta));\\n            bookManager.settle(currency);\\n            liquidity -= uint256(-delta);\\n        }\\n        return liquidity;\\n    }\\n\\n    function _encodeKey(BookId bookIdA, BookId bookIdB) internal pure returns (bytes32) {\\n        if (BookId.unwrap(bookIdA) > BookId.unwrap(bookIdB)) (bookIdA, bookIdB) = (bookIdB, bookIdA);\\n        return keccak256(abi.encodePacked(bookIdA, bookIdB));\\n    }\\n\\n    function setStrategy(bytes32 key, address strategy) external onlyOwner {\\n        _pools[key].strategy = IStrategy(strategy);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6d3a0dc17d1275bed7b577d9c1ee95fd4c7e4bba4649a499c49b3cda9d5dfaf1\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Ownable2Step, Ownable} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {ILocker} from \\\"clober-dex/v2-core/interfaces/ILocker.sol\\\";\\nimport {BookId, BookIdLibrary} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\nimport {OrderId, OrderIdLibrary} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {ERC6909Supply} from \\\"../libraries/ERC6909Supply.sol\\\";\\n\\ninterface IRebalancer {\\n    error NotSelf();\\n    error InvalidHook();\\n    error InvalidBookPair();\\n    error InvalidLockAcquiredSender();\\n    error InvalidLockCaller();\\n    error LockFailure();\\n    error InvalidMaker();\\n    error InvalidAmount();\\n    error InvalidValue();\\n\\n    event Open(bytes32 indexed key, BookId indexed bookIdA, BookId indexed bookIdB, address strategy);\\n    event Mint(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Burn(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Rebalance(bytes32 indexed key);\\n\\n    struct Pool {\\n        BookId bookIdA;\\n        BookId bookIdB;\\n        IStrategy strategy;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        OrderId[] orderListA;\\n        OrderId[] orderListB;\\n    }\\n\\n    function bookPair(BookId bookId) external view returns (BookId);\\n\\n    function getPool(bytes32 key) external view returns (Pool memory);\\n\\n    function getBookPairs(bytes32 key) external view returns (BookId bookIdA, BookId bookIdB);\\n\\n    function getLiquidity(bytes32 key) external view returns (uint256 liquidityA, uint256 liquidityB);\\n\\n    function open(IBookManager.BookKey calldata bookKeyA, IBookManager.BookKey calldata bookKeyB, address strategy)\\n        external\\n        returns (bytes32 key);\\n\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB) external payable returns (uint256);\\n\\n    function burn(bytes32 key, uint256 amount) external returns (uint256, uint256);\\n\\n    function rebalance(bytes32 key) external;\\n\\n    function setStrategy(bytes32 key, address strategy) external;\\n}\\n\",\"keccak256\":\"0xd9be77c370200341183710b61aedbb899bf02281e8ed9c3077287b075dd7d65e\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\n\\ninterface IStrategy {\\n    struct Order {\\n        Tick tick;\\n        uint64 rawAmount;\\n    }\\n\\n    function computeOrders(bytes32 key, uint256 amountA, uint256 amountB)\\n        external\\n        view\\n        returns (Order[] memory ordersA, Order[] memory ordersB);\\n}\\n\",\"keccak256\":\"0x3b6732946b31a84a629b5de38fdd65acad345d4b5251be28e462c8c6fad366f9\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/ERC6909Supply.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC6909} from \\\"solmate/tokens/ERC6909.sol\\\";\\n\\nabstract contract ERC6909Supply is ERC6909 {\\n    mapping(uint256 => uint256) public totalSupply;\\n\\n    function _mint(address receiver, uint256 id, uint256 amount) internal virtual override {\\n        super._mint(receiver, id, amount);\\n        totalSupply[id] += amount;\\n    }\\n\\n    function _burn(address sender, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(sender, id, amount);\\n        totalSupply[id] -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x918de786bbc6556ce5bad8eef18ab3435eb2e2f39e256e84e68b4f985f4d0fba\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561000f575f80fd5b50604051613e41380380613e4183398101604081905261002e916100f7565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610078565b50506001600160a01b031660805261012f565b600180546001600160a01b031916905561009181610094565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610091575f80fd5b5f8060408385031215610108575f80fd5b8251610113816100e3565b6020840151909250610124816100e3565b809150509250929050565b608051613c596101e85f395f818161030c015281816106f30152818161078d01528181610b6001528181610cfd01528181610eda01528181610f6601528181610fe701528181611073015281816111ea015281816114ec015281816116fa01528181611a8f01528181611b9501528181611e5801528181611f380152818161202d015281816121490152818161228501528181612332015281816123ec0152818161245b015281816124b301526127c00152613c595ff3fe6080604052600436106101a6575f3560e01c8063715018a6116100e7578063bd85b03911610087578063f2fde38b11610062578063f2fde38b1461058e578063f6c00927146105ad578063fa6793d5146105d9578063fe99049a146105f8575f80fd5b8063bd85b039146104e6578063c630ed7d14610511578063e30c397814610571575f80fd5b80638da5cb5b116100c25780638da5cb5b14610426578063998ff4ef14610442578063a14cbb121461048e578063b6363cf2146104ad575f80fd5b8063715018a6146103df57806379ba5097146103f35780637a40845414610407575f80fd5b80632bc8893c11610152578063426a84931161012d578063426a8493146103465780634f0b55ba14610365578063558a729714610384578063598af9e7146103a3575f80fd5b80632bc8893c146102c9578063375a54ab146102e85780633f322bc9146102fb575f80fd5b8063095bcdb611610182578063095bcdb61461025d57806315c7afb41461027c5780631b022ec8146102a8575f80fd5b8062fdd58e146101b157806301e7f064146101fa57806301ffc9a71461022e575f80fd5b366101ad57005b5f80fd5b3480156101bc575f80fd5b506101e76101cb366004613040565b600360209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b348015610205575f80fd5b5061021961021436600461306a565b610617565b604080519283526020830191909152016101f1565b348015610239575f80fd5b5061024d61024836600461309f565b610a31565b60405190151581526020016101f1565b348015610268575f80fd5b5061024d6102773660046130c6565b610a99565b348015610287575f80fd5b5061029b6102963660046130f8565b610b53565b6040516101f191906131a4565b3480156102b3575f80fd5b506102c76102c23660046131b6565b610ca9565b005b3480156102d4575f80fd5b506101e76102e33660046131e3565b610d80565b6101e76102f636600461322b565b6111b9565b348015610306575f80fd5b5061032e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f1565b348015610351575f80fd5b5061024d6103603660046130c6565b61147d565b348015610370575f80fd5b506101e761037f3660046131e3565b6114e1565b34801561038f575f80fd5b5061024d61039e366004613261565b6115da565b3480156103ae575f80fd5b506101e76103bd366004613298565b600460209081525f938452604080852082529284528284209052825290205481565b3480156103ea575f80fd5b506102c7611649565b3480156103fe575f80fd5b506102c761165c565b348015610412575f80fd5b506102196104213660046132c5565b6116a5565b348015610431575f80fd5b505f546001600160a01b031661032e565b34801561044d575f80fd5b5061047661045c3660046132e5565b60076020525f90815260409020546001600160c01b031681565b6040516001600160c01b0390911681526020016101f1565b348015610499575f80fd5b506102c76104a836600461330b565b611797565b3480156104b8575f80fd5b5061024d6104c736600461332e565b600260209081525f928352604080842090915290825290205460ff1681565b3480156104f1575f80fd5b506101e76105003660046131b6565b60056020525f908152604090205481565b34801561051c575f80fd5b5061055161052b3660046131b6565b5f90815260066020526040902080546001909101546001600160c01b0391821692911690565b604080516001600160c01b039384168152929091166020830152016101f1565b34801561057c575f80fd5b506001546001600160a01b031661032e565b348015610599575f80fd5b506102c76105a836600461335a565b6117cf565b3480156105b8575f80fd5b506105cc6105c73660046131b6565b61183f565b6040516101f191906133af565b3480156105e4575f80fd5b506102196105f33660046131b6565b6119a0565b348015610603575f80fd5b5061024d610612366004613439565b611c69565b5f80333014610639576040516314e1dbf760e11b815260040160405180910390fd5b5f85815260066020526040902060028101546001600160a01b0316610671576040516313d200a960e11b815260040160405180910390fd5b600381015460048201545f8061068960058601611dda565b90925090506106988285613490565b93506106a48184613490565b92506106b285600601611dda565b90925090506106c18185613490565b93506106cd8284613490565b8554604051639b22917d60e01b81526001600160c01b0390911660048201529093505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610740573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107649190613559565b6001870154604051639b22917d60e01b81526001600160c01b0390911660048201529091505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa1580156107da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fe9190613559565b905089156108a2575f8c81526005602052604090205461081f8c8e8d6120bf565b61082a878c836120f1565b9950610837868c836120f1565b98506108438a886135e4565b965061084f89876135e4565b604080518c8152602081018c90529081018d90529096508d906001600160a01b038e16907f974da0fadf774cec6d550cb40d607dc3a0b7dee97aa1cd03a2fa3f6603b943ab9060600160405180910390a3505b60028701546040517f1dc90f6d000000000000000000000000000000000000000000000000000000008152600481018e905260248101889052604481018790525f9182916001600160a01b0390911690631dc90f6d906064015f60405180830381865afa158015610915573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261093c91908101906136ad565b9150915061094e84838b60050161210c565b61095c83828b60060161210c565b61096e84604001518a60030154612264565b60038a0155835160048a01546109849190612264565b60048a01558a156109c15760408401516109a8906001600160a01b03168e8d61253c565b8a896003015f8282546109bb91906135e4565b90915550505b89156109f65783516109dd906001600160a01b03168e8c61253c565b89896004015f8282546109f091906135e4565b90915550505b6040518e907f37f8042257f6b4d65b9614deb7792e5b374db2fdcd1983bf8a1247a8a788af5c905f90a2505050505050505050935093915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610a9357507f0f632fb3000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b335f908152600360209081526040808320858452909152812080548391908390610ac49084906135e4565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290610afb908490613490565b909155505060408051338082526020820185905285926001600160a01b038816927f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a45060015b9392505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb7576040517f4bd37f4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014610bf9576040517f66a7598c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80306001600160a01b03168585604051610c1592919061370d565b5f604051808303815f865af19150503d805f8114610c4e576040519150601f19603f3d011682016040523d82523d5f602084013e610c53565b606091505b50915091508115610c67579150610b4c9050565b80515f03610ca1576040517fa40afa3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201fd5b60408051602481018390525f6044820181905260648083019190915282518083039091018152608490910182526020810180516001600160e01b03166279fc1960e21b17905290516313942f3360e31b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca1799891610d3a91309160040161371c565b5f604051808303815f875af1158015610d55573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d7c919081019061373d565b5050565b5f333014610da1576040516314e1dbf760e11b815260040160405180910390fd5b610dd2610db1602085018561335a565b610dc1606087016040880161335a565b6001600160a01b0391821691161490565b8015610df95750610df9610dec606085016040860161335a565b610dc1602087018761335a565b610e16576040516313d200a960e11b815260040160405180910390fd5b5f610e2760a086016080870161335a565b6001600160a01b0316141580610e5557505f610e4960a085016080860161335a565b6001600160a01b031614155b15610e8c576040517f9c9d882300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610ea4610e9f368790038701876137cc565b61261e565b90505f610eb9610e9f368790038701876137cc565b604051632ad7b51960e11b81526001600160c01b03841660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015610f27573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4b919061384b565b610fc95760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190610f9b908990600401613905565b5f604051808303815f87803b158015610fb2575f80fd5b505af1158015610fc4573d5f803e3d5ffd5b505050505b604051632ad7b51960e11b81526001600160c01b03821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611034573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611058919061384b565b6110d65760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c51906110a8908890600401613905565b5f604051808303815f87803b1580156110bf575f80fd5b505af11580156110d1573d5f803e3d5ffd5b505050505b6110e08282612659565b5f81815260066020908152604080832080547fffffffffffffffff0000000000000000000000000000000000000000000000009081166001600160c01b0389811691821784556001840180548416918a169182179055600290930180546001600160a01b0319166001600160a01b038d16908117909155818752600786528487208054841685179055838752958490208054909216811790915591519384529396509186917fa51eb8bfbd78395d25a84438b321fa70c63e99bfcb3ed2455805e255b1d25ac6910160405180910390a450509392505050565b5f8381526006602052604080822080549151639b22917d60e01b81526001600160c01b0390921660048301529082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611237573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061125b9190613559565b5f878152600560205260408120549192508190036112cb5785158061127e575084155b156112b5576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8486116112c257846112c4565b855b9350611349565b5f805f806112d88b6119a0565b91509150815f036112eb575f99506112f9565b6112f68a86846120f1565b93505b805f03611308575f9850611316565b6113138986836120f1565b92505b828411156113335782975061132c8289876126b8565b9950611344565b8397506113418189876126b8565b98505b505050505b604082015134906001600160a01b0316611386578634101561137e57604051632a9ffab760e21b815260040160405180910390fd5b8690036113a0565b60408301516113a0906001600160a01b031633308a6126db565b82516001600160a01b03166113d857853410156113d057604051632a9ffab760e21b815260040160405180910390fd5b8590036113ef565b82516113ef906001600160a01b03163330896126db565b86846003015f8282546114029190613490565b9250508190555085846004015f82825461141c9190613490565b9091555061142d905033898761274e565b6040805188815260208101889052908101869052889033907f1d43dbd7e59f8c9371169f5c49c01e100227d9ee5f5fe54665cf10e35042bb729060600160405180910390a3505050509392505050565b335f8181526004602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a790610b409087815260200190565b5f6114ea612776565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca1799830632bc8893c60e01b87878760405160240161153793929190613926565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b909216825261157d929160040161371c565b5f604051808303815f875af1158015611598573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526115bf919081019061373d565b8060200190518101906115d2919061395a565b949350505050565b335f8181526002602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b611651612776565b61165a5f6127a2565b565b60015433906001600160a01b031681146116995760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6116a2816127a2565b50565b6040805160248101849052336044820152606480820184905282518083039091018152608490910182526020810180516001600160e01b03166279fc1960e21b17905290516313942f3360e31b81525f9182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca179989161173791309160040161371c565b5f604051808303815f875af1158015611752573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611779919081019061373d565b80602001905181019061178c9190613971565b915091509250929050565b61179f612776565b5f9182526006602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b6117d7612776565b600180546001600160a01b0383166001600160a01b031990911681179091556118075f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6118956040518060e001604052805f6001600160c01b031681526020015f6001600160c01b031681526020015f6001600160a01b031681526020015f81526020015f815260200160608152602001606081525090565b5f82815260066020908152604091829020825160e08101845281546001600160c01b0390811682526001830154168184015260028201546001600160a01b03168185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561193a57602002820191905f5260205f20905b815481526020019060010190808311611926575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561199057602002820191905f5260205f20905b81548152602001906001019080831161197c575b5050505050815250509050919050565b5f81815260066020908152604080832060038101546004820154600583018054855181880281018801909652808652929691959394919391929091830182828015611a0857602002820191905f5260205f20905b8154815260200190600101908083116119f4575b505050505090505f82600601805480602002602001604051908101604052809291908181526020018280548015611a5c57602002820191905f5260205f20905b815481526020019060010190808311611a48575b505050505090505f82511115611b68578254604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611adc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b009190613559565b90505f5b8351811015611b65575f80611b3b84606001518560200151888681518110611b2e57611b2e613993565b60200260200101516127bb565b9092509050611b4a828a613490565b9850611b568189613490565b97505050806001019050611b04565b50505b805115611c61576001830154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611be2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c069190613559565b90505f5b8251811015611c5e575f80611c3484606001518560200151878681518110611b2e57611b2e613993565b9092509050611c43818a613490565b9850611c4f8289613490565b97505050806001019050611c0a565b50505b505050915091565b5f336001600160a01b03861614801590611ca657506001600160a01b0385165f90815260026020908152604080832033845290915290205460ff16155b15611d16576001600160a01b0385165f90815260046020908152604080832033845282528083208684529091529020545f198114611d1457611ce883826135e4565b6001600160a01b0387165f90815260046020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f90815260036020908152604080832086845290915281208054849290611d489084906135e4565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290611d7f908490613490565b9091555050604080513381526020810184905284916001600160a01b0380881692908916917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859910160405180910390a4506001949350505050565b5f805f83805480602002602001604051908101604052809291908181526020018280548015611e2657602002820191905f5260205f20905b815481526020019060010190808311611e12575b505050505090505f5b81518110156120b6575f828281518110611e4b57611e4b613993565b602002602001015190505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241836040518263ffffffff1660e01b8152600401611ea491815260200190565b606060405180830381865afa158015611ebf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ee391906139a7565b604081015190915067ffffffffffffffff1615611fb757604080517f38926b6d0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091525f60448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338926b6d906064016020604051808303815f875af1158015611f86573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611faa919061395a565b611fb49086613490565b94505b602081015167ffffffffffffffff16156120ac576040805180820182528381525f6020820181815292517f14d6a9eb00000000000000000000000000000000000000000000000000000000815291516004830152915167ffffffffffffffff1660248201526060604482015260648101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906314d6a9eb906084016020604051808303815f875af115801561207b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061209f919061395a565b6120a99087613490565b95505b5050600101611e2f565b50505f90925591565b6120ca83838361291a565b5f82815260056020526040812080548392906120e79084906135e4565b9091555050505050565b5f825f190484118302158202612105575f80fd5b5091020490565b5f5b825181101561225e5782818151811061212957612129613993565b60200260200101516020015167ffffffffffffffff165f0315612256575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dbef488604051806080016040528088815260200187868151811061219957612199613993565b60200260200101515f015160020b81526020018786815181106121be576121be613993565b60200260200101516020015167ffffffffffffffff1681526020015f6001600160a01b03168152506040518263ffffffff1660e01b81526004016122029190613a17565b60408051808303815f875af115801561221d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122419190613971565b5083546001810185555f858152602090200155505b60010161210e565b50505050565b604051636a256b2960e01b81526001600160a01b0383811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303815f875af11580156122cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122f1919061395a565b506040517f9611cf6c0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690639611cf6c90604401602060405180830381865afa158015612379573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061239d919061395a565b90505f811315612456576040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152306024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed12906064015f604051808303815f87803b15801561242d575f80fd5b505af115801561243f573d5f803e3d5ffd5b50505050808361244f9190613490565b9250612534565b6124947f000000000000000000000000000000000000000000000000000000000000000061248383613acd565b6001600160a01b038716919061253c565b604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303815f875af11580156124f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061251d919061395a565b5061252781613acd565b61253190846135e4565b92505b509092915050565b5f6001600160a01b038416612591575f805f8085875af190508061258c576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61225e565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f51141617169150508061225e576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80826040516020016126319190613b03565b60408051601f1981840301815291905280516020909101206001600160c01b03169392505050565b5f816001600160c01b0316836001600160c01b03161115612678579091905b506040805192811b67ffffffffffffffff1990811660208086019190915292821b1660388401528051603081850301815260509093019052815191012090565b5f825f1904841183021582026126cc575f80fd5b50910281810615159190040190565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905261225e90859061299f565b612759838383612a1e565b5f82815260056020526040812080548392906120e7908490613490565b5f546001600160a01b0316331461165a5760405163118cdaa760e01b8152336004820152602401611690565b600180546001600160a01b03191690556116a281612a9a565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241856040518263ffffffff1660e01b815260040161280c91815260200190565b606060405180830381865afa158015612827573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061284b91906139a7565b90508467ffffffffffffffff16816020015167ffffffffffffffff166128719190613b6a565b92506128b48567ffffffffffffffff16826040015167ffffffffffffffff1661289a9190613b6a565b5f6128aa8760281c62ffffff1690565b60020b9190612ae9565b91506128c58662ffffff1660171c90565b156128f0575f6128dc62ffffff8816856001612b0b565b90506128e88185613b81565b935050612911565b5f61290162ffffff88168483612b0b565b905061290d8184613ba8565b9250505b50935093915050565b6001600160a01b0383165f9081526003602090815260408083208584529091528120805483929061294c9084906135e4565b9091555050604080513381526020810183905283915f916001600160a01b038716917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a4505050565b5f6129b36001600160a01b03841683612b8b565b905080515f141580156129d75750808060200190518101906129d5919061384b565b155b15612a19576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401611690565b505050565b6001600160a01b0383165f90815260036020908152604080832085845290915281208054839290612a50908490613490565b9091555050604080513381526020810183905283916001600160a01b038616915f917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac7288599101612992565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6115d2606084901b612afe8660020b612b98565b8082061515851691040190565b5f6207a11f19627fffff851601600281900b82128281612b2d57825f03612b2f565b825b62ffffff1690505f612b68612b448389613b6a565b620f424088612b5a578581830615151691040190565b808206151586151691040190565b905082612b7d57612b7881613acd565b612b7f565b805b98975050505050505050565b6060610b4c83835f612e60565b5f612ba282612f19565b815f600282900b8113612bb55781612bbe565b612bbe82613bce565b62ffffff8116915060011615612be2576bfff97272373d413259a469909250612bf3565b6c0100000000000000000000000092505b6002811615612c125760606bfff2e50f5f656932ef12357c8402901c92505b6004811615612c315760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615612c505760606bffcb9843d60f6159c9db58838402901c92505b6010811615612c6f5760606bff973b41fa98c081472e68968402901c92505b6020811615612c8e5760606bff2ea16466c96a3843ec78b38402901c92505b6040811615612cad5760606bfe5dee046a99a2a811c461f18402901c92505b6080811615612ccc5760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615612cec5760606bf987a7253ac413176f2b074c8402901c92505b610200811615612d0c5760606bf3392b0822b70005940c7a398402901c92505b610400811615612d2c5760606be7159475a2c29b7443b29c7f8402901c92505b610800811615612d4c5760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615612d6c5760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615612d8c5760606b70d869a156d2a1b890bb3df68402901c92505b614000811615612dac5760606b31be135f97d08fd9812315058402901c92505b618000811615612dcc5760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615612dec5760606a5d6af8dedb81196699c3298402901c92505b62020000811615612e0b576060692216e584f5fa1ea926048402901c92505b62040000811615612e2857606067048a170391f7dc428402901c92505b5f8260020b1315612e5957612e56837801000000000000000000000000000000000000000000000000613bee565b92505b5050919050565b606081471015612ea5576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101839052604401611690565b5f80856001600160a01b03168486604051612ec09190613c0d565b5f6040518083038185875af1925050503d805f8114612efa576040519150601f19603f3d011682016040523d82523d5f602084013e612eff565b606091505b5091509150612f0f868383612f75565b9695505050505050565b6207ffff600282900b1380612f3e5750612f356207ffff613bce565b60020b8160020b125b156116a2576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082612f8a57612f8582612fea565b610b4c565b8151158015612fa157506001600160a01b0384163b155b15612fe3576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611690565b5080610b4c565b805115612ffa5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811681146116a2575f80fd5b5f8060408385031215613051575f80fd5b823561305c8161302c565b946020939093013593505050565b5f805f6060848603121561307c575f80fd5b83359250602084013561308e8161302c565b929592945050506040919091013590565b5f602082840312156130af575f80fd5b81356001600160e01b031981168114610b4c575f80fd5b5f805f606084860312156130d8575f80fd5b83356130e38161302c565b95602085013595506040909401359392505050565b5f805f6040848603121561310a575f80fd5b83356131158161302c565b9250602084013567ffffffffffffffff80821115613131575f80fd5b818601915086601f830112613144575f80fd5b813581811115613152575f80fd5b876020828501011115613163575f80fd5b6020830194508093505050509250925092565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610b4c6020830184613176565b5f602082840312156131c6575f80fd5b5035919050565b5f60c082840312156131dd575f80fd5b50919050565b5f805f6101a084860312156131f6575f80fd5b61320085856131cd565b925061320f8560c086016131cd565b91506101808401356132208161302c565b809150509250925092565b5f805f6060848603121561323d575f80fd5b505081359360208301359350604090920135919050565b80151581146116a2575f80fd5b5f8060408385031215613272575f80fd5b823561327d8161302c565b9150602083013561328d81613254565b809150509250929050565b5f805f606084860312156132aa575f80fd5b83356132b58161302c565b9250602084013561308e8161302c565b5f80604083850312156132d6575f80fd5b50508035926020909101359150565b5f602082840312156132f5575f80fd5b81356001600160c01b0381168114610b4c575f80fd5b5f806040838503121561331c575f80fd5b82359150602083013561328d8161302c565b5f806040838503121561333f575f80fd5b823561334a8161302c565b9150602083013561328d8161302c565b5f6020828403121561336a575f80fd5b8135610b4c8161302c565b5f815180845260208085019450602084015f5b838110156133a457815187529582019590820190600101613388565b509495945050505050565b602081525f6001600160c01b03808451166020840152806020850151166040840152506001600160a01b03604084015116606083015260608301516080830152608083015160a083015260a083015160e060c0840152613413610100840182613375565b905060c0840151601f198483030160e08501526134308282613375565b95945050505050565b5f805f806080858703121561344c575f80fd5b84356134578161302c565b935060208501356134678161302c565b93969395505050506040820135916060013590565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a9357610a9361347c565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff811182821017156134da576134da6134a3565b60405290565b6040805190810167ffffffffffffffff811182821017156134da576134da6134a3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561352c5761352c6134a3565b604052919050565b67ffffffffffffffff811681146116a2575f80fd5b62ffffff811681146116a2575f80fd5b5f60c08284031215613569575f80fd5b6135716134b7565b825161357c8161302c565b8152602083015161358c81613534565b6020820152604083015161359f8161302c565b604082015260608301516135b281613549565b606082015260808301516135c58161302c565b608082015260a08301516135d881613549565b60a08201529392505050565b81810381811115610a9357610a9361347c565b5f82601f830112613606575f80fd5b8151602067ffffffffffffffff821115613622576136226134a3565b613630818360051b01613503565b82815260069290921b8401810191818101908684111561364e575f80fd5b8286015b848110156136a25760408189031215613669575f80fd5b6136716134e0565b81518060020b8114613681575f80fd5b81528185015161369081613534565b81860152835291830191604001613652565b509695505050505050565b5f80604083850312156136be575f80fd5b825167ffffffffffffffff808211156136d5575f80fd5b6136e1868387016135f7565b935060208501519150808211156136f6575f80fd5b50613703858286016135f7565b9150509250929050565b818382375f9101908152919050565b6001600160a01b0383168152604060208201525f6115d26040830184613176565b5f602080838503121561374e575f80fd5b825167ffffffffffffffff80821115613765575f80fd5b818501915085601f830112613778575f80fd5b81518181111561378a5761378a6134a3565b61379c601f8201601f19168501613503565b915080825286848285010111156137b1575f80fd5b808484018584015e5f90820190930192909252509392505050565b5f60c082840312156137dc575f80fd5b6137e46134b7565b82356137ef8161302c565b815260208301356137ff81613534565b602082015260408301356138128161302c565b6040820152606083013561382581613549565b606082015260808301356138388161302c565b608082015260a08301356135d881613549565b5f6020828403121561385b575f80fd5b8151610b4c81613254565b80356138718161302c565b6001600160a01b03908116835260208201359061388d82613534565b67ffffffffffffffff82166020850152604083013591506138ad8261302c565b90811660408401526060820135906138c482613549565b62ffffff91821660608501526080830135916138df8361302c565b918116608085015260a0830135916138f683613549565b80831660a08601525050505050565b61390f8183613866565b60e060c082018190525f9082015261010001919050565b6101a081016139358286613866565b61394260c0830185613866565b6001600160a01b038316610180830152949350505050565b5f6020828403121561396a575f80fd5b5051919050565b5f8060408385031215613982575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b5f606082840312156139b7575f80fd5b6040516060810181811067ffffffffffffffff821117156139da576139da6134a3565b60405282516139e88161302c565b815260208301516139f881613534565b60208201526040830151613a0b81613534565b60408201529392505050565b5f610140613a7f8385516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602084015160020b60c0840152604084015167ffffffffffffffff1660e08401526060909301516001600160a01b03166101008301525061012081018290525f918101919091526101600190565b5f7f80000000000000000000000000000000000000000000000000000000000000008203613afd57613afd61347c565b505f0390565b60c08101610a9382846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b8082028115828204841417610a9357610a9361347c565b8082018281125f831280158216821582161715613ba057613ba061347c565b505092915050565b8181035f831280158383131683831282161715613bc757613bc761347c565b5092915050565b5f8160020b627fffff198103613be657613be661347c565b5f0392915050565b5f82613c0857634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fea26469706673582212207a4415265707ad36c44a0233a660210ce0ccb1645a0ae4db87f19db5a06206f564736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106101a6575f3560e01c8063715018a6116100e7578063bd85b03911610087578063f2fde38b11610062578063f2fde38b1461058e578063f6c00927146105ad578063fa6793d5146105d9578063fe99049a146105f8575f80fd5b8063bd85b039146104e6578063c630ed7d14610511578063e30c397814610571575f80fd5b80638da5cb5b116100c25780638da5cb5b14610426578063998ff4ef14610442578063a14cbb121461048e578063b6363cf2146104ad575f80fd5b8063715018a6146103df57806379ba5097146103f35780637a40845414610407575f80fd5b80632bc8893c11610152578063426a84931161012d578063426a8493146103465780634f0b55ba14610365578063558a729714610384578063598af9e7146103a3575f80fd5b80632bc8893c146102c9578063375a54ab146102e85780633f322bc9146102fb575f80fd5b8063095bcdb611610182578063095bcdb61461025d57806315c7afb41461027c5780631b022ec8146102a8575f80fd5b8062fdd58e146101b157806301e7f064146101fa57806301ffc9a71461022e575f80fd5b366101ad57005b5f80fd5b3480156101bc575f80fd5b506101e76101cb366004613040565b600360209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b348015610205575f80fd5b5061021961021436600461306a565b610617565b604080519283526020830191909152016101f1565b348015610239575f80fd5b5061024d61024836600461309f565b610a31565b60405190151581526020016101f1565b348015610268575f80fd5b5061024d6102773660046130c6565b610a99565b348015610287575f80fd5b5061029b6102963660046130f8565b610b53565b6040516101f191906131a4565b3480156102b3575f80fd5b506102c76102c23660046131b6565b610ca9565b005b3480156102d4575f80fd5b506101e76102e33660046131e3565b610d80565b6101e76102f636600461322b565b6111b9565b348015610306575f80fd5b5061032e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f1565b348015610351575f80fd5b5061024d6103603660046130c6565b61147d565b348015610370575f80fd5b506101e761037f3660046131e3565b6114e1565b34801561038f575f80fd5b5061024d61039e366004613261565b6115da565b3480156103ae575f80fd5b506101e76103bd366004613298565b600460209081525f938452604080852082529284528284209052825290205481565b3480156103ea575f80fd5b506102c7611649565b3480156103fe575f80fd5b506102c761165c565b348015610412575f80fd5b506102196104213660046132c5565b6116a5565b348015610431575f80fd5b505f546001600160a01b031661032e565b34801561044d575f80fd5b5061047661045c3660046132e5565b60076020525f90815260409020546001600160c01b031681565b6040516001600160c01b0390911681526020016101f1565b348015610499575f80fd5b506102c76104a836600461330b565b611797565b3480156104b8575f80fd5b5061024d6104c736600461332e565b600260209081525f928352604080842090915290825290205460ff1681565b3480156104f1575f80fd5b506101e76105003660046131b6565b60056020525f908152604090205481565b34801561051c575f80fd5b5061055161052b3660046131b6565b5f90815260066020526040902080546001909101546001600160c01b0391821692911690565b604080516001600160c01b039384168152929091166020830152016101f1565b34801561057c575f80fd5b506001546001600160a01b031661032e565b348015610599575f80fd5b506102c76105a836600461335a565b6117cf565b3480156105b8575f80fd5b506105cc6105c73660046131b6565b61183f565b6040516101f191906133af565b3480156105e4575f80fd5b506102196105f33660046131b6565b6119a0565b348015610603575f80fd5b5061024d610612366004613439565b611c69565b5f80333014610639576040516314e1dbf760e11b815260040160405180910390fd5b5f85815260066020526040902060028101546001600160a01b0316610671576040516313d200a960e11b815260040160405180910390fd5b600381015460048201545f8061068960058601611dda565b90925090506106988285613490565b93506106a48184613490565b92506106b285600601611dda565b90925090506106c18185613490565b93506106cd8284613490565b8554604051639b22917d60e01b81526001600160c01b0390911660048201529093505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610740573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107649190613559565b6001870154604051639b22917d60e01b81526001600160c01b0390911660048201529091505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa1580156107da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fe9190613559565b905089156108a2575f8c81526005602052604090205461081f8c8e8d6120bf565b61082a878c836120f1565b9950610837868c836120f1565b98506108438a886135e4565b965061084f89876135e4565b604080518c8152602081018c90529081018d90529096508d906001600160a01b038e16907f974da0fadf774cec6d550cb40d607dc3a0b7dee97aa1cd03a2fa3f6603b943ab9060600160405180910390a3505b60028701546040517f1dc90f6d000000000000000000000000000000000000000000000000000000008152600481018e905260248101889052604481018790525f9182916001600160a01b0390911690631dc90f6d906064015f60405180830381865afa158015610915573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261093c91908101906136ad565b9150915061094e84838b60050161210c565b61095c83828b60060161210c565b61096e84604001518a60030154612264565b60038a0155835160048a01546109849190612264565b60048a01558a156109c15760408401516109a8906001600160a01b03168e8d61253c565b8a896003015f8282546109bb91906135e4565b90915550505b89156109f65783516109dd906001600160a01b03168e8c61253c565b89896004015f8282546109f091906135e4565b90915550505b6040518e907f37f8042257f6b4d65b9614deb7792e5b374db2fdcd1983bf8a1247a8a788af5c905f90a2505050505050505050935093915050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610a9357507f0f632fb3000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b335f908152600360209081526040808320858452909152812080548391908390610ac49084906135e4565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290610afb908490613490565b909155505060408051338082526020820185905285926001600160a01b038816927f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a45060015b9392505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb7576040517f4bd37f4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014610bf9576040517f66a7598c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80306001600160a01b03168585604051610c1592919061370d565b5f604051808303815f865af19150503d805f8114610c4e576040519150601f19603f3d011682016040523d82523d5f602084013e610c53565b606091505b50915091508115610c67579150610b4c9050565b80515f03610ca1576040517fa40afa3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201fd5b60408051602481018390525f6044820181905260648083019190915282518083039091018152608490910182526020810180516001600160e01b03166279fc1960e21b17905290516313942f3360e31b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca1799891610d3a91309160040161371c565b5f604051808303815f875af1158015610d55573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d7c919081019061373d565b5050565b5f333014610da1576040516314e1dbf760e11b815260040160405180910390fd5b610dd2610db1602085018561335a565b610dc1606087016040880161335a565b6001600160a01b0391821691161490565b8015610df95750610df9610dec606085016040860161335a565b610dc1602087018761335a565b610e16576040516313d200a960e11b815260040160405180910390fd5b5f610e2760a086016080870161335a565b6001600160a01b0316141580610e5557505f610e4960a085016080860161335a565b6001600160a01b031614155b15610e8c576040517f9c9d882300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610ea4610e9f368790038701876137cc565b61261e565b90505f610eb9610e9f368790038701876137cc565b604051632ad7b51960e11b81526001600160c01b03841660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015610f27573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4b919061384b565b610fc95760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190610f9b908990600401613905565b5f604051808303815f87803b158015610fb2575f80fd5b505af1158015610fc4573d5f803e3d5ffd5b505050505b604051632ad7b51960e11b81526001600160c01b03821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611034573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611058919061384b565b6110d65760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c51906110a8908890600401613905565b5f604051808303815f87803b1580156110bf575f80fd5b505af11580156110d1573d5f803e3d5ffd5b505050505b6110e08282612659565b5f81815260066020908152604080832080547fffffffffffffffff0000000000000000000000000000000000000000000000009081166001600160c01b0389811691821784556001840180548416918a169182179055600290930180546001600160a01b0319166001600160a01b038d16908117909155818752600786528487208054841685179055838752958490208054909216811790915591519384529396509186917fa51eb8bfbd78395d25a84438b321fa70c63e99bfcb3ed2455805e255b1d25ac6910160405180910390a450509392505050565b5f8381526006602052604080822080549151639b22917d60e01b81526001600160c01b0390921660048301529082907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611237573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061125b9190613559565b5f878152600560205260408120549192508190036112cb5785158061127e575084155b156112b5576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8486116112c257846112c4565b855b9350611349565b5f805f806112d88b6119a0565b91509150815f036112eb575f99506112f9565b6112f68a86846120f1565b93505b805f03611308575f9850611316565b6113138986836120f1565b92505b828411156113335782975061132c8289876126b8565b9950611344565b8397506113418189876126b8565b98505b505050505b604082015134906001600160a01b0316611386578634101561137e57604051632a9ffab760e21b815260040160405180910390fd5b8690036113a0565b60408301516113a0906001600160a01b031633308a6126db565b82516001600160a01b03166113d857853410156113d057604051632a9ffab760e21b815260040160405180910390fd5b8590036113ef565b82516113ef906001600160a01b03163330896126db565b86846003015f8282546114029190613490565b9250508190555085846004015f82825461141c9190613490565b9091555061142d905033898761274e565b6040805188815260208101889052908101869052889033907f1d43dbd7e59f8c9371169f5c49c01e100227d9ee5f5fe54665cf10e35042bb729060600160405180910390a3505050509392505050565b335f8181526004602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a790610b409087815260200190565b5f6114ea612776565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca1799830632bc8893c60e01b87878760405160240161153793929190613926565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b909216825261157d929160040161371c565b5f604051808303815f875af1158015611598573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526115bf919081019061373d565b8060200190518101906115d2919061395a565b949350505050565b335f8181526002602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b611651612776565b61165a5f6127a2565b565b60015433906001600160a01b031681146116995760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6116a2816127a2565b50565b6040805160248101849052336044820152606480820184905282518083039091018152608490910182526020810180516001600160e01b03166279fc1960e21b17905290516313942f3360e31b81525f9182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca179989161173791309160040161371c565b5f604051808303815f875af1158015611752573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611779919081019061373d565b80602001905181019061178c9190613971565b915091509250929050565b61179f612776565b5f9182526006602052604090912060020180546001600160a01b0319166001600160a01b03909216919091179055565b6117d7612776565b600180546001600160a01b0383166001600160a01b031990911681179091556118075f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6118956040518060e001604052805f6001600160c01b031681526020015f6001600160c01b031681526020015f6001600160a01b031681526020015f81526020015f815260200160608152602001606081525090565b5f82815260066020908152604091829020825160e08101845281546001600160c01b0390811682526001830154168184015260028201546001600160a01b03168185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561193a57602002820191905f5260205f20905b815481526020019060010190808311611926575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561199057602002820191905f5260205f20905b81548152602001906001019080831161197c575b5050505050815250509050919050565b5f81815260066020908152604080832060038101546004820154600583018054855181880281018801909652808652929691959394919391929091830182828015611a0857602002820191905f5260205f20905b8154815260200190600101908083116119f4575b505050505090505f82600601805480602002602001604051908101604052809291908181526020018280548015611a5c57602002820191905f5260205f20905b815481526020019060010190808311611a48575b505050505090505f82511115611b68578254604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611adc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b009190613559565b90505f5b8351811015611b65575f80611b3b84606001518560200151888681518110611b2e57611b2e613993565b60200260200101516127bb565b9092509050611b4a828a613490565b9850611b568189613490565b97505050806001019050611b04565b50505b805115611c61576001830154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611be2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c069190613559565b90505f5b8251811015611c5e575f80611c3484606001518560200151878681518110611b2e57611b2e613993565b9092509050611c43818a613490565b9850611c4f8289613490565b97505050806001019050611c0a565b50505b505050915091565b5f336001600160a01b03861614801590611ca657506001600160a01b0385165f90815260026020908152604080832033845290915290205460ff16155b15611d16576001600160a01b0385165f90815260046020908152604080832033845282528083208684529091529020545f198114611d1457611ce883826135e4565b6001600160a01b0387165f90815260046020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f90815260036020908152604080832086845290915281208054849290611d489084906135e4565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290611d7f908490613490565b9091555050604080513381526020810184905284916001600160a01b0380881692908916917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859910160405180910390a4506001949350505050565b5f805f83805480602002602001604051908101604052809291908181526020018280548015611e2657602002820191905f5260205f20905b815481526020019060010190808311611e12575b505050505090505f5b81518110156120b6575f828281518110611e4b57611e4b613993565b602002602001015190505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241836040518263ffffffff1660e01b8152600401611ea491815260200190565b606060405180830381865afa158015611ebf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ee391906139a7565b604081015190915067ffffffffffffffff1615611fb757604080517f38926b6d0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091525f60448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338926b6d906064016020604051808303815f875af1158015611f86573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611faa919061395a565b611fb49086613490565b94505b602081015167ffffffffffffffff16156120ac576040805180820182528381525f6020820181815292517f14d6a9eb00000000000000000000000000000000000000000000000000000000815291516004830152915167ffffffffffffffff1660248201526060604482015260648101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906314d6a9eb906084016020604051808303815f875af115801561207b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061209f919061395a565b6120a99087613490565b95505b5050600101611e2f565b50505f90925591565b6120ca83838361291a565b5f82815260056020526040812080548392906120e79084906135e4565b9091555050505050565b5f825f190484118302158202612105575f80fd5b5091020490565b5f5b825181101561225e5782818151811061212957612129613993565b60200260200101516020015167ffffffffffffffff165f0315612256575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dbef488604051806080016040528088815260200187868151811061219957612199613993565b60200260200101515f015160020b81526020018786815181106121be576121be613993565b60200260200101516020015167ffffffffffffffff1681526020015f6001600160a01b03168152506040518263ffffffff1660e01b81526004016122029190613a17565b60408051808303815f875af115801561221d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122419190613971565b5083546001810185555f858152602090200155505b60010161210e565b50505050565b604051636a256b2960e01b81526001600160a01b0383811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303815f875af11580156122cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122f1919061395a565b506040517f9611cf6c0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690639611cf6c90604401602060405180830381865afa158015612379573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061239d919061395a565b90505f811315612456576040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152306024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed12906064015f604051808303815f87803b15801561242d575f80fd5b505af115801561243f573d5f803e3d5ffd5b50505050808361244f9190613490565b9250612534565b6124947f000000000000000000000000000000000000000000000000000000000000000061248383613acd565b6001600160a01b038716919061253c565b604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303815f875af11580156124f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061251d919061395a565b5061252781613acd565b61253190846135e4565b92505b509092915050565b5f6001600160a01b038416612591575f805f8085875af190508061258c576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61225e565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f51141617169150508061225e576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80826040516020016126319190613b03565b60408051601f1981840301815291905280516020909101206001600160c01b03169392505050565b5f816001600160c01b0316836001600160c01b03161115612678579091905b506040805192811b67ffffffffffffffff1990811660208086019190915292821b1660388401528051603081850301815260509093019052815191012090565b5f825f1904841183021582026126cc575f80fd5b50910281810615159190040190565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905261225e90859061299f565b612759838383612a1e565b5f82815260056020526040812080548392906120e7908490613490565b5f546001600160a01b0316331461165a5760405163118cdaa760e01b8152336004820152602401611690565b600180546001600160a01b03191690556116a281612a9a565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241856040518263ffffffff1660e01b815260040161280c91815260200190565b606060405180830381865afa158015612827573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061284b91906139a7565b90508467ffffffffffffffff16816020015167ffffffffffffffff166128719190613b6a565b92506128b48567ffffffffffffffff16826040015167ffffffffffffffff1661289a9190613b6a565b5f6128aa8760281c62ffffff1690565b60020b9190612ae9565b91506128c58662ffffff1660171c90565b156128f0575f6128dc62ffffff8816856001612b0b565b90506128e88185613b81565b935050612911565b5f61290162ffffff88168483612b0b565b905061290d8184613ba8565b9250505b50935093915050565b6001600160a01b0383165f9081526003602090815260408083208584529091528120805483929061294c9084906135e4565b9091555050604080513381526020810183905283915f916001600160a01b038716917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a4505050565b5f6129b36001600160a01b03841683612b8b565b905080515f141580156129d75750808060200190518101906129d5919061384b565b155b15612a19576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401611690565b505050565b6001600160a01b0383165f90815260036020908152604080832085845290915281208054839290612a50908490613490565b9091555050604080513381526020810183905283916001600160a01b038616915f917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac7288599101612992565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6115d2606084901b612afe8660020b612b98565b8082061515851691040190565b5f6207a11f19627fffff851601600281900b82128281612b2d57825f03612b2f565b825b62ffffff1690505f612b68612b448389613b6a565b620f424088612b5a578581830615151691040190565b808206151586151691040190565b905082612b7d57612b7881613acd565b612b7f565b805b98975050505050505050565b6060610b4c83835f612e60565b5f612ba282612f19565b815f600282900b8113612bb55781612bbe565b612bbe82613bce565b62ffffff8116915060011615612be2576bfff97272373d413259a469909250612bf3565b6c0100000000000000000000000092505b6002811615612c125760606bfff2e50f5f656932ef12357c8402901c92505b6004811615612c315760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615612c505760606bffcb9843d60f6159c9db58838402901c92505b6010811615612c6f5760606bff973b41fa98c081472e68968402901c92505b6020811615612c8e5760606bff2ea16466c96a3843ec78b38402901c92505b6040811615612cad5760606bfe5dee046a99a2a811c461f18402901c92505b6080811615612ccc5760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615612cec5760606bf987a7253ac413176f2b074c8402901c92505b610200811615612d0c5760606bf3392b0822b70005940c7a398402901c92505b610400811615612d2c5760606be7159475a2c29b7443b29c7f8402901c92505b610800811615612d4c5760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615612d6c5760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615612d8c5760606b70d869a156d2a1b890bb3df68402901c92505b614000811615612dac5760606b31be135f97d08fd9812315058402901c92505b618000811615612dcc5760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615612dec5760606a5d6af8dedb81196699c3298402901c92505b62020000811615612e0b576060692216e584f5fa1ea926048402901c92505b62040000811615612e2857606067048a170391f7dc428402901c92505b5f8260020b1315612e5957612e56837801000000000000000000000000000000000000000000000000613bee565b92505b5050919050565b606081471015612ea5576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101839052604401611690565b5f80856001600160a01b03168486604051612ec09190613c0d565b5f6040518083038185875af1925050503d805f8114612efa576040519150601f19603f3d011682016040523d82523d5f602084013e612eff565b606091505b5091509150612f0f868383612f75565b9695505050505050565b6207ffff600282900b1380612f3e5750612f356207ffff613bce565b60020b8160020b125b156116a2576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082612f8a57612f8582612fea565b610b4c565b8151158015612fa157506001600160a01b0384163b155b15612fe3576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401611690565b5080610b4c565b805115612ffa5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03811681146116a2575f80fd5b5f8060408385031215613051575f80fd5b823561305c8161302c565b946020939093013593505050565b5f805f6060848603121561307c575f80fd5b83359250602084013561308e8161302c565b929592945050506040919091013590565b5f602082840312156130af575f80fd5b81356001600160e01b031981168114610b4c575f80fd5b5f805f606084860312156130d8575f80fd5b83356130e38161302c565b95602085013595506040909401359392505050565b5f805f6040848603121561310a575f80fd5b83356131158161302c565b9250602084013567ffffffffffffffff80821115613131575f80fd5b818601915086601f830112613144575f80fd5b813581811115613152575f80fd5b876020828501011115613163575f80fd5b6020830194508093505050509250925092565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610b4c6020830184613176565b5f602082840312156131c6575f80fd5b5035919050565b5f60c082840312156131dd575f80fd5b50919050565b5f805f6101a084860312156131f6575f80fd5b61320085856131cd565b925061320f8560c086016131cd565b91506101808401356132208161302c565b809150509250925092565b5f805f6060848603121561323d575f80fd5b505081359360208301359350604090920135919050565b80151581146116a2575f80fd5b5f8060408385031215613272575f80fd5b823561327d8161302c565b9150602083013561328d81613254565b809150509250929050565b5f805f606084860312156132aa575f80fd5b83356132b58161302c565b9250602084013561308e8161302c565b5f80604083850312156132d6575f80fd5b50508035926020909101359150565b5f602082840312156132f5575f80fd5b81356001600160c01b0381168114610b4c575f80fd5b5f806040838503121561331c575f80fd5b82359150602083013561328d8161302c565b5f806040838503121561333f575f80fd5b823561334a8161302c565b9150602083013561328d8161302c565b5f6020828403121561336a575f80fd5b8135610b4c8161302c565b5f815180845260208085019450602084015f5b838110156133a457815187529582019590820190600101613388565b509495945050505050565b602081525f6001600160c01b03808451166020840152806020850151166040840152506001600160a01b03604084015116606083015260608301516080830152608083015160a083015260a083015160e060c0840152613413610100840182613375565b905060c0840151601f198483030160e08501526134308282613375565b95945050505050565b5f805f806080858703121561344c575f80fd5b84356134578161302c565b935060208501356134678161302c565b93969395505050506040820135916060013590565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a9357610a9361347c565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff811182821017156134da576134da6134a3565b60405290565b6040805190810167ffffffffffffffff811182821017156134da576134da6134a3565b604051601f8201601f1916810167ffffffffffffffff8111828210171561352c5761352c6134a3565b604052919050565b67ffffffffffffffff811681146116a2575f80fd5b62ffffff811681146116a2575f80fd5b5f60c08284031215613569575f80fd5b6135716134b7565b825161357c8161302c565b8152602083015161358c81613534565b6020820152604083015161359f8161302c565b604082015260608301516135b281613549565b606082015260808301516135c58161302c565b608082015260a08301516135d881613549565b60a08201529392505050565b81810381811115610a9357610a9361347c565b5f82601f830112613606575f80fd5b8151602067ffffffffffffffff821115613622576136226134a3565b613630818360051b01613503565b82815260069290921b8401810191818101908684111561364e575f80fd5b8286015b848110156136a25760408189031215613669575f80fd5b6136716134e0565b81518060020b8114613681575f80fd5b81528185015161369081613534565b81860152835291830191604001613652565b509695505050505050565b5f80604083850312156136be575f80fd5b825167ffffffffffffffff808211156136d5575f80fd5b6136e1868387016135f7565b935060208501519150808211156136f6575f80fd5b50613703858286016135f7565b9150509250929050565b818382375f9101908152919050565b6001600160a01b0383168152604060208201525f6115d26040830184613176565b5f602080838503121561374e575f80fd5b825167ffffffffffffffff80821115613765575f80fd5b818501915085601f830112613778575f80fd5b81518181111561378a5761378a6134a3565b61379c601f8201601f19168501613503565b915080825286848285010111156137b1575f80fd5b808484018584015e5f90820190930192909252509392505050565b5f60c082840312156137dc575f80fd5b6137e46134b7565b82356137ef8161302c565b815260208301356137ff81613534565b602082015260408301356138128161302c565b6040820152606083013561382581613549565b606082015260808301356138388161302c565b608082015260a08301356135d881613549565b5f6020828403121561385b575f80fd5b8151610b4c81613254565b80356138718161302c565b6001600160a01b03908116835260208201359061388d82613534565b67ffffffffffffffff82166020850152604083013591506138ad8261302c565b90811660408401526060820135906138c482613549565b62ffffff91821660608501526080830135916138df8361302c565b918116608085015260a0830135916138f683613549565b80831660a08601525050505050565b61390f8183613866565b60e060c082018190525f9082015261010001919050565b6101a081016139358286613866565b61394260c0830185613866565b6001600160a01b038316610180830152949350505050565b5f6020828403121561396a575f80fd5b5051919050565b5f8060408385031215613982575f80fd5b505080516020909101519092909150565b634e487b7160e01b5f52603260045260245ffd5b5f606082840312156139b7575f80fd5b6040516060810181811067ffffffffffffffff821117156139da576139da6134a3565b60405282516139e88161302c565b815260208301516139f881613534565b60208201526040830151613a0b81613534565b60408201529392505050565b5f610140613a7f8385516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602084015160020b60c0840152604084015167ffffffffffffffff1660e08401526060909301516001600160a01b03166101008301525061012081018290525f918101919091526101600190565b5f7f80000000000000000000000000000000000000000000000000000000000000008203613afd57613afd61347c565b505f0390565b60c08101610a9382846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b8082028115828204841417610a9357610a9361347c565b8082018281125f831280158216821582161715613ba057613ba061347c565b505092915050565b8181035f831280158383131683831282161715613bc757613bc761347c565b5092915050565b5f8160020b627fffff198103613be657613be661347c565b5f0392915050565b5f82613c0857634e487b7160e01b5f52601260045260245ffd5b500490565b5f82518060208501845e5f92019182525091905056fea26469706673582212207a4415265707ad36c44a0233a660210ce0ccb1645a0ae4db87f19db5a06206f564736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "lockAcquired(address,bytes)": {
        "params": {
          "data": "The data that was passed to the call to lock"
        },
        "returns": {
          "_0": "Any data that you want to be returned from the lock call"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20TransferFailed()": [
        {
          "notice": "Thrown when an ERC20 transfer fails"
        }
      ],
      "NativeTransferFailed()": [
        {
          "notice": "Thrown when a native transfer fails"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "lockAcquired(address,bytes)": {
        "notice": "Called by the book manager on `msg.sender` when a lock is acquired"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4940,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "isOperator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4946,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4954,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 9860,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5931,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "_pools",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Pool)9571_storage)"
      },
      {
        "astId": 5937,
        "contract": "src/Rebalancer.sol:Rebalancer",
        "label": "bookPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_userDefinedValueType(BookId)3788,t_userDefinedValueType(BookId)3788)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_userDefinedValueType(OrderId)4229)dyn_storage": {
        "base": "t_userDefinedValueType(OrderId)4229",
        "encoding": "dynamic_array",
        "label": "OrderId[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStrategy)9850": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(Pool)9571_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IRebalancer.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)9571_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(BookId)3788,t_userDefinedValueType(BookId)3788)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(BookId)3788",
        "label": "mapping(BookId => BookId)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(BookId)3788"
      },
      "t_struct(Pool)9571_storage": {
        "encoding": "inplace",
        "label": "struct IRebalancer.Pool",
        "members": [
          {
            "astId": 9552,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "bookIdA",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(BookId)3788"
          },
          {
            "astId": 9555,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "bookIdB",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(BookId)3788"
          },
          {
            "astId": 9558,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "strategy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IStrategy)9850"
          },
          {
            "astId": 9560,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "reserveA",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9562,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "reserveB",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9566,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "orderListA",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_userDefinedValueType(OrderId)4229)dyn_storage"
          },
          {
            "astId": 9570,
            "contract": "src/Rebalancer.sol:Rebalancer",
            "label": "orderListB",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_userDefinedValueType(OrderId)4229)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(BookId)3788": {
        "encoding": "inplace",
        "label": "BookId",
        "numberOfBytes": "24"
      },
      "t_userDefinedValueType(OrderId)4229": {
        "encoding": "inplace",
        "label": "OrderId",
        "numberOfBytes": "32"
      }
    }
  }
}