{
  "address": "0x9bb7d556A4eB463b213135dF3184303cbDD52E1D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnFeeRate_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyOpened",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBookPair",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHook",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockAcquiredSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Slippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeB",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "canceledAmountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "canceledAmountB",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmountB",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collect",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookIdA",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "BookId",
          "name": "bookIdB",
          "type": "uint192"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "OperatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "_burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyB",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "_open",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "_rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "bookPair",
      "outputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountB",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Currency",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Currency",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getBookPairs",
      "outputs": [
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        },
        {
          "internalType": "BookId",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cancelable",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiquidityVault.Liquidity",
          "name": "liquidityA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cancelable",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILiquidityVault.Liquidity",
          "name": "liquidityB",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "BookId",
              "name": "bookIdA",
              "type": "uint192"
            },
            {
              "internalType": "BookId",
              "name": "bookIdB",
              "type": "uint192"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserveA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveB",
              "type": "uint256"
            },
            {
              "internalType": "OrderId[]",
              "name": "orderListA",
              "type": "uint256[]"
            },
            {
              "internalType": "OrderId[]",
              "name": "orderListB",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ILiquidityVault.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lockCaller",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "Currency",
              "name": "base",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "unitSize",
              "type": "uint64"
            },
            {
              "internalType": "Currency",
              "name": "quote",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "makerPolicy",
              "type": "uint24"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            },
            {
              "internalType": "FeePolicy",
              "name": "takerPolicy",
              "type": "uint24"
            }
          ],
          "internalType": "struct IBookManager.BookKey",
          "name": "bookKeyB",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "open",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbd8d242ff7ea2a6e7c29f7598b57c8b72f1f5a616248ac289716da491668147d",
  "receipt": {
    "to": null,
    "from": "0x4587dd6356d7293E5f10db4D853332BD5b218C0B",
    "contractAddress": "0x9bb7d556A4eB463b213135dF3184303cbDD52E1D",
    "transactionIndex": 0,
    "gasUsed": "4552425",
    "logsBloom": "0x
    "blockHash": "0x5359bed29a01818cec1db8673ee8f451be9c1e1b00e9253806fbf8eff4df0834",
    "transactionHash": "0xbd8d242ff7ea2a6e7c29f7598b57c8b72f1f5a616248ac289716da491668147d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6334623,
        "transactionHash": "0xbd8d242ff7ea2a6e7c29f7598b57c8b72f1f5a616248ac289716da491668147d",
        "address": "0x9bb7d556A4eB463b213135dF3184303cbDD52E1D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004587dd6356d7293e5f10db4d853332bd5b218c0b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5359bed29a01818cec1db8673ee8f451be9c1e1b00e9253806fbf8eff4df0834"
      }
    ],
    "blockNumber": 6334623,
    "cumulativeGasUsed": "4552425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4aD5Ed9E1436904624b6dB8B1BE31f36317C636",
    100,
    "Sonic Market Liquidity Vault",
    "SLV"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb08b08c607a06add251fc51587fdadf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyOpened\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBookPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHook\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockAcquiredSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Slippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeB\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canceledAmountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canceledAmountB\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmountB\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookIdA\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"BookId\",\"name\":\"bookIdB\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyB\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"_open\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"_rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"bookPair\",\"outputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountB\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBookPairs\",\"outputs\":[{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"},{\"internalType\":\"BookId\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelable\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityVault.Liquidity\",\"name\":\"liquidityA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelable\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityVault.Liquidity\",\"name\":\"liquidityB\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"BookId\",\"name\":\"bookIdA\",\"type\":\"uint192\"},{\"internalType\":\"BookId\",\"name\":\"bookIdB\",\"type\":\"uint192\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"OrderId[]\",\"name\":\"orderListA\",\"type\":\"uint256[]\"},{\"internalType\":\"OrderId[]\",\"name\":\"orderListB\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ILiquidityVault.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"unitSize\",\"type\":\"uint64\"},{\"internalType\":\"Currency\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"makerPolicy\",\"type\":\"uint24\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"},{\"internalType\":\"FeePolicy\",\"name\":\"takerPolicy\",\"type\":\"uint24\"}],\"internalType\":\"struct IBookManager.BookKey\",\"name\":\"bookKeyB\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"burn(bytes32,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity tokens to burn.\",\"key\":\"The key of the pool.\",\"minAmountA\":\"The amount of the first token to receive.\",\"minAmountB\":\"The minimum amount of the second token to receive.\"},\"returns\":{\"withdrawalA\":\"The amounts of the first and second tokens to receive.\"}},\"collect(address,address)\":{\"details\":\"Only the owner can collect fees.\",\"params\":{\"currency\":\"The currency to collect fees for.\",\"to\":\"The address to send the collected fees to.\"}},\"getBookPairs(bytes32)\":{\"params\":{\"key\":\"The key of the pool.\"},\"returns\":{\"_0\":\"The book ID for the first book.\",\"_1\":\"The book ID for the second book.\"}},\"getLiquidity(bytes32)\":{\"params\":{\"key\":\"The key of the pool.\"},\"returns\":{\"liquidityA\":\"The liquidity for the first token.\",\"liquidityB\":\"The liquidity for the second token.\"}},\"getPool(bytes32)\":{\"params\":{\"key\":\"The key of the pool.\"},\"returns\":{\"_0\":\"The pool.\"}},\"lockAcquired(address,bytes)\":{\"params\":{\"data\":\"The data that was passed to the call to lock\"},\"returns\":{\"_0\":\"Any data that you want to be returned from the lock call\"}},\"mint(bytes32,uint256,uint256,uint256)\":{\"params\":{\"amountA\":\"The amount of the first token.\",\"amountB\":\"The amount of the second token.\",\"key\":\"The key of the pool.\",\"minLpAmount\":\"The minimum amount of liquidity tokens to mint.\"},\"returns\":{\"mintAmount\":\"The amount of liquidity tokens minted.\"}},\"open((address,uint64,address,uint24,address,uint24),(address,uint64,address,uint24,address,uint24),bytes32,address)\":{\"params\":{\"bookKeyA\":\"The book key for the first book.\",\"bookKeyB\":\"The book key for the second book.\",\"salt\":\"The salt value.\",\"strategy\":\"The address of the strategy.\"},\"returns\":{\"_0\":\"The key of the opened pool.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rebalance(bytes32)\":{\"params\":{\"key\":\"The key of the pool.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"bookPair\":{\"params\":{\"bookId\":\"The book ID.\"},\"return\":\"The book pair.\",\"returns\":{\"_0\":\"The book pair.\"}},\"burnFeeRate\":{\"return\":\"The burn fee rate.\",\"returns\":{\"_0\":\"The burn fee rate.\"}},\"fees\":{\"params\":{\"currency\":\"The currency to check pending fees for\"},\"return\":\"The total amount of uncollected fees in the specified currency\",\"returns\":{\"_0\":\"The total amount of uncollected fees in the specified currency\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC20TransferFailed()\":[{\"notice\":\"Thrown when an ERC20 transfer fails\"}],\"NativeTransferFailed()\":[{\"notice\":\"Thrown when a native transfer fails\"}]},\"kind\":\"user\",\"methods\":{\"bookPair(uint192)\":{\"notice\":\"Retrieves the book pair for a specified book ID.\"},\"burn(bytes32,uint256,uint256,uint256)\":{\"notice\":\"Burns liquidity for the specified key.\"},\"burnFeeRate()\":{\"notice\":\"Retrieves the burn fee rate.\"},\"collect(address,address)\":{\"notice\":\"Collects the pending fees for a given currency.\"},\"fees(address)\":{\"notice\":\"Returns the amount of pending fees for a given currency that can be collected\"},\"getBookPairs(bytes32)\":{\"notice\":\"Retrieves the book pairs for a specified key.\"},\"getLiquidity(bytes32)\":{\"notice\":\"Retrieves the liquidity for a specified key.\"},\"getPool(bytes32)\":{\"notice\":\"Retrieves the pool for a specified key.\"},\"lockAcquired(address,bytes)\":{\"notice\":\"Called by the book manager on `msg.sender` when a lock is acquired\"},\"mint(bytes32,uint256,uint256,uint256)\":{\"notice\":\"Mints liquidity for the specified key.\"},\"open((address,uint64,address,uint24,address,uint24),(address,uint64,address,uint24,address,uint24),bytes32,address)\":{\"notice\":\"Opens a new pool with the specified parameters.\"},\"rebalance(bytes32)\":{\"notice\":\"Rebalances the pool for the specified key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LiquidityVault.sol\":\"LiquidityVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02caa0e5f7bade9a0d8ad6058467d641cb67697cd4678c7b1c170686bafe9128\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d86af5c7b10d03d08d63f33ade56ef89c99c25d6816526ed815a111d2796534\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4251fed1ac036ad28996501522371736318527d7bf2bf7d66fbd2769d6c4771b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuardTransient.sol)\\n\\npragma solidity ^0.8.24;\\n\\nimport {TransientSlot} from \\\"./TransientSlot.sol\\\";\\n\\n/**\\n * @dev Variant of {ReentrancyGuard} that uses transient storage.\\n *\\n * NOTE: This variant only works on networks where EIP-1153 is available.\\n *\\n * _Available since v5.1._\\n */\\nabstract contract ReentrancyGuardTransient {\\n    using TransientSlot for *;\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_reentrancyGuardEntered()) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\\n    }\\n}\\n\",\"keccak256\":\"0x534bf5c25d6003a8ce50b400d20fa460c03169ad7baa90d47a912917c36dfe2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/TransientSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/TransientSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/TransientSlot.js.\\n\\npragma solidity ^0.8.24;\\n\\n/**\\n * @dev Library for reading and writing value-types to specific transient storage slots.\\n *\\n * Transient slots are often used to store temporary values that are removed after the current transaction.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n *  * Example reading and writing values using transient storage:\\n * ```solidity\\n * contract Lock {\\n *     using TransientSlot for *;\\n *\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;\\n *\\n *     modifier locked() {\\n *         require(!_LOCK_SLOT.asBoolean().tload());\\n *\\n *         _LOCK_SLOT.asBoolean().tstore(true);\\n *         _;\\n *         _LOCK_SLOT.asBoolean().tstore(false);\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary TransientSlot {\\n    /**\\n     * @dev UDVT that represent a slot holding a address.\\n     */\\n    type AddressSlot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a AddressSlot.\\n     */\\n    function asAddress(bytes32 slot) internal pure returns (AddressSlot) {\\n        return AddressSlot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represent a slot holding a bool.\\n     */\\n    type BooleanSlot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a BooleanSlot.\\n     */\\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlot) {\\n        return BooleanSlot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represent a slot holding a bytes32.\\n     */\\n    type Bytes32Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Bytes32Slot.\\n     */\\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32Slot) {\\n        return Bytes32Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represent a slot holding a uint256.\\n     */\\n    type Uint256Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Uint256Slot.\\n     */\\n    function asUint256(bytes32 slot) internal pure returns (Uint256Slot) {\\n        return Uint256Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev UDVT that represent a slot holding a int256.\\n     */\\n    type Int256Slot is bytes32;\\n\\n    /**\\n     * @dev Cast an arbitrary slot to a Int256Slot.\\n     */\\n    function asInt256(bytes32 slot) internal pure returns (Int256Slot) {\\n        return Int256Slot.wrap(slot);\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(AddressSlot slot) internal view returns (address value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(AddressSlot slot, address value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(BooleanSlot slot) internal view returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(BooleanSlot slot, bool value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Bytes32Slot slot) internal view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Bytes32Slot slot, bytes32 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Uint256Slot slot) internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Uint256Slot slot, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n\\n    /**\\n     * @dev Load the value held at location `slot` in transient storage.\\n     */\\n    function tload(Int256Slot slot) internal view returns (int256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := tload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Store `value` at location `slot` in transient storage.\\n     */\\n    function tstore(Int256Slot slot, int256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            tstore(slot, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9303ef5a2beb555e52ce56598de205ce07ca8988fc67d073687c06cb8fc973d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnitSize();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unitSize The unit size of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unitSize,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param unit The order unit\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 unit, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param unit The order unit\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param unit The canceled unit\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param unit The claimed unit\\n     */\\n    event Claim(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    /**\\n     * @notice This structure represents a unique identifier for a book in the BookManager.\\n     * @param base The base currency of the book\\n     * @param unitSize The unit size of the book\\n     * @param quote The quote currency of the book\\n     * @param makerPolicy The maker fee policy of the book\\n     * @param hooks The hooks contract of the book\\n     * @param takerPolicy The taker fee policy of the book\\n     */\\n    struct BookKey {\\n        Currency base;\\n        uint64 unitSize;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    /**\\n     * @notice This structure represents a current status for an order in the BookManager.\\n     * @param provider The provider of the order\\n     * @param open The open unit of the order\\n     * @param claimable The claimable unit of the order\\n     */\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable unit\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Encodes a BookKey into a BookId\\n     * @param key The BookKey to encode\\n     * @return The encoded BookId\\n     */\\n    function encodeBookKey(BookKey calldata key) external pure returns (BookId);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    /**\\n     * @notice This structure represents the parameters for making an order.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param unit The unit for the order. Times key.unitSize to get actual bid amount.\\n     * @param provider The provider for the order. The limit order service provider address to collect fees.\\n     */\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 unit;\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for taking orders in the specified tick.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param maxUnit The max unit to take\\n     */\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxUnit;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for canceling an order.\\n     * @param id The order id for the order\\n     * @param toUnit The remaining open unit for the order after cancellation. Must not exceed the current open unit.\\n     */\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 toUnit;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xda8dffc751ac3554033e084919f1e431eb2585c80e1e30b9a0198366a8607086\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6baab4710fa674981395f428bd6550c4e288ac44a1a5d38c2a58fd67234d57e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenUnit The unit that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledUnit The unit that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedUnit The unit that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedUnit, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbff95e07debd7d51cb3aa79172fd3c31efb57cea1c03d21b5740a565198d8343\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILocker\\n * @notice Interface for the locker contract\\n */\\ninterface ILocker {\\n    /**\\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\\n     * @param data The data that was passed to the call to lock\\n     * @return Any data that you want to be returned from the lock call\\n     */\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x664833ea7804ad5cbbe89f5b36169c6a2c19ef577c1dfb9418ddea290ed19106\",\"license\":\"MIT\"},\"clober-dex/v2-core/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := and(hash, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f9ed99dfb9a5ce14c29359a5ad8b43de0c756e44b2e5f581e8ea6db7cacbeb\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(and(rate_, 0xffffff), MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, reverseFee);\\n    }\\n}\\n\",\"keccak256\":\"0xa945c8e3ced4dd6f7be34da0306de74d466bf1a6ea74de5c54672fb49234cfef\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                    sar(96, mul(add(24828157081833163892658089445524,\\n                        sar(96, mul(add(3273285459638523848632254066296,\\n                            x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Base conversion: mul `2**96 / (5**18 * 2**192)`.\\n            r := sdiv(p, 302231454903657293676544000000000000000000)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2dc502dd66a9e36e6c4bb8c4fb3d21120f9f0ff7a934dcfe21ec820cac72275\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := and(shr(40, id), 0xffffff)\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := and(shr(40, id), 0xffffff)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c384badc4971d774987c6f5bce9d578712c7469688735b3c1eafaf2e748fe6\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for *;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 1350587;\\n    uint256 internal constant MAX_PRICE = 4647684107270898330752324302845848816923571339324334;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990;\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357c;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624ea;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db5883;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b3;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074c;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a39;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7f;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f7;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea92604;\\n    uint256 private constant _R18 = 0x48a170391f7dc42;\\n    uint256 private constant _R19 = 0x149b34;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        unchecked {\\n            int24 tick = int24((int256(price).lnWad() * 42951820407860) / 2 ** 128);\\n            if (toPrice(Tick.wrap(tick)) > price) return Tick.wrap(tick - 1);\\n            return Tick.wrap(tick);\\n        }\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 96;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 96;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 96;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 96;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 96;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 96;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 96;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 96;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 96;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 96;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 96;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 96;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 96;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 96;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 96;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 96;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 96;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 96;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 96;\\n        }\\n        if (tickValue > 0) price = 0x1000000000000000000000000000000000000000000000000 / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 96, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = unit(uint64) * unitSize(uint64) < 2^96\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 96, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xffbe19efd2b2e4e1eee3ed15c9363f5c45d70a6058b0b85ec9199e34de3b6b9b\",\"license\":\"GPL-2.0-or-later\"},\"solmate/tokens/ERC6909.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC6909 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC6909.sol)\\nabstract contract ERC6909 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC6909 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(address => bool)) public isOperator;\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6909 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transfer(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        balanceOf[msg.sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, msg.sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (msg.sender != sender && !isOperator[sender][msg.sender]) {\\n            uint256 allowed = allowance[sender][msg.sender][id];\\n            if (allowed != type(uint256).max) allowance[sender][msg.sender][id] = allowed - amount;\\n        }\\n\\n        balanceOf[sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        allowance[msg.sender][spender][id] = amount;\\n\\n        emit Approval(msg.sender, spender, id, amount);\\n\\n        return true;\\n    }\\n\\n    function setOperator(address operator, bool approved) public virtual returns (bool) {\\n        isOperator[msg.sender][operator] = approved;\\n\\n        emit OperatorSet(msg.sender, operator, approved);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x0f632fb3; // ERC165 Interface ID for ERC6909\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, address(0), receiver, id, amount);\\n    }\\n\\n    function _burn(\\n        address sender,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[sender][id] -= amount;\\n\\n        emit Transfer(msg.sender, sender, address(0), id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x767ed60e11d739ed7eb9e10467eb0e0573293238b7a2a56f96b23f145297f1d2\",\"license\":\"MIT\"},\"solmate/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"},\"src/LiquidityVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Ownable2Step, Ownable} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ReentrancyGuardTransient} from \\\"@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {ILocker} from \\\"clober-dex/v2-core/interfaces/ILocker.sol\\\";\\nimport {BookId, BookIdLibrary} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\nimport {OrderId, OrderIdLibrary} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ILiquidityVault} from \\\"./interfaces/ILiquidityVault.sol\\\";\\nimport {IStrategy} from \\\"./interfaces/IStrategy.sol\\\";\\nimport {ERC6909Supply} from \\\"./libraries/ERC6909Supply.sol\\\";\\n\\ncontract LiquidityVault is\\n    ILiquidityVault,\\n    ILocker,\\n    Ownable2Step,\\n    ERC6909Supply,\\n    ReentrancyGuardTransient,\\n    Initializable,\\n    UUPSUpgradeable\\n{\\n    using BookIdLibrary for IBookManager.BookKey;\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using CurrencyLibrary for Currency;\\n    using OrderIdLibrary for OrderId;\\n    using TickLibrary for Tick;\\n    using FeePolicyLibrary for FeePolicy;\\n\\n    uint256 public constant RATE_PRECISION = 1e6;\\n\\n    IBookManager public immutable bookManager;\\n    uint256 public immutable burnFeeRate;\\n\\n    mapping(bytes32 key => Pool) private _pools;\\n    mapping(BookId => BookId) public bookPair;\\n    mapping(Currency => uint256) public fees;\\n    string public name;\\n    string public symbol;\\n\\n    modifier selfOnly() {\\n        if (msg.sender != address(this)) revert NotSelf();\\n        _;\\n    }\\n\\n    constructor(IBookManager bookManager_, uint256 burnFeeRate_, string memory name_, string memory symbol_)\\n        Ownable(msg.sender)\\n    {\\n        if (burnFeeRate_ >= RATE_PRECISION) revert InvalidRate();\\n        bookManager = bookManager_;\\n        burnFeeRate = burnFeeRate_;\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    function initialize(address initialOwner) external initializer {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function decimals(uint256) external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function getPool(bytes32 key) external view returns (Pool memory) {\\n        return _pools[key];\\n    }\\n\\n    function getBookPairs(bytes32 key) external view returns (BookId, BookId) {\\n        return (_pools[key].bookIdA, _pools[key].bookIdB);\\n    }\\n\\n    function getLiquidity(bytes32 key) public view returns (Liquidity memory liquidityA, Liquidity memory liquidityB) {\\n        Pool storage pool = _pools[key];\\n        liquidityA.reserve = pool.reserveA;\\n        liquidityB.reserve = pool.reserveB;\\n\\n        OrderId[] memory orderListA = pool.orderListA;\\n        OrderId[] memory orderListB = pool.orderListB;\\n\\n        if (orderListA.length > 0) {\\n            IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n            for (uint256 i; i < orderListA.length; ++i) {\\n                (uint256 cancelable, uint256 claimable) =\\n                    _getLiquidity(bookKeyA.makerPolicy, bookKeyA.unitSize, orderListA[i]);\\n                liquidityA.cancelable += cancelable;\\n                liquidityB.claimable += claimable;\\n            }\\n        }\\n        if (orderListB.length > 0) {\\n            IBookManager.BookKey memory bookKeyB = bookManager.getBookKey(pool.bookIdB);\\n            for (uint256 i; i < orderListB.length; ++i) {\\n                (uint256 cancelable, uint256 claimable) =\\n                    _getLiquidity(bookKeyB.makerPolicy, bookKeyB.unitSize, orderListB[i]);\\n                liquidityA.claimable += claimable;\\n                liquidityB.cancelable += cancelable;\\n            }\\n        }\\n    }\\n\\n    function _getLiquidity(FeePolicy makerPolicy, uint64 unitSize, OrderId orderId)\\n        internal\\n        view\\n        returns (uint256 cancelable, uint256 claimable)\\n    {\\n        IBookManager.OrderInfo memory orderInfo = bookManager.getOrder(orderId);\\n        cancelable = uint256(orderInfo.open) * unitSize;\\n        claimable = orderId.getTick().quoteToBase(uint256(orderInfo.claimable) * unitSize, false);\\n        if (makerPolicy.usesQuote()) {\\n            int256 fee = makerPolicy.calculateFee(cancelable, true);\\n            cancelable = uint256(int256(cancelable) + fee);\\n        } else {\\n            int256 fee = makerPolicy.calculateFee(claimable, false);\\n            claimable = uint256(int256(claimable) - fee);\\n        }\\n    }\\n\\n    function open(\\n        IBookManager.BookKey calldata bookKeyA,\\n        IBookManager.BookKey calldata bookKeyB,\\n        bytes32 salt,\\n        address strategy\\n    ) external nonReentrant returns (bytes32) {\\n        return abi.decode(\\n            bookManager.lock(\\n                address(this), abi.encodeWithSelector(this._open.selector, bookKeyA, bookKeyB, salt, strategy)\\n            ),\\n            (bytes32)\\n        );\\n    }\\n\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB, uint256 minLpAmount)\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256 mintAmount)\\n    {\\n        Pool storage pool = _pools[key];\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n\\n        uint256 supply = totalSupply[uint256(key)];\\n        if (supply == 0) {\\n            if (amountA == 0 || amountB == 0) revert InvalidAmount();\\n            // @dev If the decimals > 18, it will revert.\\n            uint256 complementA =\\n                bookKeyA.quote.isNative() ? 1 : 10 ** (18 - IERC20Metadata(Currency.unwrap(bookKeyA.quote)).decimals());\\n            uint256 complementB =\\n                bookKeyA.base.isNative() ? 1 : 10 ** (18 - IERC20Metadata(Currency.unwrap(bookKeyA.base)).decimals());\\n            uint256 _amountA = amountA * complementA;\\n            uint256 _amountB = amountB * complementB;\\n            mintAmount = _amountA > _amountB ? _amountA : _amountB;\\n        } else {\\n            (Liquidity memory liquidityA, Liquidity memory liquidityB) = getLiquidity(key);\\n            uint256 totalLiquidityA = liquidityA.reserve + liquidityA.claimable + liquidityA.cancelable;\\n            uint256 totalLiquidityB = liquidityB.reserve + liquidityB.claimable + liquidityB.cancelable;\\n\\n            if (totalLiquidityA == 0 && totalLiquidityB == 0) {\\n                mintAmount = amountA = amountB = 0;\\n            } else if (totalLiquidityA == 0) {\\n                mintAmount = FixedPointMathLib.mulDivDown(amountB, supply, totalLiquidityB);\\n                amountA = 0;\\n            } else if (totalLiquidityB == 0) {\\n                mintAmount = FixedPointMathLib.mulDivDown(amountA, supply, totalLiquidityA);\\n                amountB = 0;\\n            } else {\\n                uint256 mintA = FixedPointMathLib.mulDivDown(amountA, supply, totalLiquidityA);\\n                uint256 mintB = FixedPointMathLib.mulDivDown(amountB, supply, totalLiquidityB);\\n                if (mintA > mintB) {\\n                    mintAmount = mintB;\\n                    amountA = FixedPointMathLib.mulDivUp(totalLiquidityA, mintAmount, supply);\\n                } else {\\n                    mintAmount = mintA;\\n                    amountB = FixedPointMathLib.mulDivUp(totalLiquidityB, mintAmount, supply);\\n                }\\n            }\\n        }\\n        if (mintAmount < minLpAmount) revert Slippage();\\n\\n        uint256 refund = msg.value;\\n        if (bookKeyA.quote.isNative()) {\\n            if (msg.value < amountA) {\\n                revert InvalidValue();\\n            } else {\\n                unchecked {\\n                    refund -= amountA;\\n                }\\n            }\\n        } else {\\n            IERC20(Currency.unwrap(bookKeyA.quote)).safeTransferFrom(msg.sender, address(this), amountA);\\n        }\\n        if (bookKeyA.base.isNative()) {\\n            if (msg.value < amountB) {\\n                revert InvalidValue();\\n            } else {\\n                unchecked {\\n                    refund -= amountB;\\n                }\\n            }\\n        } else {\\n            IERC20(Currency.unwrap(bookKeyA.base)).safeTransferFrom(msg.sender, address(this), amountB);\\n        }\\n\\n        pool.reserveA += amountA;\\n        pool.reserveB += amountB;\\n\\n        _mint(msg.sender, uint256(key), mintAmount);\\n\\n        if (refund > 0) {\\n            CurrencyLibrary.NATIVE.transfer(msg.sender, refund);\\n        }\\n\\n        emit Mint(msg.sender, key, amountA, amountB, mintAmount);\\n        pool.strategy.mintHook(msg.sender, key, mintAmount, supply);\\n    }\\n\\n    function burn(bytes32 key, uint256 amount, uint256 minAmountA, uint256 minAmountB)\\n        external\\n        nonReentrant\\n        returns (uint256 withdrawalA, uint256 withdrawalB)\\n    {\\n        (withdrawalA, withdrawalB) = abi.decode(\\n            bookManager.lock(address(this), abi.encodeWithSelector(this._burn.selector, key, msg.sender, amount)),\\n            (uint256, uint256)\\n        );\\n        if (withdrawalA < minAmountA || withdrawalB < minAmountB) revert Slippage();\\n    }\\n\\n    function rebalance(bytes32 key) external nonReentrant {\\n        bookManager.lock(address(this), abi.encodeWithSelector(this._rebalance.selector, key));\\n    }\\n\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory) {\\n        if (msg.sender != address(bookManager)) revert InvalidLockAcquiredSender();\\n        if (lockCaller != address(this)) revert InvalidLockCaller();\\n\\n        (bool success, bytes memory returnData) = address(this).call(data);\\n        if (success) return returnData;\\n        if (returnData.length == 0) revert LockFailure();\\n        // if the call failed, bubble up the reason\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            revert(add(returnData, 32), mload(returnData))\\n        }\\n    }\\n\\n    function _open(\\n        IBookManager.BookKey calldata bookKeyA,\\n        IBookManager.BookKey calldata bookKeyB,\\n        bytes32 salt,\\n        address strategy\\n    ) public selfOnly returns (bytes32 key) {\\n        if (\\n            !(bookKeyA.quote.equals(bookKeyB.base) && bookKeyA.base.equals(bookKeyB.quote))\\n                || bookKeyA.quote.equals(bookKeyA.base)\\n        ) revert InvalidBookPair();\\n        if (address(bookKeyA.hooks) != address(0) || address(bookKeyB.hooks) != address(0)) revert InvalidHook();\\n        if (strategy == address(0)) revert InvalidStrategy();\\n\\n        BookId bookIdA = bookKeyA.toId();\\n        BookId bookIdB = bookKeyB.toId();\\n        if (!bookManager.isOpened(bookIdA)) bookManager.open(bookKeyA, \\\"\\\");\\n        if (!bookManager.isOpened(bookIdB)) bookManager.open(bookKeyB, \\\"\\\");\\n\\n        key = _encodeKey(bookIdA, bookIdB, salt);\\n        if (_pools[key].strategy != IStrategy(address(0))) revert AlreadyOpened();\\n\\n        _pools[key].bookIdA = bookIdA;\\n        _pools[key].bookIdB = bookIdB;\\n        _pools[key].strategy = IStrategy(strategy);\\n        bookPair[bookIdA] = bookIdB;\\n        bookPair[bookIdB] = bookIdA;\\n\\n        emit Open(key, bookIdA, bookIdB, salt, strategy);\\n    }\\n\\n    function _burn(bytes32 key, address user, uint256 burnAmount)\\n        public\\n        selfOnly\\n        returns (uint256 withdrawalA, uint256 withdrawalB)\\n    {\\n        Pool storage pool = _pools[key];\\n        uint256 supply = totalSupply[uint256(key)];\\n        _burn(user, uint256(key), burnAmount);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n\\n        _clearPool(key, pool, burnAmount, supply);\\n        pool.reserveA = _settleCurrency(bookKeyA.quote, pool.reserveA);\\n        pool.reserveB = _settleCurrency(bookKeyA.base, pool.reserveB);\\n\\n        (Liquidity memory liquidityA, Liquidity memory liquidityB) = getLiquidity(key);\\n\\n        withdrawalA = (liquidityA.reserve + liquidityA.claimable + liquidityA.cancelable) * burnAmount / supply;\\n        withdrawalB = (liquidityB.reserve + liquidityB.claimable + liquidityB.cancelable) * burnAmount / supply;\\n\\n        pool.reserveA -= withdrawalA;\\n        pool.reserveB -= withdrawalB;\\n\\n        uint256 feeA;\\n        uint256 feeB;\\n        if (withdrawalA > 0) {\\n            feeA = (withdrawalA * burnFeeRate + RATE_PRECISION - 1) / RATE_PRECISION;\\n            withdrawalA -= feeA;\\n            bookKeyA.quote.transfer(user, withdrawalA);\\n            fees[bookKeyA.quote] += feeA;\\n        }\\n        if (withdrawalB > 0) {\\n            feeB = (withdrawalB * burnFeeRate + RATE_PRECISION - 1) / RATE_PRECISION;\\n            withdrawalB -= feeB;\\n            bookKeyA.base.transfer(user, withdrawalB);\\n            fees[bookKeyA.base] += feeB;\\n        }\\n        emit Burn(user, key, burnAmount, withdrawalA, withdrawalB, feeA, feeB);\\n        pool.strategy.burnHook(msg.sender, key, burnAmount, supply);\\n    }\\n\\n    function _rebalance(bytes32 key) public selfOnly {\\n        Pool storage pool = _pools[key];\\n        uint256 reserveA = pool.reserveA;\\n        uint256 reserveB = pool.reserveB;\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(pool.bookIdA);\\n        IBookManager.BookKey memory bookKeyB = bookManager.getBookKey(pool.bookIdB);\\n\\n        // Compute allocation\\n        try pool.strategy.computeOrders(key) returns (\\n            IStrategy.Order[] memory liquidityA, IStrategy.Order[] memory liquidityB\\n        ) {\\n            if (liquidityA.length == 0 && liquidityB.length == 0) return;\\n            _clearPool(key, pool, 1, 1);\\n\\n            uint256 amountA = _setLiquidity(bookKeyA, liquidityA, pool.orderListA);\\n            uint256 amountB = _setLiquidity(bookKeyB, liquidityB, pool.orderListB);\\n\\n            pool.reserveA = _settleCurrency(bookKeyA.quote, reserveA);\\n            pool.reserveB = _settleCurrency(bookKeyA.base, reserveB);\\n\\n            pool.strategy.rebalanceHook(msg.sender, key, liquidityA, liquidityB, amountA, amountB);\\n            emit Rebalance(key);\\n        } catch {\\n            _clearPool(key, pool, 1, 1);\\n\\n            pool.reserveA = _settleCurrency(bookKeyA.quote, reserveA);\\n            pool.reserveB = _settleCurrency(bookKeyA.base, reserveB);\\n        }\\n    }\\n\\n    function _clearPool(bytes32 key, Pool storage pool, uint256 cancelNumerator, uint256 cancelDenominator) internal {\\n        (uint256 canceledAmountA, uint256 claimedAmountB) =\\n            _clearOrders(pool.orderListA, cancelNumerator, cancelDenominator);\\n        (uint256 canceledAmountB, uint256 claimedAmountA) =\\n            _clearOrders(pool.orderListB, cancelNumerator, cancelDenominator);\\n        emit Claim(key, claimedAmountA, claimedAmountB);\\n        emit Cancel(key, canceledAmountA, canceledAmountB);\\n    }\\n\\n    function _clearOrders(OrderId[] storage orderIds, uint256 cancelNumerator, uint256 cancelDenominator)\\n        internal\\n        returns (uint256 canceledAmount, uint256 claimedAmount)\\n    {\\n        OrderId[] memory mOrderIds = orderIds;\\n        for (uint256 i = 0; i < mOrderIds.length; ++i) {\\n            OrderId orderId = mOrderIds[i];\\n            IBookManager.OrderInfo memory orderInfo = bookManager.getOrder(orderId);\\n            if (orderInfo.claimable > 0) {\\n                claimedAmount += bookManager.claim(orderId, \\\"\\\");\\n            }\\n            if (orderInfo.open > 0) {\\n                canceledAmount += bookManager.cancel(\\n                    IBookManager.CancelParams({\\n                        id: orderId,\\n                        toUnit: (orderInfo.open * (cancelDenominator - cancelNumerator) / cancelDenominator).toUint64()\\n                    }),\\n                    \\\"\\\"\\n                );\\n            }\\n        }\\n        if (cancelDenominator == cancelNumerator) {\\n            assembly {\\n                sstore(orderIds.slot, 0)\\n            }\\n        }\\n    }\\n\\n    function _setLiquidity(\\n        IBookManager.BookKey memory bookKey,\\n        IStrategy.Order[] memory liquidity,\\n        OrderId[] storage emptyOrderIds\\n    ) internal returns (uint256 amount) {\\n        for (uint256 i = 0; i < liquidity.length; ++i) {\\n            if (liquidity[i].rawAmount == 0) continue;\\n            (OrderId orderId, uint256 quoteAmount) = bookManager.make(\\n                IBookManager.MakeParams({\\n                    key: bookKey,\\n                    tick: liquidity[i].tick,\\n                    unit: liquidity[i].rawAmount,\\n                    provider: address(0)\\n                }),\\n                \\\"\\\"\\n            );\\n            amount += quoteAmount;\\n            emptyOrderIds.push(orderId);\\n        }\\n    }\\n\\n    function _settleCurrency(Currency currency, uint256 liquidity) internal returns (uint256) {\\n        bookManager.settle(currency);\\n\\n        int256 delta = bookManager.getCurrencyDelta(address(this), currency);\\n        if (delta > 0) {\\n            bookManager.withdraw(currency, address(this), uint256(delta));\\n            liquidity += uint256(delta);\\n        } else if (delta < 0) {\\n            currency.transfer(address(bookManager), uint256(-delta));\\n            bookManager.settle(currency);\\n            liquidity -= uint256(-delta);\\n        }\\n        return liquidity;\\n    }\\n\\n    function _encodeKey(BookId bookIdA, BookId bookIdB, bytes32 salt) internal pure returns (bytes32) {\\n        if (BookId.unwrap(bookIdA) > BookId.unwrap(bookIdB)) (bookIdA, bookIdB) = (bookIdB, bookIdA);\\n        return keccak256(abi.encodePacked(bookIdA, bookIdB, salt));\\n    }\\n\\n    receive() external payable {}\\n\\n    function collect(Currency currency, address to) external onlyOwner {\\n        uint256 fee = fees[currency];\\n        fees[currency] = 0;\\n        currency.transfer(to, fee);\\n        emit Collect(currency, to, fee);\\n    }\\n}\\n\",\"keccak256\":\"0x40f33e021da9b0ba18b5e08d57ddc3a838a2629d36e0d1e361180a40bf0b063c\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/ILiquidityVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {OrderId} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\nimport {Currency} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\n\\ninterface ILiquidityVault {\\n    struct Pool {\\n        BookId bookIdA;\\n        BookId bookIdB;\\n        IStrategy strategy;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        OrderId[] orderListA;\\n        OrderId[] orderListB;\\n    }\\n\\n    error InvalidRate();\\n    error NotSelf();\\n    error InvalidHook();\\n    error InvalidStrategy();\\n    error InvalidBookPair();\\n    error AlreadyOpened();\\n    error InvalidLockAcquiredSender();\\n    error InvalidLockCaller();\\n    error LockFailure();\\n    error InvalidAmount();\\n    error InvalidValue();\\n    error Slippage();\\n\\n    event Open(bytes32 indexed key, BookId indexed bookIdA, BookId indexed bookIdB, bytes32 salt, address strategy);\\n    event Mint(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Burn(\\n        address indexed user,\\n        bytes32 indexed key,\\n        uint256 lpAmount,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 feeA,\\n        uint256 feeB\\n    );\\n    event Rebalance(bytes32 indexed key);\\n    event Claim(bytes32 indexed key, uint256 claimedAmountA, uint256 claimedAmountB);\\n    event Cancel(bytes32 indexed key, uint256 canceledAmountA, uint256 canceledAmountB);\\n    event Collect(Currency indexed currency, address indexed to, uint256 amount);\\n\\n    struct Liquidity {\\n        uint256 reserve;\\n        uint256 claimable;\\n        uint256 cancelable;\\n    }\\n\\n    /// @notice Retrieves the burn fee rate.\\n    /// @return The burn fee rate.\\n    function burnFeeRate() external view returns (uint256);\\n\\n    /// @notice Returns the amount of pending fees for a given currency that can be collected\\n    /// @param currency The currency to check pending fees for\\n    /// @return The total amount of uncollected fees in the specified currency\\n    function fees(Currency currency) external view returns (uint256);\\n\\n    /// @notice Retrieves the book pair for a specified book ID.\\n    /// @param bookId The book ID.\\n    /// @return The book pair.\\n    function bookPair(BookId bookId) external view returns (BookId);\\n\\n    /// @notice Retrieves the pool for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return The pool.\\n    function getPool(bytes32 key) external view returns (Pool memory);\\n\\n    /// @notice Retrieves the book pairs for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return bookIdA The book ID for the first book.\\n    /// @return bookIdB The book ID for the second book.\\n    function getBookPairs(bytes32 key) external view returns (BookId bookIdA, BookId bookIdB);\\n\\n    /// @notice Retrieves the liquidity for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return liquidityA The liquidity for the first token.\\n    /// @return liquidityB The liquidity for the second token.\\n    function getLiquidity(bytes32 key)\\n        external\\n        view\\n        returns (Liquidity memory liquidityA, Liquidity memory liquidityB);\\n\\n    /// @notice Opens a new pool with the specified parameters.\\n    /// @param bookKeyA The book key for the first book.\\n    /// @param bookKeyB The book key for the second book.\\n    /// @param salt The salt value.\\n    /// @param strategy The address of the strategy.\\n    /// @return key The key of the opened pool.\\n    function open(\\n        IBookManager.BookKey calldata bookKeyA,\\n        IBookManager.BookKey calldata bookKeyB,\\n        bytes32 salt,\\n        address strategy\\n    ) external returns (bytes32 key);\\n\\n    /// @notice Mints liquidity for the specified key.\\n    /// @param key The key of the pool.\\n    /// @param amountA The amount of the first token.\\n    /// @param amountB The amount of the second token.\\n    /// @param minLpAmount The minimum amount of liquidity tokens to mint.\\n    /// @return The amount of liquidity tokens minted.\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB, uint256 minLpAmount)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /// @notice Burns liquidity for the specified key.\\n    /// @param key The key of the pool.\\n    /// @param amount The amount of liquidity tokens to burn.\\n    /// @param minAmountA The amount of the first token to receive.\\n    /// @param minAmountB The minimum amount of the second token to receive.\\n    /// @return The amounts of the first and second tokens to receive.\\n    function burn(bytes32 key, uint256 amount, uint256 minAmountA, uint256 minAmountB)\\n        external\\n        returns (uint256, uint256);\\n\\n    /// @notice Rebalances the pool for the specified key.\\n    /// @param key The key of the pool.\\n    function rebalance(bytes32 key) external;\\n\\n    /// @notice Collects the pending fees for a given currency.\\n    /// @param currency The currency to collect fees for.\\n    /// @param to The address to send the collected fees to.\\n    /// @dev Only the owner can collect fees.\\n    function collect(Currency currency, address to) external;\\n}\\n\",\"keccak256\":\"0x1b7e92bcd0a466dd2eace67172dc650289b434e59735e9b24385ade86a64269c\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\n\\ninterface IStrategy {\\n    struct Order {\\n        Tick tick;\\n        uint64 rawAmount;\\n    }\\n\\n    /// @notice Retrieves the orders for a specified key.\\n    /// @param key The key of the pool.\\n    /// @return ordersA The orders for the first token.\\n    /// @return ordersB The orders for the second token.\\n    /// @dev Clears pool orders if an error occurs and retains current orders if the list is empty.\\n    function computeOrders(bytes32 key) external view returns (Order[] memory ordersA, Order[] memory ordersB);\\n\\n    /// @notice Hook that is called after minting.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param mintAmount The amount minted.\\n    /// @param lastTotalSupply The total supply before minting.\\n    function mintHook(address sender, bytes32 key, uint256 mintAmount, uint256 lastTotalSupply) external;\\n\\n    /// @notice Hook that is called after burning.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param burnAmount The amount burned.\\n    /// @param lastTotalSupply The total supply before burning.\\n    function burnHook(address sender, bytes32 key, uint256 burnAmount, uint256 lastTotalSupply) external;\\n\\n    /// @notice Hook that is called after rebalancing.\\n    /// @param sender The address of the sender.\\n    /// @param key The key of the pool.\\n    /// @param liquidityA The liquidity orders for the first token.\\n    /// @param liquidityB The liquidity orders for the second token.\\n    /// @param amountA The amount of the first token.\\n    /// @param amountB The amount of the second token.\\n    function rebalanceHook(\\n        address sender,\\n        bytes32 key,\\n        Order[] memory liquidityA,\\n        Order[] memory liquidityB,\\n        uint256 amountA,\\n        uint256 amountB\\n    ) external;\\n}\\n\",\"keccak256\":\"0x985206b3c2d3c586c80cdec9f692b23077a60ade97b6a1fd5099a3b02870fcde\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/ERC6909Supply.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC6909} from \\\"solmate/tokens/ERC6909.sol\\\";\\n\\nabstract contract ERC6909Supply is ERC6909 {\\n    mapping(uint256 => uint256) public totalSupply;\\n\\n    function _mint(address receiver, uint256 id, uint256 amount) internal virtual override {\\n        super._mint(receiver, id, amount);\\n        totalSupply[id] += amount;\\n    }\\n\\n    function _burn(address sender, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(sender, id, amount);\\n        totalSupply[id] -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x918de786bbc6556ce5bad8eef18ab3435eb2e2f39e256e84e68b4f985f4d0fba\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405230608052348015610013575f80fd5b50604051615481380380615481833981016040819052610032916101c0565b338061005757604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610060816100b9565b50620f4240831061008457604051636a43f8d160e01b815260040160405180910390fd5b6001600160a01b03841660a05260c083905260096100a283826102ca565b50600a6100af82826102ca565b5050505050610389565b600180546001600160a01b03191690556100d2816100d5565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610147575f80fd5b81516001600160401b038082111561016157610161610124565b604051601f8301601f19908116603f0116810190828211818310171561018957610189610124565b816040528381528660208588010111156101a1575f80fd5b8360208701602083015e5f602085830101528094505050505092915050565b5f805f80608085870312156101d3575f80fd5b84516001600160a01b03811681146101e9575f80fd5b6020860151604087015191955093506001600160401b038082111561020c575f80fd5b61021888838901610138565b9350606087015191508082111561022d575f80fd5b5061023a87828801610138565b91505092959194509250565b600181811c9082168061025a57607f821691505b60208210810361027857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102c557805f5260205f20601f840160051c810160208510156102a35750805b601f840160051c820191505b818110156102c2575f81556001016102af565b50505b505050565b81516001600160401b038111156102e3576102e3610124565b6102f7816102f18454610246565b8461027e565b602080601f83116001811461032a575f84156103135750858301515b5f19600386901b1c1916600185901b178555610381565b5f85815260208120601f198616915b8281101561035857888601518255948401946001909101908401610339565b508582101561037557878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805160a05160c05161500a6104775f395f81816104b801528181612095015261214301525f81816104090152818161093a015281816109d401528181610dae01528181611363015281816114430152818161159601528181611a4301528181611acf01528181611b5001528181611bdc01528181611f1f01528181612347015281816126c9015281816127df01528181612b0501528181612bb201528181612c6c01528181612ce301528181612d3b01528181612e03015281816134bc0152818161369401528181613774015261380901525f81816131b9015281816131e20152613365015261500a5ff3fe608060405260043610610279575f3560e01c806379ba50971161014b578063c4d66de8116100c6578063f3cbc88c1161007c578063fa6793d511610062578063fa6793d5146107fc578063faaebd2114610829578063fe99049a14610854575f80fd5b8063f3cbc88c146107b1578063f6c00927146107d0575f80fd5b8063e27ff0ad116100ac578063e27ff0ad14610756578063e30c397814610775578063f2fde38b14610792575f80fd5b8063c4d66de8146106d7578063c630ed7d146106f6575f80fd5b8063a12ef25e1161011b578063ad3cb1cc11610101578063ad3cb1cc1461062b578063b6363cf214610673578063bd85b039146106ac575f80fd5b8063a12ef25e146105ed578063a1d5f1311461060c575f80fd5b806379ba50971461055d5780638da5cb5b1461057157806395d89b411461058d578063998ff4ef146105a1575f80fd5b80632b3ba681116101f5578063509bf42a116101ab578063558a729711610191578063558a7297146104ee578063598af9e71461050d578063715018a614610549575f80fd5b8063509bf42a146104a757806352d1902d146104da575f80fd5b80633f47e662116101db5780633f47e66214610443578063426a8493146104755780634f1ef28614610494575f80fd5b80632b3ba681146103e25780633f322bc9146103f8575f80fd5b8063095bcdb61161024a5780630a31b953116102305780630a31b9531461037057806315c7afb4146103a45780631b022ec8146103c3575f80fd5b8063095bcdb61461033e57806309cb66c41461035d575f80fd5b8062fdd58e1461028457806301ffc9a7146102cd578063022dd4ef146102fc57806306fdde031461031d575f80fd5b3661028057005b5f80fd5b34801561028f575f80fd5b506102ba61029e366004614164565b600360209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102d8575f80fd5b506102ec6102e736600461418e565b610873565b60405190151581526020016102c4565b348015610307575f80fd5b5061031b6103163660046141b5565b6108db565b005b348015610328575f80fd5b50610331610c2f565b6040516102c491906141fa565b348015610349575f80fd5b506102ec61035836600461420c565b610cbb565b6102ba61036b36600461423e565b610d75565b34801561037b575f80fd5b5061038f61038a36600461423e565b6112d5565b604080519283526020830191909152016102c4565b3480156103af575f80fd5b506103316103be36600461426d565b611436565b3480156103ce575f80fd5b5061031b6103dd3660046141b5565b61158c565b3480156103ed575f80fd5b506102ba620f424081565b348015610403575f80fd5b5061042b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c4565b34801561044e575f80fd5b5061046361045d3660046141b5565b50601290565b60405160ff90911681526020016102c4565b348015610480575f80fd5b506102ec61048f36600461420c565b611670565b61031b6104a23660046143a3565b6116d4565b3480156104b2575f80fd5b506102ba7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e5575f80fd5b506102ba6116f3565b3480156104f9575f80fd5b506102ec61050836600461443d565b611721565b348015610518575f80fd5b506102ba610527366004614474565b600460209081525f938452604080852082529284528284209052825290205481565b348015610554575f80fd5b5061031b611790565b348015610568575f80fd5b5061031b6117a3565b34801561057c575f80fd5b505f546001600160a01b031661042b565b348015610598575f80fd5b506103316117e9565b3480156105ac575f80fd5b506105d56105bb3660046144b2565b60076020525f90815260409020546001600160c01b031681565b6040516001600160c01b0390911681526020016102c4565b3480156105f8575f80fd5b5061031b6106073660046144d8565b6117f6565b348015610617575f80fd5b506102ba61062636600461451a565b611878565b348015610636575f80fd5b506103316040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561067e575f80fd5b506102ec61068d3660046144d8565b600260209081525f928352604080842090915290825290205460ff1681565b3480156106b7575f80fd5b506102ba6106c63660046141b5565b60056020525f908152604090205481565b3480156106e2575f80fd5b5061031b6106f136600461456b565b611d7c565b348015610701575f80fd5b506107366107103660046141b5565b5f90815260066020526040902080546001909101546001600160c01b0391821692911690565b604080516001600160c01b039384168152929091166020830152016102c4565b348015610761575f80fd5b5061038f610770366004614586565b611eb6565b348015610780575f80fd5b506001546001600160a01b031661042b565b34801561079d575f80fd5b5061031b6107ac36600461456b565b6122cc565b3480156107bc575f80fd5b506102ba6107cb36600461451a565b61233c565b3480156107db575f80fd5b506107ef6107ea3660046141b5565b612439565b6040516102c491906145e4565b348015610807575f80fd5b5061081b6108163660046141b5565b61259a565b6040516102c4929190614665565b348015610834575f80fd5b506102ba61084336600461456b565b60086020525f908152604090205481565b34801561085f575f80fd5b506102ec61086e36600461469e565b6128c3565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108d557507f0f632fb3000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b3330146108fb576040516314e1dbf760e11b815260040160405180910390fd5b5f81815260066020526040808220600381015460048083015483549451639b22917d60e01b81526001600160c01b0390951691850191909152919390927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610987573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ab9190614706565b6001850154604051639b22917d60e01b81526001600160c01b0390911660048201529091505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610a21573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a459190614706565b60028601546040517f3b93fabc000000000000000000000000000000000000000000000000000000008152600481018990529192506001600160a01b031690633b93fabc906024015f60405180830381865afa925050508015610ac957506040513d5f823e601f3d908101601f19168201604052610ac69190810190614847565b60015b610b0357610ada8686600180612a34565b610ae8826040015185612ae4565b60038601558151610af99084612ae4565b6004860155610c26565b8151158015610b1157508051155b15610b20575050505050505050565b610b2d8888600180612a34565b5f610b3c85848a600501612dc4565b90505f610b4d85848b600601612dc4565b9050610b5d866040015189612ae4565b60038a01558551610b6e9088612ae4565b6004808b019190915560028a01546040517f4424d7f50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691634424d7f591610bca9133918f918a918a918a918a91016148ee565b5f604051808303815f87803b158015610be1575f80fd5b505af1158015610bf3573d5f803e3d5ffd5b50506040518c92507f37f8042257f6b4d65b9614deb7792e5b374db2fdcd1983bf8a1247a8a788af5c91505f90a2505050505b50505050505b50565b60098054610c3c9061493d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c689061493d565b8015610cb35780601f10610c8a57610100808354040283529160200191610cb3565b820191905f5260205f20905b815481529060010190602001808311610c9657829003601f168201915b505050505081565b335f908152600360209081526040808320858452909152812080548391908390610ce6908490614983565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290610d1d908490614996565b909155505060408051338082526020820185905285926001600160a01b038816927f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a45060015b9392505050565b5f610d7e612f33565b5f8581526006602052604080822080549151639b22917d60e01b81526001600160c01b03909216600483015291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610dfb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e1f9190614706565b5f88815260056020526040812054919250819003610fdc57861580610e42575085155b15610e79576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201515f906001600160a01b031615610f0d5782604001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ece573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ef291906149a9565b610efd9060126149c9565b610f0890600a614ac2565b610f10565b60015b83519091505f906001600160a01b031615610fa357835f01516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f64573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f8891906149a9565b610f939060126149c9565b610f9e90600a614ac2565b610fa6565b60015b90505f610fb3838b614ad0565b90505f610fc0838b614ad0565b9050808211610fcf5780610fd1565b815b9750505050506110de565b5f80610fe78a61259a565b915091505f82604001518360200151845f01516110049190614996565b61100e9190614996565b90505f82604001518360200151845f01516110299190614996565b6110339190614996565b905081158015611041575080155b15611054575f9950899a508a97506110d9565b815f03611070576110668a8683612fb9565b97505f9a506110d9565b805f0361108c576110828b8684612fb9565b97505f99506110d9565b5f6110988c8785612fb9565b90505f6110a68c8885612fb9565b9050808211156110c5578099506110be848b89612fd4565b9c506110d6565b8199506110d3838b89612fd4565b9b505b50505b505050505b848410156110ff576040516307dd37f760e41b815260040160405180910390fd5b604082015134906001600160a01b031661113c578734101561113457604051632a9ffab760e21b815260040160405180910390fd5b879003611156565b6040830151611156906001600160a01b031633308b612ff7565b82516001600160a01b031661118e578634101561118657604051632a9ffab760e21b815260040160405180910390fd5b8690036111a5565b82516111a5906001600160a01b031633308a612ff7565b87846003015f8282546111b89190614996565b9250508190555086846004015f8282546111d29190614996565b909155506111e39050338a87613070565b80156111f4576111f45f33836130a2565b6040805189815260208101899052908101869052899033907f1d43dbd7e59f8c9371169f5c49c01e100227d9ee5f5fe54665cf10e35042bb729060600160405180910390a360028401546040517fa3a36f55000000000000000000000000000000000000000000000000000000008152336004820152602481018b905260448101879052606481018490526001600160a01b039091169063a3a36f55906084015f604051808303815f87803b1580156112ab575f80fd5b505af11580156112bd573d5f803e3d5ffd5b50505050505050506112cd613184565b949350505050565b5f806112df612f33565b6040805160248101889052336044820152606480820188905282518083039091018152608490910182526020810180516001600160e01b03167fe27ff0ad0000000000000000000000000000000000000000000000000000000017905290517f9ca179980000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca17998916113a0913091600401614ae7565b5f604051808303815f875af11580156113bb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113e29190810190614b08565b8060200190518101906113f59190614b7d565b90925090508382108061140757508281105b15611425576040516307dd37f760e41b815260040160405180910390fd5b61142d613184565b94509492505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461149a576040517f4bd37f4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841630146114dc576040517f66a7598c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80306001600160a01b031685856040516114f8929190614b9f565b5f604051808303815f865af19150503d805f8114611531576040519150601f19603f3d011682016040523d82523d5f602084013e611536565b606091505b5091509150811561154a579150610d6e9050565b80515f03611584576040517fa40afa3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201fd5b611594612f33565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca179983063022dd4ef60e01b846040516024016115df91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b90921682526116259291600401614ae7565b5f604051808303815f875af1158015611640573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116679190810190614b08565b50610c2c613184565b335f8181526004602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a790610d629087815260200190565b6116dc6131ae565b6116e582613265565b6116ef828261326d565b5050565b5f6116fc61335a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b335f8181526002602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b6117986133a3565b6117a15f6133cf565b565b60015433906001600160a01b031681146117e05760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c2c816133cf565b600a8054610c3c9061493d565b6117fe6133a3565b6001600160a01b0382165f8181526008602052604081208054919055906118269083836130a2565b816001600160a01b0316836001600160a01b03167f1314fd112a381beea61539dbd21ec04afcff2662ac7d1b83273aade1f53d1b978360405161186b91815260200190565b60405180910390a3505050565b5f333014611899576040516314e1dbf760e11b815260040160405180910390fd5b6118ca6118a9602086018661456b565b6118b9606088016040890161456b565b6001600160a01b0391821691161490565b80156118f157506118f16118e4606086016040870161456b565b6118b9602088018861456b565b158061190857506119086118a9602087018761456b565b1561193f576040517f27a4015200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61195060a087016080880161456b565b6001600160a01b031614158061197e57505f61197260a086016080870161456b565b6001600160a01b031614155b156119b5576040517f9c9d882300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166119f5576040517f4e236e9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611a0d611a0836889003880188614bae565b6133e8565b90505f611a22611a0836889003880188614bae565b604051632ad7b51960e11b81526001600160c01b03841660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611a90573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ab49190614c2d565b611b325760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190611b04908a90600401614ce7565b5f604051808303815f87803b158015611b1b575f80fd5b505af1158015611b2d573d5f803e3d5ffd5b505050505b604051632ad7b51960e11b81526001600160c01b03821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611b9d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc19190614c2d565b611c3f5760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190611c11908990600401614ce7565b5f604051808303815f87803b158015611c28575f80fd5b505af1158015611c3a573d5f803e3d5ffd5b505050505b611c4a828287613423565b5f818152600660205260409020600201549093506001600160a01b031615611c9e576040517f1da42b2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83815260066020908152604080832080546001600160c01b038781167fffffffffffffffff0000000000000000000000000000000000000000000000009283168117845560018401805492891692841683179055600290930180546001600160a01b038c166001600160a01b03199091168117909155838752600786528487208054841683179055818752958490208054909216831790915582518a8152938401949094529186917f66d8f0c63665a9bd1357e5d422d5f538805b225f260974cb408a66635040ec6c910160405180910390a45050949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015611dc65750825b90505f8267ffffffffffffffff166001148015611de25750303b155b905081158015611df0575080155b15611e27576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611e5b57845468ff00000000000000001916680100000000000000001785555b611e64866133cf565b8315610c2657845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b5f80333014611ed8576040516314e1dbf760e11b815260040160405180910390fd5b5f858152600660209081526040808320600590925290912054611efc86888761348f565b8154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611f6c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f909190614706565b9050611f9e88848885612a34565b611fb081604001518460030154612ae4565b600384015580516004840154611fc69190612ae4565b60048401555f80611fd68a61259a565b91509150838883604001518460200151855f0151611ff49190614996565b611ffe9190614996565b6120089190614ad0565b6120129190614d08565b9650838882604001518360200151845f015161202e9190614996565b6120389190614996565b6120429190614ad0565b61204c9190614d08565b955086856003015f8282546120619190614983565b9250508190555085856004015f82825461207b9190614983565b909155505f905080881561213157620f42406001816120ba7f00000000000000000000000000000000000000000000000000000000000000008d614ad0565b6120c49190614996565b6120ce9190614983565b6120d89190614d08565b91506120e4828a614983565b6040860151909950612100906001600160a01b03168c8b6130a2565b6040808601516001600160a01b03165f9081526008602052908120805484929061212b908490614996565b90915550505b87156121d957620f42406001816121687f00000000000000000000000000000000000000000000000000000000000000008c614ad0565b6121729190614996565b61217c9190614983565b6121869190614d08565b90506121928189614983565b85519098506121ab906001600160a01b03168c8a6130a2565b84516001600160a01b03165f90815260086020526040812080548392906121d3908490614996565b90915550505b604080518b8152602081018b905290810189905260608101839052608081018290528c906001600160a01b038d16907f7825ad5cf3aafe81da61bbb75737444e6d77278cb110bb9bfa3ee809f1fb64b99060a00160405180910390a360028701546040517fdb7c74b6000000000000000000000000000000000000000000000000000000008152336004820152602481018e9052604481018c9052606481018890526001600160a01b039091169063db7c74b6906084015f604051808303815f87803b1580156122a7575f80fd5b505af11580156122b9573d5f803e3d5ffd5b5050505050505050505050935093915050565b6122d46133a3565b600180546001600160a01b0383166001600160a01b031990911681179091556123045f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f612345612f33565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca179983063a1d5f13160e01b888888886040516024016123949493929190614d27565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b90921682526123da9291600401614ae7565b5f604051808303815f875af11580156123f5573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261241c9190810190614b08565b80602001905181019061242f9190614d63565b90506112cd613184565b61248f6040518060e001604052805f6001600160c01b031681526020015f6001600160c01b031681526020015f6001600160a01b031681526020015f81526020015f815260200160608152602001606081525090565b5f82815260066020908152604091829020825160e08101845281546001600160c01b0390811682526001830154168184015260028201546001600160a01b03168185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561253457602002820191905f5260205f20905b815481526020019060010190808311612520575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561258a57602002820191905f5260205f20905b815481526020019060010190808311612576575b5050505050815250509050919050565b6125bb60405180606001604052805f81526020015f81526020015f81525090565b6125dc60405180606001604052805f81526020015f81526020015f81525090565b5f838152600660209081526040808320600381015486526004810154855260058101805483518186028101860190945280845291949390919083018282801561264257602002820191905f5260205f20905b81548152602001906001019080831161262e575b505050505090505f8260060180548060200260200160405190810160405280929190818152602001828054801561269657602002820191905f5260205f20905b815481526020019060010190808311612682575b505050505090505f825111156127b2578254604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015612716573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061273a9190614706565b90505f5b83518110156127af575f806127758460600151856020015188868151811061276857612768614d7a565b60200260200101516134b7565b91509150818960400181815161278b9190614996565b9052506020880180518291906127a2908390614996565b905250505060010161273e565b50505b8051156128bb576001830154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa15801561282c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128509190614706565b90505f5b82518110156128b8575f8061287e8460600151856020015187868151811061276857612768614d7a565b9150915080896020018181516128949190614996565b9052506040880180518391906128ab908390614996565b9052505050600101612854565b50505b505050915091565b5f336001600160a01b0386161480159061290057506001600160a01b0385165f90815260026020908152604080832033845290915290205460ff16155b15612970576001600160a01b0385165f90815260046020908152604080832033845282528083208684529091529020545f19811461296e576129428382614983565b6001600160a01b0387165f90815260046020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f908152600360209081526040808320868452909152812080548492906129a2908490614983565b90915550506001600160a01b0384165f908152600360209081526040808320868452909152812080548492906129d9908490614996565b9091555050604080513381526020810184905284916001600160a01b0380881692908916917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859910160405180910390a4506001949350505050565b5f80612a44856005018585613616565b915091505f80612a58876006018787613616565b91509150877f1c29b938e5c165e4f17dcbaf854af84a6c529c3f0face137b12bda74606cca9e8285604051612a97929190918252602082015260400190565b60405180910390a2604080518581526020810184905289917f5721685080049ebad55f69ed0f4bf84a11d57cd2050e67986deab2323a9b2103910160405180910390a25050505050505050565b604051636a256b2960e01b81526001600160a01b0383811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303815f875af1158015612b4d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b719190614d63565b506040517f9611cf6c0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690639611cf6c90604401602060405180830381865afa158015612bf9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614d63565b90505f811315612cd6576040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152306024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed12906064015f604051808303815f87803b158015612cad575f80fd5b505af1158015612cbf573d5f803e3d5ffd5b505050508083612ccf9190614996565b9250612dbc565b5f811215612dbc57612d1c7f0000000000000000000000000000000000000000000000000000000000000000612d0b83614d8e565b6001600160a01b03871691906130a2565b604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303815f875af1158015612d81573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612da59190614d63565b50612daf81614d8e565b612db99084614983565b92505b509092915050565b5f805b8351811015612f2b57838181518110612de257612de2614d7a565b60200260200101516020015167ffffffffffffffff165f0315612f23575f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dbef48860405180608001604052808a8152602001898781518110612e5357612e53614d7a565b60200260200101515f015160020b8152602001898781518110612e7857612e78614d7a565b60200260200101516020015167ffffffffffffffff1681526020015f6001600160a01b03168152506040518263ffffffff1660e01b8152600401612ebc9190614dc4565b60408051808303815f875af1158015612ed7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612efb9190614b7d565b9092509050612f0a8185614996565b85546001810187555f8781526020902001929092555091505b600101612dc7565b509392505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c15612f8c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117a160017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005b9061392f565b5f825f190484118302158202612fcd575f80fd5b5091020490565b5f825f190484118302158202612fe8575f80fd5b50910281810615159190040190565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905261306a908590613936565b50505050565b61307b8383836139bb565b5f8281526005602052604081208054839290613098908490614996565b9091555050505050565b5f6001600160a01b0384166130f7575f805f8085875af19050806130f2576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61306a565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f51141617169150508061306a576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117a15f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00612fb3565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061324757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661323b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156117a15760405163703e46dd60e11b815260040160405180910390fd5b610c2c6133a3565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156132c7575060408051601f3d908101601f191682019092526132c491810190614d63565b60015b6132ef57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016117d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461334b576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016117d7565b6133558383613a40565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117a15760405163703e46dd60e11b815260040160405180910390fd5b5f546001600160a01b031633146117a15760405163118cdaa760e01b81523360048201526024016117d7565b600180546001600160a01b0319169055610c2c81613a95565b5f80826040516020016133fb9190614e7a565b60408051601f1981840301815291905280516020909101206001600160c01b03169392505050565b5f826001600160c01b0316846001600160c01b03161115613442579192915b6040805167ffffffffffffffff1986831b811660208301529185901b9091166038820152605081018390526070016040516020818303038152906040528051906020012090509392505050565b61349a838383613ae4565b5f8281526005602052604081208054839290613098908490614983565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241856040518263ffffffff1660e01b815260040161350891815260200190565b606060405180830381865afa158015613523573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135479190614ee1565b90508467ffffffffffffffff16816020015167ffffffffffffffff1661356d9190614ad0565b92506135b08567ffffffffffffffff16826040015167ffffffffffffffff166135969190614ad0565b5f6135a68760281c62ffffff1690565b60020b9190613b60565b91506135c18662ffffff1660171c90565b156135ec575f6135d862ffffff8816856001613b82565b90506135e48185614f51565b93505061360d565b5f6135fd62ffffff88168483613b82565b90506136098184614f78565b9250505b50935093915050565b5f805f8580548060200260200160405190810160405280929190818152602001828054801561366257602002820191905f5260205f20905b81548152602001906001019080831161364e575b505050505090505f5b815181101561391c575f82828151811061368757613687614d7a565b602002602001015190505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241836040518263ffffffff1660e01b81526004016136e091815260200190565b606060405180830381865afa1580156136fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061371f9190614ee1565b604081015190915067ffffffffffffffff16156137f357604080517f38926b6d0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091525f60448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338926b6d906064016020604051808303815f875af11580156137c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137e69190614d63565b6137f09086614996565b94505b602081015167ffffffffffffffff1615613912577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314d6a9eb604051806040016040528085815260200161387f8b8d8d6138579190614983565b876020015167ffffffffffffffff166138709190614ad0565b61387a9190614d08565b613c02565b67ffffffffffffffff9081169091526040516001600160e01b031960e085901b16815282516004820152602090920151166024820152606060448201525f60648201526084016020604051808303815f875af11580156138e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906139059190614d63565b61390f9087614996565b95505b505060010161366b565b5084840361360d57505f90945593915050565b80825d5050565b5f8060205f8451602086015f885af180613955576040513d5f823e3d81fd5b50505f513d9150811561396c578060011415613979565b6001600160a01b0384163b155b1561306a576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016117d7565b6001600160a01b0383165f908152600360209081526040808320858452909152812080548392906139ed908490614996565b9091555050604080513381526020810183905283916001600160a01b038616915f917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a4505050565b613a4982613c55565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115613a8d576133558282613ccb565b6116ef613d3d565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0383165f90815260036020908152604080832085845290915281208054839290613b16908490614983565b9091555050604080513381526020810183905283915f916001600160a01b038716917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac7288599101613a33565b5f6112cd606084901b613b758660020b613d75565b8082061515851691040190565b5f6207a11f19627fffff851601600281900b82128281613ba457825f03613ba6565b825b62ffffff1690505f613bdf613bbb8389614ad0565b620f424088613bd1578581830615151691040190565b808206151586151691040190565b905082613bf457613bef81614d8e565b613bf6565b805b98975050505050505050565b5f67ffffffffffffffff821115613c5157604080517f6dfcc6500000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016117d7565b5090565b806001600160a01b03163b5f03613c8a57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016117d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051613ce79190614f9e565b5f60405180830381855af49150503d805f8114613d1f576040519150601f19603f3d011682016040523d82523d5f602084013e613d24565b606091505b5091509150613d3485838361403d565b95945050505050565b34156117a1576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f613d7f826140b2565b815f600282900b8113613d925781613d9b565b613d9b82614fb4565b62ffffff8116915060011615613dbf576bfff97272373d413259a469909250613dd0565b6c0100000000000000000000000092505b6002811615613def5760606bfff2e50f5f656932ef12357c8402901c92505b6004811615613e0e5760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615613e2d5760606bffcb9843d60f6159c9db58838402901c92505b6010811615613e4c5760606bff973b41fa98c081472e68968402901c92505b6020811615613e6b5760606bff2ea16466c96a3843ec78b38402901c92505b6040811615613e8a5760606bfe5dee046a99a2a811c461f18402901c92505b6080811615613ea95760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615613ec95760606bf987a7253ac413176f2b074c8402901c92505b610200811615613ee95760606bf3392b0822b70005940c7a398402901c92505b610400811615613f095760606be7159475a2c29b7443b29c7f8402901c92505b610800811615613f295760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615613f495760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615613f695760606b70d869a156d2a1b890bb3df68402901c92505b614000811615613f895760606b31be135f97d08fd9812315058402901c92505b618000811615613fa95760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615613fc95760606a5d6af8dedb81196699c3298402901c92505b62020000811615613fe8576060692216e584f5fa1ea926048402901c92505b6204000081161561400557606067048a170391f7dc428402901c92505b5f8260020b131561403657614033837801000000000000000000000000000000000000000000000000614d08565b92505b5050919050565b6060826140525761404d8261410e565b610d6e565b815115801561406957506001600160a01b0384163b155b156140ab576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016117d7565b5080610d6e565b6207ffff600282900b13806140d757506140ce6207ffff614fb4565b60020b8160020b125b15610c2c576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80511561411e5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381168114610c2c575f80fd5b5f8060408385031215614175575f80fd5b823561418081614150565b946020939093013593505050565b5f6020828403121561419e575f80fd5b81356001600160e01b031981168114610d6e575f80fd5b5f602082840312156141c5575f80fd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610d6e60208301846141cc565b5f805f6060848603121561421e575f80fd5b833561422981614150565b95602085013595506040909401359392505050565b5f805f8060808587031215614251575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f6040848603121561427f575f80fd5b833561428a81614150565b9250602084013567ffffffffffffffff808211156142a6575f80fd5b818601915086601f8301126142b9575f80fd5b8135818111156142c7575f80fd5b8760208285010111156142d8575f80fd5b6020830194508093505050509250925092565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff81118282101715614322576143226142eb565b60405290565b6040805190810167ffffffffffffffff81118282101715614322576143226142eb565b604051601f8201601f1916810167ffffffffffffffff81118282101715614374576143746142eb565b604052919050565b5f67ffffffffffffffff821115614395576143956142eb565b50601f01601f191660200190565b5f80604083850312156143b4575f80fd5b82356143bf81614150565b9150602083013567ffffffffffffffff8111156143da575f80fd5b8301601f810185136143ea575f80fd5b80356143fd6143f88261437c565b61434b565b818152866020838501011115614411575f80fd5b816020840160208301375f602083830101528093505050509250929050565b8015158114610c2c575f80fd5b5f806040838503121561444e575f80fd5b823561445981614150565b9150602083013561446981614430565b809150509250929050565b5f805f60608486031215614486575f80fd5b833561449181614150565b925060208401356144a181614150565b929592945050506040919091013590565b5f602082840312156144c2575f80fd5b81356001600160c01b0381168114610d6e575f80fd5b5f80604083850312156144e9575f80fd5b82356144f481614150565b9150602083013561446981614150565b5f60c08284031215614514575f80fd5b50919050565b5f805f806101c0858703121561452e575f80fd5b6145388686614504565b93506145478660c08701614504565b925061018085013591506101a085013561456081614150565b939692955090935050565b5f6020828403121561457b575f80fd5b8135610d6e81614150565b5f805f60608486031215614598575f80fd5b8335925060208401356144a181614150565b5f815180845260208085019450602084015f5b838110156145d9578151875295820195908201906001016145bd565b509495945050505050565b602081525f6001600160c01b03808451166020840152806020850151166040840152506001600160a01b03604084015116606083015260608301516080830152608083015160a083015260a083015160e060c08401526146486101008401826145aa565b905060c0840151601f198483030160e0850152613d3482826145aa565b8251815260208084015181830152604080850151818401528351606084015290830151608083015282015160a082015260c08101610d6e565b5f805f80608085870312156146b1575f80fd5b84356146bc81614150565b935060208501356146cc81614150565b93969395505050506040820135916060013590565b67ffffffffffffffff81168114610c2c575f80fd5b62ffffff81168114610c2c575f80fd5b5f60c08284031215614716575f80fd5b61471e6142ff565b825161472981614150565b81526020830151614739816146e1565b6020820152604083015161474c81614150565b6040820152606083015161475f816146f6565b6060820152608083015161477281614150565b608082015260a0830151614785816146f6565b60a08201529392505050565b5f82601f8301126147a0575f80fd5b8151602067ffffffffffffffff8211156147bc576147bc6142eb565b6147ca818360051b0161434b565b82815260069290921b840181019181810190868411156147e8575f80fd5b8286015b8481101561483c5760408189031215614803575f80fd5b61480b614328565b81518060020b811461481b575f80fd5b81528185015161482a816146e1565b818601528352918301916040016147ec565b509695505050505050565b5f8060408385031215614858575f80fd5b825167ffffffffffffffff8082111561486f575f80fd5b61487b86838701614791565b93506020850151915080821115614890575f80fd5b5061489d85828601614791565b9150509250929050565b5f815180845260208085019450602084015f5b838110156145d9578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016148ba565b6001600160a01b038716815285602082015260c060408201525f61491560c08301876148a7565b828103606084015261492781876148a7565b6080840195909552505060a00152949350505050565b600181811c9082168061495157607f821691505b60208210810361451457634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156108d5576108d561496f565b808201808211156108d5576108d561496f565b5f602082840312156149b9575f80fd5b815160ff81168114610d6e575f80fd5b60ff82811682821603908111156108d5576108d561496f565b600181815b80851115614a1c57815f1904821115614a0257614a0261496f565b80851615614a0f57918102915b93841c93908002906149e7565b509250929050565b5f82614a32575060016108d5565b81614a3e57505f6108d5565b8160018114614a545760028114614a5e57614a7a565b60019150506108d5565b60ff841115614a6f57614a6f61496f565b50506001821b6108d5565b5060208310610133831016604e8410600b8410161715614a9d575081810a6108d5565b614aa783836149e2565b805f1904821115614aba57614aba61496f565b029392505050565b5f610d6e60ff841683614a24565b80820281158282048414176108d5576108d561496f565b6001600160a01b0383168152604060208201525f6112cd60408301846141cc565b5f60208284031215614b18575f80fd5b815167ffffffffffffffff811115614b2e575f80fd5b8201601f81018413614b3e575f80fd5b8051614b4c6143f88261437c565b818152856020838501011115614b60575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f8060408385031215614b8e575f80fd5b505080516020909101519092909150565b818382375f9101908152919050565b5f60c08284031215614bbe575f80fd5b614bc66142ff565b8235614bd181614150565b81526020830135614be1816146e1565b60208201526040830135614bf481614150565b60408201526060830135614c07816146f6565b60608201526080830135614c1a81614150565b608082015260a0830135614785816146f6565b5f60208284031215614c3d575f80fd5b8151610d6e81614430565b8035614c5381614150565b6001600160a01b039081168352602082013590614c6f826146e1565b67ffffffffffffffff8216602085015260408301359150614c8f82614150565b9081166040840152606082013590614ca6826146f6565b62ffffff9182166060850152608083013591614cc183614150565b918116608085015260a083013591614cd8836146f6565b80831660a08601525050505050565b614cf18183614c48565b60e060c082018190525f9082015261010001919050565b5f82614d2257634e487b7160e01b5f52601260045260245ffd5b500490565b6101c08101614d368287614c48565b614d4360c0830186614c48565b836101808301526001600160a01b0383166101a083015295945050505050565b5f60208284031215614d73575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b5f7f80000000000000000000000000000000000000000000000000000000000000008203614dbe57614dbe61496f565b505f0390565b5f610140614e2c8385516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602084015160020b60c0840152604084015167ffffffffffffffff1660e08401526060909301516001600160a01b03166101008301525061012081018290525f918101919091526101600190565b60c081016108d582846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b5f60608284031215614ef1575f80fd5b6040516060810181811067ffffffffffffffff82111715614f1457614f146142eb565b6040528251614f2281614150565b81526020830151614f32816146e1565b60208201526040830151614f45816146e1565b60408201529392505050565b8082018281125f831280158216821582161715614f7057614f7061496f565b505092915050565b8181035f831280158383131683831282161715614f9757614f9761496f565b5092915050565b5f82518060208501845e5f920191825250919050565b5f8160020b627fffff198103614fcc57614fcc61496f565b5f039291505056fea2646970667358221220db8f007ed5632b261c40bb9678348ad618c17b5fe71a527e8852b2d458894ca564736f6c63430008190033",
  "deployedBytecode": "0x608060405260043610610279575f3560e01c806379ba50971161014b578063c4d66de8116100c6578063f3cbc88c1161007c578063fa6793d511610062578063fa6793d5146107fc578063faaebd2114610829578063fe99049a14610854575f80fd5b8063f3cbc88c146107b1578063f6c00927146107d0575f80fd5b8063e27ff0ad116100ac578063e27ff0ad14610756578063e30c397814610775578063f2fde38b14610792575f80fd5b8063c4d66de8146106d7578063c630ed7d146106f6575f80fd5b8063a12ef25e1161011b578063ad3cb1cc11610101578063ad3cb1cc1461062b578063b6363cf214610673578063bd85b039146106ac575f80fd5b8063a12ef25e146105ed578063a1d5f1311461060c575f80fd5b806379ba50971461055d5780638da5cb5b1461057157806395d89b411461058d578063998ff4ef146105a1575f80fd5b80632b3ba681116101f5578063509bf42a116101ab578063558a729711610191578063558a7297146104ee578063598af9e71461050d578063715018a614610549575f80fd5b8063509bf42a146104a757806352d1902d146104da575f80fd5b80633f47e662116101db5780633f47e66214610443578063426a8493146104755780634f1ef28614610494575f80fd5b80632b3ba681146103e25780633f322bc9146103f8575f80fd5b8063095bcdb61161024a5780630a31b953116102305780630a31b9531461037057806315c7afb4146103a45780631b022ec8146103c3575f80fd5b8063095bcdb61461033e57806309cb66c41461035d575f80fd5b8062fdd58e1461028457806301ffc9a7146102cd578063022dd4ef146102fc57806306fdde031461031d575f80fd5b3661028057005b5f80fd5b34801561028f575f80fd5b506102ba61029e366004614164565b600360209081525f928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156102d8575f80fd5b506102ec6102e736600461418e565b610873565b60405190151581526020016102c4565b348015610307575f80fd5b5061031b6103163660046141b5565b6108db565b005b348015610328575f80fd5b50610331610c2f565b6040516102c491906141fa565b348015610349575f80fd5b506102ec61035836600461420c565b610cbb565b6102ba61036b36600461423e565b610d75565b34801561037b575f80fd5b5061038f61038a36600461423e565b6112d5565b604080519283526020830191909152016102c4565b3480156103af575f80fd5b506103316103be36600461426d565b611436565b3480156103ce575f80fd5b5061031b6103dd3660046141b5565b61158c565b3480156103ed575f80fd5b506102ba620f424081565b348015610403575f80fd5b5061042b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102c4565b34801561044e575f80fd5b5061046361045d3660046141b5565b50601290565b60405160ff90911681526020016102c4565b348015610480575f80fd5b506102ec61048f36600461420c565b611670565b61031b6104a23660046143a3565b6116d4565b3480156104b2575f80fd5b506102ba7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e5575f80fd5b506102ba6116f3565b3480156104f9575f80fd5b506102ec61050836600461443d565b611721565b348015610518575f80fd5b506102ba610527366004614474565b600460209081525f938452604080852082529284528284209052825290205481565b348015610554575f80fd5b5061031b611790565b348015610568575f80fd5b5061031b6117a3565b34801561057c575f80fd5b505f546001600160a01b031661042b565b348015610598575f80fd5b506103316117e9565b3480156105ac575f80fd5b506105d56105bb3660046144b2565b60076020525f90815260409020546001600160c01b031681565b6040516001600160c01b0390911681526020016102c4565b3480156105f8575f80fd5b5061031b6106073660046144d8565b6117f6565b348015610617575f80fd5b506102ba61062636600461451a565b611878565b348015610636575f80fd5b506103316040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561067e575f80fd5b506102ec61068d3660046144d8565b600260209081525f928352604080842090915290825290205460ff1681565b3480156106b7575f80fd5b506102ba6106c63660046141b5565b60056020525f908152604090205481565b3480156106e2575f80fd5b5061031b6106f136600461456b565b611d7c565b348015610701575f80fd5b506107366107103660046141b5565b5f90815260066020526040902080546001909101546001600160c01b0391821692911690565b604080516001600160c01b039384168152929091166020830152016102c4565b348015610761575f80fd5b5061038f610770366004614586565b611eb6565b348015610780575f80fd5b506001546001600160a01b031661042b565b34801561079d575f80fd5b5061031b6107ac36600461456b565b6122cc565b3480156107bc575f80fd5b506102ba6107cb36600461451a565b61233c565b3480156107db575f80fd5b506107ef6107ea3660046141b5565b612439565b6040516102c491906145e4565b348015610807575f80fd5b5061081b6108163660046141b5565b61259a565b6040516102c4929190614665565b348015610834575f80fd5b506102ba61084336600461456b565b60086020525f908152604090205481565b34801561085f575f80fd5b506102ec61086e36600461469e565b6128c3565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806108d557507f0f632fb3000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b3330146108fb576040516314e1dbf760e11b815260040160405180910390fd5b5f81815260066020526040808220600381015460048083015483549451639b22917d60e01b81526001600160c01b0390951691850191909152919390927f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610987573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ab9190614706565b6001850154604051639b22917d60e01b81526001600160c01b0390911660048201529091505f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610a21573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a459190614706565b60028601546040517f3b93fabc000000000000000000000000000000000000000000000000000000008152600481018990529192506001600160a01b031690633b93fabc906024015f60405180830381865afa925050508015610ac957506040513d5f823e601f3d908101601f19168201604052610ac69190810190614847565b60015b610b0357610ada8686600180612a34565b610ae8826040015185612ae4565b60038601558151610af99084612ae4565b6004860155610c26565b8151158015610b1157508051155b15610b20575050505050505050565b610b2d8888600180612a34565b5f610b3c85848a600501612dc4565b90505f610b4d85848b600601612dc4565b9050610b5d866040015189612ae4565b60038a01558551610b6e9088612ae4565b6004808b019190915560028a01546040517f4424d7f50000000000000000000000000000000000000000000000000000000081526001600160a01b0390911691634424d7f591610bca9133918f918a918a918a918a91016148ee565b5f604051808303815f87803b158015610be1575f80fd5b505af1158015610bf3573d5f803e3d5ffd5b50506040518c92507f37f8042257f6b4d65b9614deb7792e5b374db2fdcd1983bf8a1247a8a788af5c91505f90a2505050505b50505050505b50565b60098054610c3c9061493d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c689061493d565b8015610cb35780601f10610c8a57610100808354040283529160200191610cb3565b820191905f5260205f20905b815481529060010190602001808311610c9657829003601f168201915b505050505081565b335f908152600360209081526040808320858452909152812080548391908390610ce6908490614983565b90915550506001600160a01b0384165f90815260036020908152604080832086845290915281208054849290610d1d908490614996565b909155505060408051338082526020820185905285926001600160a01b038816927f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a45060015b9392505050565b5f610d7e612f33565b5f8581526006602052604080822080549151639b22917d60e01b81526001600160c01b03909216600483015291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610dfb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e1f9190614706565b5f88815260056020526040812054919250819003610fdc57861580610e42575085155b15610e79576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408201515f906001600160a01b031615610f0d5782604001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ece573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ef291906149a9565b610efd9060126149c9565b610f0890600a614ac2565b610f10565b60015b83519091505f906001600160a01b031615610fa357835f01516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f64573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f8891906149a9565b610f939060126149c9565b610f9e90600a614ac2565b610fa6565b60015b90505f610fb3838b614ad0565b90505f610fc0838b614ad0565b9050808211610fcf5780610fd1565b815b9750505050506110de565b5f80610fe78a61259a565b915091505f82604001518360200151845f01516110049190614996565b61100e9190614996565b90505f82604001518360200151845f01516110299190614996565b6110339190614996565b905081158015611041575080155b15611054575f9950899a508a97506110d9565b815f03611070576110668a8683612fb9565b97505f9a506110d9565b805f0361108c576110828b8684612fb9565b97505f99506110d9565b5f6110988c8785612fb9565b90505f6110a68c8885612fb9565b9050808211156110c5578099506110be848b89612fd4565b9c506110d6565b8199506110d3838b89612fd4565b9b505b50505b505050505b848410156110ff576040516307dd37f760e41b815260040160405180910390fd5b604082015134906001600160a01b031661113c578734101561113457604051632a9ffab760e21b815260040160405180910390fd5b879003611156565b6040830151611156906001600160a01b031633308b612ff7565b82516001600160a01b031661118e578634101561118657604051632a9ffab760e21b815260040160405180910390fd5b8690036111a5565b82516111a5906001600160a01b031633308a612ff7565b87846003015f8282546111b89190614996565b9250508190555086846004015f8282546111d29190614996565b909155506111e39050338a87613070565b80156111f4576111f45f33836130a2565b6040805189815260208101899052908101869052899033907f1d43dbd7e59f8c9371169f5c49c01e100227d9ee5f5fe54665cf10e35042bb729060600160405180910390a360028401546040517fa3a36f55000000000000000000000000000000000000000000000000000000008152336004820152602481018b905260448101879052606481018490526001600160a01b039091169063a3a36f55906084015f604051808303815f87803b1580156112ab575f80fd5b505af11580156112bd573d5f803e3d5ffd5b50505050505050506112cd613184565b949350505050565b5f806112df612f33565b6040805160248101889052336044820152606480820188905282518083039091018152608490910182526020810180516001600160e01b03167fe27ff0ad0000000000000000000000000000000000000000000000000000000017905290517f9ca179980000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691639ca17998916113a0913091600401614ae7565b5f604051808303815f875af11580156113bb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113e29190810190614b08565b8060200190518101906113f59190614b7d565b90925090508382108061140757508281105b15611425576040516307dd37f760e41b815260040160405180910390fd5b61142d613184565b94509492505050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461149a576040517f4bd37f4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841630146114dc576040517f66a7598c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80306001600160a01b031685856040516114f8929190614b9f565b5f604051808303815f865af19150503d805f8114611531576040519150601f19603f3d011682016040523d82523d5f602084013e611536565b606091505b5091509150811561154a579150610d6e9050565b80515f03611584576040517fa40afa3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160208201fd5b611594612f33565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca179983063022dd4ef60e01b846040516024016115df91815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b90921682526116259291600401614ae7565b5f604051808303815f875af1158015611640573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116679190810190614b08565b50610c2c613184565b335f8181526004602090815260408083206001600160a01b03881680855290835281842087855290925280832085905551919285927fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a790610d629087815260200190565b6116dc6131ae565b6116e582613265565b6116ef828261326d565b5050565b5f6116fc61335a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b335f8181526002602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b6117986133a3565b6117a15f6133cf565b565b60015433906001600160a01b031681146117e05760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610c2c816133cf565b600a8054610c3c9061493d565b6117fe6133a3565b6001600160a01b0382165f8181526008602052604081208054919055906118269083836130a2565b816001600160a01b0316836001600160a01b03167f1314fd112a381beea61539dbd21ec04afcff2662ac7d1b83273aade1f53d1b978360405161186b91815260200190565b60405180910390a3505050565b5f333014611899576040516314e1dbf760e11b815260040160405180910390fd5b6118ca6118a9602086018661456b565b6118b9606088016040890161456b565b6001600160a01b0391821691161490565b80156118f157506118f16118e4606086016040870161456b565b6118b9602088018861456b565b158061190857506119086118a9602087018761456b565b1561193f576040517f27a4015200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61195060a087016080880161456b565b6001600160a01b031614158061197e57505f61197260a086016080870161456b565b6001600160a01b031614155b156119b5576040517f9c9d882300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166119f5576040517f4e236e9a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611a0d611a0836889003880188614bae565b6133e8565b90505f611a22611a0836889003880188614bae565b604051632ad7b51960e11b81526001600160c01b03841660048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611a90573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ab49190614c2d565b611b325760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190611b04908a90600401614ce7565b5f604051808303815f87803b158015611b1b575f80fd5b505af1158015611b2d573d5f803e3d5ffd5b505050505b604051632ad7b51960e11b81526001600160c01b03821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906355af6a3290602401602060405180830381865afa158015611b9d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc19190614c2d565b611c3f5760405163fefc7c5160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fefc7c5190611c11908990600401614ce7565b5f604051808303815f87803b158015611c28575f80fd5b505af1158015611c3a573d5f803e3d5ffd5b505050505b611c4a828287613423565b5f818152600660205260409020600201549093506001600160a01b031615611c9e576040517f1da42b2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83815260066020908152604080832080546001600160c01b038781167fffffffffffffffff0000000000000000000000000000000000000000000000009283168117845560018401805492891692841683179055600290930180546001600160a01b038c166001600160a01b03199091168117909155838752600786528487208054841683179055818752958490208054909216831790915582518a8152938401949094529186917f66d8f0c63665a9bd1357e5d422d5f538805b225f260974cb408a66635040ec6c910160405180910390a45050949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f81158015611dc65750825b90505f8267ffffffffffffffff166001148015611de25750303b155b905081158015611df0575080155b15611e27576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315611e5b57845468ff00000000000000001916680100000000000000001785555b611e64866133cf565b8315610c2657845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b5f80333014611ed8576040516314e1dbf760e11b815260040160405180910390fd5b5f858152600660209081526040808320600590925290912054611efc86888761348f565b8154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015611f6c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f909190614706565b9050611f9e88848885612a34565b611fb081604001518460030154612ae4565b600384015580516004840154611fc69190612ae4565b60048401555f80611fd68a61259a565b91509150838883604001518460200151855f0151611ff49190614996565b611ffe9190614996565b6120089190614ad0565b6120129190614d08565b9650838882604001518360200151845f015161202e9190614996565b6120389190614996565b6120429190614ad0565b61204c9190614d08565b955086856003015f8282546120619190614983565b9250508190555085856004015f82825461207b9190614983565b909155505f905080881561213157620f42406001816120ba7f00000000000000000000000000000000000000000000000000000000000000008d614ad0565b6120c49190614996565b6120ce9190614983565b6120d89190614d08565b91506120e4828a614983565b6040860151909950612100906001600160a01b03168c8b6130a2565b6040808601516001600160a01b03165f9081526008602052908120805484929061212b908490614996565b90915550505b87156121d957620f42406001816121687f00000000000000000000000000000000000000000000000000000000000000008c614ad0565b6121729190614996565b61217c9190614983565b6121869190614d08565b90506121928189614983565b85519098506121ab906001600160a01b03168c8a6130a2565b84516001600160a01b03165f90815260086020526040812080548392906121d3908490614996565b90915550505b604080518b8152602081018b905290810189905260608101839052608081018290528c906001600160a01b038d16907f7825ad5cf3aafe81da61bbb75737444e6d77278cb110bb9bfa3ee809f1fb64b99060a00160405180910390a360028701546040517fdb7c74b6000000000000000000000000000000000000000000000000000000008152336004820152602481018e9052604481018c9052606481018890526001600160a01b039091169063db7c74b6906084015f604051808303815f87803b1580156122a7575f80fd5b505af11580156122b9573d5f803e3d5ffd5b5050505050505050505050935093915050565b6122d46133a3565b600180546001600160a01b0383166001600160a01b031990911681179091556123045f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f612345612f33565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca179983063a1d5f13160e01b888888886040516024016123949493929190614d27565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b90921682526123da9291600401614ae7565b5f604051808303815f875af11580156123f5573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261241c9190810190614b08565b80602001905181019061242f9190614d63565b90506112cd613184565b61248f6040518060e001604052805f6001600160c01b031681526020015f6001600160c01b031681526020015f6001600160a01b031681526020015f81526020015f815260200160608152602001606081525090565b5f82815260066020908152604091829020825160e08101845281546001600160c01b0390811682526001830154168184015260028201546001600160a01b03168185015260038201546060820152600482015460808201526005820180548551818602810186019096528086529194929360a0860193929083018282801561253457602002820191905f5260205f20905b815481526020019060010190808311612520575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561258a57602002820191905f5260205f20905b815481526020019060010190808311612576575b5050505050815250509050919050565b6125bb60405180606001604052805f81526020015f81526020015f81525090565b6125dc60405180606001604052805f81526020015f81526020015f81525090565b5f838152600660209081526040808320600381015486526004810154855260058101805483518186028101860190945280845291949390919083018282801561264257602002820191905f5260205f20905b81548152602001906001019080831161262e575b505050505090505f8260060180548060200260200160405190810160405280929190818152602001828054801561269657602002820191905f5260205f20905b815481526020019060010190808311612682575b505050505090505f825111156127b2578254604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015612716573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061273a9190614706565b90505f5b83518110156127af575f806127758460600151856020015188868151811061276857612768614d7a565b60200260200101516134b7565b91509150818960400181815161278b9190614996565b9052506020880180518291906127a2908390614996565b905250505060010161273e565b50505b8051156128bb576001830154604051639b22917d60e01b81526001600160c01b0390911660048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa15801561282c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128509190614706565b90505f5b82518110156128b8575f8061287e8460600151856020015187868151811061276857612768614d7a565b9150915080896020018181516128949190614996565b9052506040880180518391906128ab908390614996565b9052505050600101612854565b50505b505050915091565b5f336001600160a01b0386161480159061290057506001600160a01b0385165f90815260026020908152604080832033845290915290205460ff16155b15612970576001600160a01b0385165f90815260046020908152604080832033845282528083208684529091529020545f19811461296e576129428382614983565b6001600160a01b0387165f90815260046020908152604080832033845282528083208884529091529020555b505b6001600160a01b0385165f908152600360209081526040808320868452909152812080548492906129a2908490614983565b90915550506001600160a01b0384165f908152600360209081526040808320868452909152812080548492906129d9908490614996565b9091555050604080513381526020810184905284916001600160a01b0380881692908916917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac728859910160405180910390a4506001949350505050565b5f80612a44856005018585613616565b915091505f80612a58876006018787613616565b91509150877f1c29b938e5c165e4f17dcbaf854af84a6c529c3f0face137b12bda74606cca9e8285604051612a97929190918252602082015260400190565b60405180910390a2604080518581526020810184905289917f5721685080049ebad55f69ed0f4bf84a11d57cd2050e67986deab2323a9b2103910160405180910390a25050505050505050565b604051636a256b2960e01b81526001600160a01b0383811660048301525f917f000000000000000000000000000000000000000000000000000000000000000090911690636a256b29906024016020604051808303815f875af1158015612b4d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b719190614d63565b506040517f9611cf6c0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690639611cf6c90604401602060405180830381865afa158015612bf9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614d63565b90505f811315612cd6576040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152306024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed12906064015f604051808303815f87803b158015612cad575f80fd5b505af1158015612cbf573d5f803e3d5ffd5b505050508083612ccf9190614996565b9250612dbc565b5f811215612dbc57612d1c7f0000000000000000000000000000000000000000000000000000000000000000612d0b83614d8e565b6001600160a01b03871691906130a2565b604051636a256b2960e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690636a256b29906024016020604051808303815f875af1158015612d81573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612da59190614d63565b50612daf81614d8e565b612db99084614983565b92505b509092915050565b5f805b8351811015612f2b57838181518110612de257612de2614d7a565b60200260200101516020015167ffffffffffffffff165f0315612f23575f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631dbef48860405180608001604052808a8152602001898781518110612e5357612e53614d7a565b60200260200101515f015160020b8152602001898781518110612e7857612e78614d7a565b60200260200101516020015167ffffffffffffffff1681526020015f6001600160a01b03168152506040518263ffffffff1660e01b8152600401612ebc9190614dc4565b60408051808303815f875af1158015612ed7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612efb9190614b7d565b9092509050612f0a8185614996565b85546001810187555f8781526020902001929092555091505b600101612dc7565b509392505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005c15612f8c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117a160017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f005b9061392f565b5f825f190484118302158202612fcd575f80fd5b5091020490565b5f825f190484118302158202612fe8575f80fd5b50910281810615159190040190565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd0000000000000000000000000000000000000000000000000000000017905261306a908590613936565b50505050565b61307b8383836139bb565b5f8281526005602052604081208054839290613098908490614996565b9091555050505050565b5f6001600160a01b0384166130f7575f805f8085875af19050806130f2576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61306a565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015282602482015260205f6044835f895af13d15601f3d1160015f51141617169150508061306a576040517ff27f64e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117a15f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00612fb3565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061324757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661323b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b031614155b156117a15760405163703e46dd60e11b815260040160405180910390fd5b610c2c6133a3565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156132c7575060408051601f3d908101601f191682019092526132c491810190614d63565b60015b6132ef57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016117d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461334b576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016117d7565b6133558383613a40565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117a15760405163703e46dd60e11b815260040160405180910390fd5b5f546001600160a01b031633146117a15760405163118cdaa760e01b81523360048201526024016117d7565b600180546001600160a01b0319169055610c2c81613a95565b5f80826040516020016133fb9190614e7a565b60408051601f1981840301815291905280516020909101206001600160c01b03169392505050565b5f826001600160c01b0316846001600160c01b03161115613442579192915b6040805167ffffffffffffffff1986831b811660208301529185901b9091166038820152605081018390526070016040516020818303038152906040528051906020012090509392505050565b61349a838383613ae4565b5f8281526005602052604081208054839290613098908490614983565b5f805f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241856040518263ffffffff1660e01b815260040161350891815260200190565b606060405180830381865afa158015613523573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906135479190614ee1565b90508467ffffffffffffffff16816020015167ffffffffffffffff1661356d9190614ad0565b92506135b08567ffffffffffffffff16826040015167ffffffffffffffff166135969190614ad0565b5f6135a68760281c62ffffff1690565b60020b9190613b60565b91506135c18662ffffff1660171c90565b156135ec575f6135d862ffffff8816856001613b82565b90506135e48185614f51565b93505061360d565b5f6135fd62ffffff88168483613b82565b90506136098184614f78565b9250505b50935093915050565b5f805f8580548060200260200160405190810160405280929190818152602001828054801561366257602002820191905f5260205f20905b81548152602001906001019080831161364e575b505050505090505f5b815181101561391c575f82828151811061368757613687614d7a565b602002602001015190505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d09ef241836040518263ffffffff1660e01b81526004016136e091815260200190565b606060405180830381865afa1580156136fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061371f9190614ee1565b604081015190915067ffffffffffffffff16156137f357604080517f38926b6d0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091525f60448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906338926b6d906064016020604051808303815f875af11580156137c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137e69190614d63565b6137f09086614996565b94505b602081015167ffffffffffffffff1615613912577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314d6a9eb604051806040016040528085815260200161387f8b8d8d6138579190614983565b876020015167ffffffffffffffff166138709190614ad0565b61387a9190614d08565b613c02565b67ffffffffffffffff9081169091526040516001600160e01b031960e085901b16815282516004820152602090920151166024820152606060448201525f60648201526084016020604051808303815f875af11580156138e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906139059190614d63565b61390f9087614996565b95505b505060010161366b565b5084840361360d57505f90945593915050565b80825d5050565b5f8060205f8451602086015f885af180613955576040513d5f823e3d81fd5b50505f513d9150811561396c578060011415613979565b6001600160a01b0384163b155b1561306a576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016117d7565b6001600160a01b0383165f908152600360209081526040808320858452909152812080548392906139ed908490614996565b9091555050604080513381526020810183905283916001600160a01b038616915f917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac72885991015b60405180910390a4505050565b613a4982613c55565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115613a8d576133558282613ccb565b6116ef613d3d565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0383165f90815260036020908152604080832085845290915281208054839290613b16908490614983565b9091555050604080513381526020810183905283915f916001600160a01b038716917f1b3d7edb2e9c0b0e7c525b20aaaef0f5940d2ed71663c7d39266ecafac7288599101613a33565b5f6112cd606084901b613b758660020b613d75565b8082061515851691040190565b5f6207a11f19627fffff851601600281900b82128281613ba457825f03613ba6565b825b62ffffff1690505f613bdf613bbb8389614ad0565b620f424088613bd1578581830615151691040190565b808206151586151691040190565b905082613bf457613bef81614d8e565b613bf6565b805b98975050505050505050565b5f67ffffffffffffffff821115613c5157604080517f6dfcc6500000000000000000000000000000000000000000000000000000000081526004810191909152602481018390526044016117d7565b5090565b806001600160a01b03163b5f03613c8a57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016117d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051613ce79190614f9e565b5f60405180830381855af49150503d805f8114613d1f576040519150601f19603f3d011682016040523d82523d5f602084013e613d24565b606091505b5091509150613d3485838361403d565b95945050505050565b34156117a1576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f613d7f826140b2565b815f600282900b8113613d925781613d9b565b613d9b82614fb4565b62ffffff8116915060011615613dbf576bfff97272373d413259a469909250613dd0565b6c0100000000000000000000000092505b6002811615613def5760606bfff2e50f5f656932ef12357c8402901c92505b6004811615613e0e5760606bffe5caca7e10e4e61c3624ea8402901c92505b6008811615613e2d5760606bffcb9843d60f6159c9db58838402901c92505b6010811615613e4c5760606bff973b41fa98c081472e68968402901c92505b6020811615613e6b5760606bff2ea16466c96a3843ec78b38402901c92505b6040811615613e8a5760606bfe5dee046a99a2a811c461f18402901c92505b6080811615613ea95760606bfcbe86c7900a88aedcffc83b8402901c92505b610100811615613ec95760606bf987a7253ac413176f2b074c8402901c92505b610200811615613ee95760606bf3392b0822b70005940c7a398402901c92505b610400811615613f095760606be7159475a2c29b7443b29c7f8402901c92505b610800811615613f295760606bd097f3bdfd2022b8845ad8f78402901c92505b611000811615613f495760606ba9f746462d870fdf8a65dc1f8402901c92505b612000811615613f695760606b70d869a156d2a1b890bb3df68402901c92505b614000811615613f895760606b31be135f97d08fd9812315058402901c92505b618000811615613fa95760606b09aa508b5b7a84e1c677de548402901c92505b62010000811615613fc95760606a5d6af8dedb81196699c3298402901c92505b62020000811615613fe8576060692216e584f5fa1ea926048402901c92505b6204000081161561400557606067048a170391f7dc428402901c92505b5f8260020b131561403657614033837801000000000000000000000000000000000000000000000000614d08565b92505b5050919050565b6060826140525761404d8261410e565b610d6e565b815115801561406957506001600160a01b0384163b155b156140ab576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016117d7565b5080610d6e565b6207ffff600282900b13806140d757506140ce6207ffff614fb4565b60020b8160020b125b15610c2c576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80511561411e5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0381168114610c2c575f80fd5b5f8060408385031215614175575f80fd5b823561418081614150565b946020939093013593505050565b5f6020828403121561419e575f80fd5b81356001600160e01b031981168114610d6e575f80fd5b5f602082840312156141c5575f80fd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610d6e60208301846141cc565b5f805f6060848603121561421e575f80fd5b833561422981614150565b95602085013595506040909401359392505050565b5f805f8060808587031215614251575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f6040848603121561427f575f80fd5b833561428a81614150565b9250602084013567ffffffffffffffff808211156142a6575f80fd5b818601915086601f8301126142b9575f80fd5b8135818111156142c7575f80fd5b8760208285010111156142d8575f80fd5b6020830194508093505050509250925092565b634e487b7160e01b5f52604160045260245ffd5b60405160c0810167ffffffffffffffff81118282101715614322576143226142eb565b60405290565b6040805190810167ffffffffffffffff81118282101715614322576143226142eb565b604051601f8201601f1916810167ffffffffffffffff81118282101715614374576143746142eb565b604052919050565b5f67ffffffffffffffff821115614395576143956142eb565b50601f01601f191660200190565b5f80604083850312156143b4575f80fd5b82356143bf81614150565b9150602083013567ffffffffffffffff8111156143da575f80fd5b8301601f810185136143ea575f80fd5b80356143fd6143f88261437c565b61434b565b818152866020838501011115614411575f80fd5b816020840160208301375f602083830101528093505050509250929050565b8015158114610c2c575f80fd5b5f806040838503121561444e575f80fd5b823561445981614150565b9150602083013561446981614430565b809150509250929050565b5f805f60608486031215614486575f80fd5b833561449181614150565b925060208401356144a181614150565b929592945050506040919091013590565b5f602082840312156144c2575f80fd5b81356001600160c01b0381168114610d6e575f80fd5b5f80604083850312156144e9575f80fd5b82356144f481614150565b9150602083013561446981614150565b5f60c08284031215614514575f80fd5b50919050565b5f805f806101c0858703121561452e575f80fd5b6145388686614504565b93506145478660c08701614504565b925061018085013591506101a085013561456081614150565b939692955090935050565b5f6020828403121561457b575f80fd5b8135610d6e81614150565b5f805f60608486031215614598575f80fd5b8335925060208401356144a181614150565b5f815180845260208085019450602084015f5b838110156145d9578151875295820195908201906001016145bd565b509495945050505050565b602081525f6001600160c01b03808451166020840152806020850151166040840152506001600160a01b03604084015116606083015260608301516080830152608083015160a083015260a083015160e060c08401526146486101008401826145aa565b905060c0840151601f198483030160e0850152613d3482826145aa565b8251815260208084015181830152604080850151818401528351606084015290830151608083015282015160a082015260c08101610d6e565b5f805f80608085870312156146b1575f80fd5b84356146bc81614150565b935060208501356146cc81614150565b93969395505050506040820135916060013590565b67ffffffffffffffff81168114610c2c575f80fd5b62ffffff81168114610c2c575f80fd5b5f60c08284031215614716575f80fd5b61471e6142ff565b825161472981614150565b81526020830151614739816146e1565b6020820152604083015161474c81614150565b6040820152606083015161475f816146f6565b6060820152608083015161477281614150565b608082015260a0830151614785816146f6565b60a08201529392505050565b5f82601f8301126147a0575f80fd5b8151602067ffffffffffffffff8211156147bc576147bc6142eb565b6147ca818360051b0161434b565b82815260069290921b840181019181810190868411156147e8575f80fd5b8286015b8481101561483c5760408189031215614803575f80fd5b61480b614328565b81518060020b811461481b575f80fd5b81528185015161482a816146e1565b818601528352918301916040016147ec565b509695505050505050565b5f8060408385031215614858575f80fd5b825167ffffffffffffffff8082111561486f575f80fd5b61487b86838701614791565b93506020850151915080821115614890575f80fd5b5061489d85828601614791565b9150509250929050565b5f815180845260208085019450602084015f5b838110156145d9578151805160020b885283015167ffffffffffffffff1683880152604090960195908201906001016148ba565b6001600160a01b038716815285602082015260c060408201525f61491560c08301876148a7565b828103606084015261492781876148a7565b6080840195909552505060a00152949350505050565b600181811c9082168061495157607f821691505b60208210810361451457634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156108d5576108d561496f565b808201808211156108d5576108d561496f565b5f602082840312156149b9575f80fd5b815160ff81168114610d6e575f80fd5b60ff82811682821603908111156108d5576108d561496f565b600181815b80851115614a1c57815f1904821115614a0257614a0261496f565b80851615614a0f57918102915b93841c93908002906149e7565b509250929050565b5f82614a32575060016108d5565b81614a3e57505f6108d5565b8160018114614a545760028114614a5e57614a7a565b60019150506108d5565b60ff841115614a6f57614a6f61496f565b50506001821b6108d5565b5060208310610133831016604e8410600b8410161715614a9d575081810a6108d5565b614aa783836149e2565b805f1904821115614aba57614aba61496f565b029392505050565b5f610d6e60ff841683614a24565b80820281158282048414176108d5576108d561496f565b6001600160a01b0383168152604060208201525f6112cd60408301846141cc565b5f60208284031215614b18575f80fd5b815167ffffffffffffffff811115614b2e575f80fd5b8201601f81018413614b3e575f80fd5b8051614b4c6143f88261437c565b818152856020838501011115614b60575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f8060408385031215614b8e575f80fd5b505080516020909101519092909150565b818382375f9101908152919050565b5f60c08284031215614bbe575f80fd5b614bc66142ff565b8235614bd181614150565b81526020830135614be1816146e1565b60208201526040830135614bf481614150565b60408201526060830135614c07816146f6565b60608201526080830135614c1a81614150565b608082015260a0830135614785816146f6565b5f60208284031215614c3d575f80fd5b8151610d6e81614430565b8035614c5381614150565b6001600160a01b039081168352602082013590614c6f826146e1565b67ffffffffffffffff8216602085015260408301359150614c8f82614150565b9081166040840152606082013590614ca6826146f6565b62ffffff9182166060850152608083013591614cc183614150565b918116608085015260a083013591614cd8836146f6565b80831660a08601525050505050565b614cf18183614c48565b60e060c082018190525f9082015261010001919050565b5f82614d2257634e487b7160e01b5f52601260045260245ffd5b500490565b6101c08101614d368287614c48565b614d4360c0830186614c48565b836101808301526001600160a01b0383166101a083015295945050505050565b5f60208284031215614d73575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffd5b5f7f80000000000000000000000000000000000000000000000000000000000000008203614dbe57614dbe61496f565b505f0390565b5f610140614e2c8385516001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b602084015160020b60c0840152604084015167ffffffffffffffff1660e08401526060909301516001600160a01b03166101008301525061012081018290525f918101919091526101600190565b60c081016108d582846001600160a01b0380825116835267ffffffffffffffff6020830151166020840152806040830151166040840152606082015162ffffff80821660608601528260808501511660808601528060a08501511660a08601525050505050565b5f60608284031215614ef1575f80fd5b6040516060810181811067ffffffffffffffff82111715614f1457614f146142eb565b6040528251614f2281614150565b81526020830151614f32816146e1565b60208201526040830151614f45816146e1565b60408201529392505050565b8082018281125f831280158216821582161715614f7057614f7061496f565b505092915050565b8181035f831280158383131683831282161715614f9757614f9761496f565b5092915050565b5f82518060208501845e5f920191825250919050565b5f8160020b627fffff198103614fcc57614fcc61496f565b5f039291505056fea2646970667358221220db8f007ed5632b261c40bb9678348ad618c17b5fe71a527e8852b2d458894ca564736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "burn(bytes32,uint256,uint256,uint256)": {
        "params": {
          "amount": "The amount of liquidity tokens to burn.",
          "key": "The key of the pool.",
          "minAmountA": "The amount of the first token to receive.",
          "minAmountB": "The minimum amount of the second token to receive."
        },
        "returns": {
          "withdrawalA": "The amounts of the first and second tokens to receive."
        }
      },
      "collect(address,address)": {
        "details": "Only the owner can collect fees.",
        "params": {
          "currency": "The currency to collect fees for.",
          "to": "The address to send the collected fees to."
        }
      },
      "getBookPairs(bytes32)": {
        "params": {
          "key": "The key of the pool."
        },
        "returns": {
          "_0": "The book ID for the first book.",
          "_1": "The book ID for the second book."
        }
      },
      "getLiquidity(bytes32)": {
        "params": {
          "key": "The key of the pool."
        },
        "returns": {
          "liquidityA": "The liquidity for the first token.",
          "liquidityB": "The liquidity for the second token."
        }
      },
      "getPool(bytes32)": {
        "params": {
          "key": "The key of the pool."
        },
        "returns": {
          "_0": "The pool."
        }
      },
      "lockAcquired(address,bytes)": {
        "params": {
          "data": "The data that was passed to the call to lock"
        },
        "returns": {
          "_0": "Any data that you want to be returned from the lock call"
        }
      },
      "mint(bytes32,uint256,uint256,uint256)": {
        "params": {
          "amountA": "The amount of the first token.",
          "amountB": "The amount of the second token.",
          "key": "The key of the pool.",
          "minLpAmount": "The minimum amount of liquidity tokens to mint."
        },
        "returns": {
          "mintAmount": "The amount of liquidity tokens minted."
        }
      },
      "open((address,uint64,address,uint24,address,uint24),(address,uint64,address,uint24,address,uint24),bytes32,address)": {
        "params": {
          "bookKeyA": "The book key for the first book.",
          "bookKeyB": "The book key for the second book.",
          "salt": "The salt value.",
          "strategy": "The address of the strategy."
        },
        "returns": {
          "_0": "The key of the opened pool."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rebalance(bytes32)": {
        "params": {
          "key": "The key of the pool."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "bookPair": {
        "params": {
          "bookId": "The book ID."
        },
        "return": "The book pair.",
        "returns": {
          "_0": "The book pair."
        }
      },
      "burnFeeRate": {
        "return": "The burn fee rate.",
        "returns": {
          "_0": "The burn fee rate."
        }
      },
      "fees": {
        "params": {
          "currency": "The currency to check pending fees for"
        },
        "return": "The total amount of uncollected fees in the specified currency",
        "returns": {
          "_0": "The total amount of uncollected fees in the specified currency"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20TransferFailed()": [
        {
          "notice": "Thrown when an ERC20 transfer fails"
        }
      ],
      "NativeTransferFailed()": [
        {
          "notice": "Thrown when a native transfer fails"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "bookPair(uint192)": {
        "notice": "Retrieves the book pair for a specified book ID."
      },
      "burn(bytes32,uint256,uint256,uint256)": {
        "notice": "Burns liquidity for the specified key."
      },
      "burnFeeRate()": {
        "notice": "Retrieves the burn fee rate."
      },
      "collect(address,address)": {
        "notice": "Collects the pending fees for a given currency."
      },
      "fees(address)": {
        "notice": "Returns the amount of pending fees for a given currency that can be collected"
      },
      "getBookPairs(bytes32)": {
        "notice": "Retrieves the book pairs for a specified key."
      },
      "getLiquidity(bytes32)": {
        "notice": "Retrieves the liquidity for a specified key."
      },
      "getPool(bytes32)": {
        "notice": "Retrieves the pool for a specified key."
      },
      "lockAcquired(address,bytes)": {
        "notice": "Called by the book manager on `msg.sender` when a lock is acquired"
      },
      "mint(bytes32,uint256,uint256,uint256)": {
        "notice": "Mints liquidity for the specified key."
      },
      "open((address,uint64,address,uint24,address,uint24),(address,uint64,address,uint24,address,uint24),bytes32,address)": {
        "notice": "Opens a new pool with the specified parameters."
      },
      "rebalance(bytes32)": {
        "notice": "Rebalances the pool for the specified key."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8945,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "isOperator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8951,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8959,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 15403,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9483,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "_pools",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Pool)14809_storage)"
      },
      {
        "astId": 9489,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "bookPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_userDefinedValueType(BookId)7799,t_userDefinedValueType(BookId)7799)"
      },
      {
        "astId": 9494,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "fees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_userDefinedValueType(Currency)7826,t_uint256)"
      },
      {
        "astId": 9496,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 9498,
        "contract": "src/LiquidityVault.sol:LiquidityVault",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_userDefinedValueType(OrderId)8234)dyn_storage": {
        "base": "t_userDefinedValueType(OrderId)8234",
        "encoding": "dynamic_array",
        "label": "OrderId[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStrategy)15393": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(Pool)14809_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILiquidityVault.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)14809_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(BookId)7799,t_userDefinedValueType(BookId)7799)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(BookId)7799",
        "label": "mapping(BookId => BookId)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(BookId)7799"
      },
      "t_mapping(t_userDefinedValueType(Currency)7826,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Currency)7826",
        "label": "mapping(Currency => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Pool)14809_storage": {
        "encoding": "inplace",
        "label": "struct ILiquidityVault.Pool",
        "members": [
          {
            "astId": 14790,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "bookIdA",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(BookId)7799"
          },
          {
            "astId": 14793,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "bookIdB",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(BookId)7799"
          },
          {
            "astId": 14796,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "strategy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IStrategy)15393"
          },
          {
            "astId": 14798,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "reserveA",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14800,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "reserveB",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 14804,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "orderListA",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_userDefinedValueType(OrderId)8234)dyn_storage"
          },
          {
            "astId": 14808,
            "contract": "src/LiquidityVault.sol:LiquidityVault",
            "label": "orderListB",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_userDefinedValueType(OrderId)8234)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(BookId)7799": {
        "encoding": "inplace",
        "label": "BookId",
        "numberOfBytes": "24"
      },
      "t_userDefinedValueType(Currency)7826": {
        "encoding": "inplace",
        "label": "Currency",
        "numberOfBytes": "20"
      },
      "t_userDefinedValueType(OrderId)8234": {
        "encoding": "inplace",
        "label": "OrderId",
        "numberOfBytes": "32"
      }
    }
  }
}