{
  "address": "0x63e7566e0d2cABe72EfA78EBa07f995361f7Dd70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "referenceOracle_",
          "type": "address"
        },
        {
          "internalType": "contract IRebalancer",
          "name": "rebalancer_",
          "type": "address"
        },
        {
          "internalType": "contract IBookManager",
          "name": "bookManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ExceedsThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTick",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "indexed": false,
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "UpdateConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        }
      ],
      "name": "UpdatePrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bookManager",
      "outputs": [
        {
          "internalType": "contract IBookManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "computeOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersA",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "Tick",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint64",
              "name": "rawAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrategy.Order[]",
          "name": "ordersB",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint208",
              "name": "oraclePrice",
              "type": "uint208"
            },
            {
              "internalType": "Tick",
              "name": "tickA",
              "type": "int24"
            },
            {
              "internalType": "Tick",
              "name": "tickB",
              "type": "int24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "isOraclePriceValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "contract IRebalancer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referenceOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "referenceThreshold",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "rateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "minRateB",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdA",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "priceThresholdB",
              "type": "uint24"
            }
          ],
          "internalType": "struct ISimpleOracleStrategy.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "oraclePrice",
          "type": "uint256"
        },
        {
          "internalType": "Tick",
          "name": "tickA",
          "type": "int24"
        },
        {
          "internalType": "Tick",
          "name": "tickB",
          "type": "int24"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedd994e68e8e442952a99d1825ce1fe3e92526393ee6518ae30e1066dc36d6aa",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x63e7566e0d2cABe72EfA78EBa07f995361f7Dd70",
    "transactionIndex": 1,
    "gasUsed": "7464627",
    "logsBloom": "0x00000200000000000000000000000000000000000000000000800000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000011000000000000000000000000000000000000020000000000000000000800000000010000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000040000000000",
    "blockHash": "0x27008bb0b7f05eb60adbf089278df8082b7fa2e9489b61731f8b4ccc6d0d6718",
    "transactionHash": "0xedd994e68e8e442952a99d1825ce1fe3e92526393ee6518ae30e1066dc36d6aa",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 63954164,
        "transactionHash": "0xedd994e68e8e442952a99d1825ce1fe3e92526393ee6518ae30e1066dc36d6aa",
        "address": "0x63e7566e0d2cABe72EfA78EBa07f995361f7Dd70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f79ee8f8fa862e98201120d83c4ec39d9468d49"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x27008bb0b7f05eb60adbf089278df8082b7fa2e9489b61731f8b4ccc6d0d6718"
      }
    ],
    "blockNumber": 63954164,
    "cumulativeGasUsed": "7464627",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1D48E06d9ed284285da43fAB84190368F85238Ec",
    "0x2ff23716b1CB9D414EFeFBDB4f4c711345035B6E",
    "0xC528b9ED5d56d1D0d3C18A2342954CE1069138a4",
    "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ddc16c2f322caa059d8d7c4ac5e63ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"referenceOracle_\",\"type\":\"address\"},{\"internalType\":\"contract IRebalancer\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"contract IBookManager\",\"name\":\"bookManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedsThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"UpdateConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bookManager\",\"outputs\":[{\"internalType\":\"contract IBookManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"computeOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersA\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"Tick\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint64\",\"name\":\"rawAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrategy.Order[]\",\"name\":\"ordersB\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint208\",\"name\":\"oraclePrice\",\"type\":\"uint208\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"isOraclePriceValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"contract IRebalancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"referenceThreshold\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"rateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"minRateB\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdA\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"priceThresholdB\",\"type\":\"uint24\"}],\"internalType\":\"struct ISimpleOracleStrategy.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"},{\"internalType\":\"Tick\",\"name\":\"tickA\",\"type\":\"int24\"},{\"internalType\":\"Tick\",\"name\":\"tickB\",\"type\":\"int24\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/SimpleOracleStrategy.sol\":\"SimpleOracleStrategy\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x08b074ae1b12e70ce24d1335086ec5a418934311a6771d9f61fe24d392050e12\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9f21f1bcc51daf7fe3998608d7eeb96b16a9c3816898a0cf6a9407bd105c9253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xde02e3a80c5c3b3a2187fbfbdfc7ed7c8c0d5b2e4a0ff5671611674b6c96bd91\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe0e3a2099f2e2ce3579dd35548f613928739642058dfec95b1745f93364ce3de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x80b4189de089dc632b752b365a16c5063b58cc24da0dd38b82f2c25f56d25c84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n}\\n\",\"keccak256\":\"0x1b0625096e82d06abdcf1844172ef78ef54a5e878761f4d905fda07eaf098424\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd59334ed58b8884cd1f775afc9400db702e674e5d6a7a438c655b9de788d7e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IBookManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {BookId} from \\\"../libraries/BookId.sol\\\";\\nimport {Currency} from \\\"../libraries/Currency.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\nimport {Tick} from \\\"../libraries/Tick.sol\\\";\\nimport {FeePolicy} from \\\"../libraries/FeePolicy.sol\\\";\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {IHooks} from \\\"./IHooks.sol\\\";\\n\\n/**\\n * @title IBookManager\\n * @notice The interface for the BookManager contract\\n */\\ninterface IBookManager is IERC721Metadata, IERC721Permit {\\n    error InvalidUnitSize();\\n    error InvalidFeePolicy();\\n    error InvalidProvider(address provider);\\n    error LockedBy(address locker, address hook);\\n    error CurrencyNotSettled();\\n\\n    /**\\n     * @notice Event emitted when a new book is opened\\n     * @param id The book id\\n     * @param base The base currency\\n     * @param quote The quote currency\\n     * @param unitSize The unit size of the book\\n     * @param makerPolicy The maker fee policy\\n     * @param takerPolicy The taker fee policy\\n     * @param hooks The hooks contract\\n     */\\n    event Open(\\n        BookId indexed id,\\n        Currency indexed base,\\n        Currency indexed quote,\\n        uint64 unitSize,\\n        FeePolicy makerPolicy,\\n        FeePolicy takerPolicy,\\n        IHooks hooks\\n    );\\n\\n    /**\\n     * @notice Event emitted when a new order is made\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param orderIndex The order index\\n     * @param unit The order unit\\n     * @param provider The provider address\\n     */\\n    event Make(\\n        BookId indexed bookId, address indexed user, Tick tick, uint256 orderIndex, uint64 unit, address provider\\n    );\\n\\n    /**\\n     * @notice Event emitted when an order is taken\\n     * @param bookId The book id\\n     * @param user The user address\\n     * @param tick The order tick\\n     * @param unit The order unit\\n     */\\n    event Take(BookId indexed bookId, address indexed user, Tick tick, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is canceled\\n     * @param orderId The order id\\n     * @param unit The canceled unit\\n     */\\n    event Cancel(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when an order is claimed\\n     * @param orderId The order id\\n     * @param unit The claimed unit\\n     */\\n    event Claim(OrderId indexed orderId, uint64 unit);\\n\\n    /**\\n     * @notice Event emitted when a provider is whitelisted\\n     * @param provider The provider address\\n     */\\n    event Whitelist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider is delisted\\n     * @param provider The provider address\\n     */\\n    event Delist(address indexed provider);\\n\\n    /**\\n     * @notice Event emitted when a provider collects fees\\n     * @param provider The provider address\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @param amount The collected amount\\n     */\\n    event Collect(address indexed provider, address indexed recipient, Currency indexed currency, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when new default provider is set\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    event SetDefaultProvider(address indexed newDefaultProvider);\\n\\n    /**\\n     * @notice This structure represents a unique identifier for a book in the BookManager.\\n     * @param base The base currency of the book\\n     * @param unitSize The unit size of the book\\n     * @param quote The quote currency of the book\\n     * @param makerPolicy The maker fee policy of the book\\n     * @param hooks The hooks contract of the book\\n     * @param takerPolicy The taker fee policy of the book\\n     */\\n    struct BookKey {\\n        Currency base;\\n        uint64 unitSize;\\n        Currency quote;\\n        FeePolicy makerPolicy;\\n        IHooks hooks;\\n        FeePolicy takerPolicy;\\n    }\\n\\n    /**\\n     * @notice Returns the base URI\\n     * @return The base URI\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI\\n     * @return The contract URI\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the default provider\\n     * @return The default provider\\n     */\\n    function defaultProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the total reserves of a given currency\\n     * @param currency The currency in question\\n     * @return The total reserves amount\\n     */\\n    function reservesOf(Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a provider is whitelisted\\n     * @param provider The address of the provider\\n     * @return True if the provider is whitelisted, false otherwise\\n     */\\n    function isWhitelisted(address provider) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies if an owner has authorized a spender for a token\\n     * @param owner The address of the token owner\\n     * @param spender The address of the spender\\n     * @param tokenId The token ID\\n     */\\n    function checkAuthorized(address owner, address spender, uint256 tokenId) external view;\\n\\n    /**\\n     * @notice Calculates the amount owed to a provider in a given currency\\n     * @param provider The provider's address\\n     * @param currency The currency in question\\n     * @return The owed amount\\n     */\\n    function tokenOwed(address provider, Currency currency) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the currency balance changes for a given locker\\n     * @param locker The address of the locker\\n     * @param currency The currency in question\\n     * @return The net change in currency balance\\n     */\\n    function getCurrencyDelta(address locker, Currency currency) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the book key for a given book ID\\n     * @param id The book ID\\n     * @return The book key\\n     */\\n    function getBookKey(BookId id) external view returns (BookKey memory);\\n\\n    /**\\n     * @notice This structure represents a current status for an order in the BookManager.\\n     * @param provider The provider of the order\\n     * @param open The open unit of the order\\n     * @param claimable The claimable unit of the order\\n     */\\n    struct OrderInfo {\\n        address provider;\\n        uint64 open;\\n        uint64 claimable;\\n    }\\n\\n    /**\\n     * @notice Provides information about an order\\n     * @param id The order ID\\n     * @return Order information including provider, open status, and claimable unit\\n     */\\n    function getOrder(OrderId id) external view returns (OrderInfo memory);\\n\\n    /**\\n     * @notice Retrieves the locker and caller addresses for a given lock\\n     * @param i The index of the lock\\n     * @return locker The locker's address\\n     * @return lockCaller The caller's address\\n     */\\n    function getLock(uint256 i) external view returns (address locker, address lockCaller);\\n\\n    /**\\n     * @notice Provides the lock data\\n     * @return The lock data including necessary numeric values\\n     */\\n    function getLockData() external view returns (uint128, uint128);\\n\\n    /**\\n     * @notice Returns the depth of a given book ID and tick\\n     * @param id The book ID\\n     * @param tick The tick\\n     * @return The depth of the tick\\n     */\\n    function getDepth(BookId id, Tick tick) external view returns (uint64);\\n\\n    /**\\n     * @notice Retrieves the highest tick for a given book ID\\n     * @param id The book ID\\n     * @return tick The highest tick\\n     */\\n    function getHighest(BookId id) external view returns (Tick tick);\\n\\n    /**\\n     * @notice Finds the maximum tick less than a specified tick in a book\\n     * @dev Returns `Tick.wrap(type(int24).min)` if the specified tick is the lowest\\n     * @param id The book ID\\n     * @param tick The specified tick\\n     * @return The next lower tick\\n     */\\n    function maxLessThan(BookId id, Tick tick) external view returns (Tick);\\n\\n    /**\\n     * @notice Checks if a book is opened\\n     * @param id The book ID\\n     * @return True if the book is opened, false otherwise\\n     */\\n    function isOpened(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a book is empty\\n     * @param id The book ID\\n     * @return True if the book is empty, false otherwise\\n     */\\n    function isEmpty(BookId id) external view returns (bool);\\n\\n    /**\\n     * @notice Encodes a BookKey into a BookId\\n     * @param key The BookKey to encode\\n     * @return The encoded BookId\\n     */\\n    function encodeBookKey(BookKey calldata key) external pure returns (BookId);\\n\\n    /**\\n     * @notice Loads a value from a specific storage slot\\n     * @param slot The storage slot\\n     * @return The value in the slot\\n     */\\n    function load(bytes32 slot) external view returns (bytes32);\\n\\n    /**\\n     * @notice Loads a sequence of values starting from a specific slot\\n     * @param startSlot The starting slot\\n     * @param nSlot The number of slots to load\\n     * @return The sequence of values\\n     */\\n    function load(bytes32 startSlot, uint256 nSlot) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Opens a new book\\n     * @param key The book key\\n     * @param hookData The hook data\\n     */\\n    function open(BookKey calldata key, bytes calldata hookData) external;\\n\\n    /**\\n     * @notice Locks a book manager function\\n     * @param locker The locker address\\n     * @param data The lock data\\n     * @return The lock return data\\n     */\\n    function lock(address locker, bytes calldata data) external returns (bytes memory);\\n\\n    /**\\n     * @notice This structure represents the parameters for making an order.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param unit The unit for the order. Times key.unitSize to get actual bid amount.\\n     * @param provider The provider for the order. The limit order service provider address to collect fees.\\n     */\\n    struct MakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 unit;\\n        address provider;\\n    }\\n\\n    /**\\n     * @notice Make a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return id The order id. Returns 0 if the order is not settled\\n     * @return quoteAmount The amount of quote currency to be paid\\n     */\\n    function make(MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (OrderId id, uint256 quoteAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for taking orders in the specified tick.\\n     * @param key The book key for the order\\n     * @param tick The tick for the order\\n     * @param maxUnit The max unit to take\\n     */\\n    struct TakeParams {\\n        BookKey key;\\n        Tick tick;\\n        uint64 maxUnit;\\n    }\\n\\n    /**\\n     * @notice Take a limit order at specific tick\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return quoteAmount The amount of quote currency to be received\\n     * @return baseAmount The amount of base currency to be paid\\n     */\\n    function take(TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (uint256 quoteAmount, uint256 baseAmount);\\n\\n    /**\\n     * @notice This structure represents the parameters for canceling an order.\\n     * @param id The order id for the order\\n     * @param toUnit The remaining open unit for the order after cancellation. Must not exceed the current open unit.\\n     */\\n    struct CancelParams {\\n        OrderId id;\\n        uint64 toUnit;\\n    }\\n\\n    /**\\n     * @notice Cancel a limit order\\n     * @param params The order parameters\\n     * @param hookData The hook data\\n     * @return canceledAmount The amount of quote currency canceled\\n     */\\n    function cancel(CancelParams calldata params, bytes calldata hookData) external returns (uint256 canceledAmount);\\n\\n    /**\\n     * @notice Claims an order\\n     * @param id The order ID\\n     * @param hookData The hook data\\n     * @return claimedAmount The amount claimed\\n     */\\n    function claim(OrderId id, bytes calldata hookData) external returns (uint256 claimedAmount);\\n\\n    /**\\n     * @notice Collects fees from a provider\\n     * @param recipient The recipient address\\n     * @param currency The currency\\n     * @return The collected amount\\n     */\\n    function collect(address recipient, Currency currency) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws a currency\\n     * @param currency The currency\\n     * @param to The recipient address\\n     * @param amount The amount\\n     */\\n    function withdraw(Currency currency, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Settles a currency\\n     * @param currency The currency\\n     * @return The settled amount\\n     */\\n    function settle(Currency currency) external payable returns (uint256);\\n\\n    /**\\n     * @notice Whitelists a provider\\n     * @param provider The provider address\\n     */\\n    function whitelist(address provider) external;\\n\\n    /**\\n     * @notice Delists a provider\\n     * @param provider The provider address\\n     */\\n    function delist(address provider) external;\\n\\n    /**\\n     * @notice Sets the default provider\\n     * @param newDefaultProvider The new default provider address\\n     */\\n    function setDefaultProvider(address newDefaultProvider) external;\\n}\\n\",\"keccak256\":\"0xda8dffc751ac3554033e084919f1e431eb2585c80e1e30b9a0198366a8607086\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title IERC721Permit\\n * @notice An interface for the ERC721 permit extension\\n */\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    /**\\n     * @notice The EIP-712 typehash for the permit struct used by the contract\\n     */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /**\\n     * @notice The EIP-712 domain separator for this contract\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Approve the spender to transfer the given tokenId\\n     * @param spender The address to approve\\n     * @param tokenId The tokenId to approve\\n     * @param deadline The deadline for the signature\\n     * @param v The recovery id of the signature\\n     * @param r The r value of the signature\\n     * @param s The s value of the signature\\n     */\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Get the current nonce for a token\\n     * @param tokenId The tokenId to get the nonce for\\n     * @return The current nonce\\n     */\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6baab4710fa674981395f428bd6550c4e288ac44a1a5d38c2a58fd67234d57e\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"./IBookManager.sol\\\";\\nimport {OrderId} from \\\"../libraries/OrderId.sol\\\";\\n\\n/**\\n * @title IHooks\\n * @notice Interface for the hooks contract\\n */\\ninterface IHooks {\\n    /**\\n     * @notice Hook called before opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after opening a new book\\n     * @param sender The sender of the open transaction\\n     * @param key The key of the book being opened\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterOpen(address sender, IBookManager.BookKey calldata key, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeMake(address sender, IBookManager.MakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after making a new order\\n     * @param sender The sender of the make transaction\\n     * @param params The parameters of the make transaction\\n     * @param orderId The id of the order that was made\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterMake(\\n        address sender,\\n        IBookManager.MakeParams calldata params,\\n        OrderId orderId,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeTake(address sender, IBookManager.TakeParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after taking an order\\n     * @param sender The sender of the take transaction\\n     * @param params The parameters of the take transaction\\n     * @param takenUnit The unit that was taken\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterTake(\\n        address sender,\\n        IBookManager.TakeParams calldata params,\\n        uint64 takenUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeCancel(address sender, IBookManager.CancelParams calldata params, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after canceling an order\\n     * @param sender The sender of the cancel transaction\\n     * @param params The parameters of the cancel transaction\\n     * @param canceledUnit The unit that was canceled\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterCancel(\\n        address sender,\\n        IBookManager.CancelParams calldata params,\\n        uint64 canceledUnit,\\n        bytes calldata hookData\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called before claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function beforeClaim(address sender, OrderId orderId, bytes calldata hookData) external returns (bytes4);\\n\\n    /**\\n     * @notice Hook called after claiming an order\\n     * @param sender The sender of the claim transaction\\n     * @param orderId The id of the order being claimed\\n     * @param claimedUnit The unit that was claimed\\n     * @param hookData The data passed to the hook\\n     * @return Returns the function selector if the hook is successful\\n     */\\n    function afterClaim(address sender, OrderId orderId, uint64 claimedUnit, bytes calldata hookData)\\n        external\\n        returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbff95e07debd7d51cb3aa79172fd3c31efb57cea1c03d21b5740a565198d8343\",\"license\":\"MIT\"},\"clober-dex/v2-core/interfaces/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILocker\\n * @notice Interface for the locker contract\\n */\\ninterface ILocker {\\n    /**\\n     * @notice Called by the book manager on `msg.sender` when a lock is acquired\\n     * @param data The data that was passed to the call to lock\\n     * @return Any data that you want to be returned from the lock call\\n     */\\n    function lockAcquired(address lockCaller, bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x664833ea7804ad5cbbe89f5b36169c6a2c19ef577c1dfb9418ddea290ed19106\",\"license\":\"MIT\"},\"clober-dex/v2-core/libraries/BookId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBookManager} from \\\"../interfaces/IBookManager.sol\\\";\\n\\ntype BookId is uint192;\\n\\nlibrary BookIdLibrary {\\n    function toId(IBookManager.BookKey memory bookKey) internal pure returns (BookId id) {\\n        bytes32 hash = keccak256(abi.encode(bookKey));\\n        assembly {\\n            id := and(hash, 0xffffffffffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f9ed99dfb9a5ce14c29359a5ad8b43de0c756e44b2e5f581e8ea6db7cacbeb\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Currency.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ntype Currency is address;\\n\\n/// @title CurrencyLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary CurrencyLibrary {\\n    using CurrencyLibrary for Currency;\\n\\n    /// @notice Thrown when a native transfer fails\\n    error NativeTransferFailed();\\n\\n    /// @notice Thrown when an ERC20 transfer fails\\n    error ERC20TransferFailed();\\n\\n    Currency public constant NATIVE = Currency.wrap(address(0));\\n\\n    function transfer(Currency currency, address to, uint256 amount) internal {\\n        // implementation from\\n        // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n        bool success;\\n        if (currency.isNative()) {\\n            assembly {\\n                // Transfer the ETH and store if it succeeded or not.\\n                success := call(gas(), to, amount, 0, 0, 0, 0)\\n            }\\n\\n            if (!success) revert NativeTransferFailed();\\n        } else {\\n            assembly {\\n                // Get a pointer to some free memory.\\n                let freeMemoryPointer := mload(0x40)\\n\\n                // Write the abi-encoded calldata into memory, beginning with the function selector.\\n                mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n                mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n                mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n                success :=\\n                    and(\\n                        // Set success to whether the call reverted, if not we check it either\\n                        // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                        or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                        // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                        // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                        // Counterintuitively, this call must be positioned second to the or() call in the\\n                        // surrounding and() call or else returndatasize() will be zero during the computation.\\n                        call(gas(), currency, 0, freeMemoryPointer, 68, 0, 32)\\n                    )\\n            }\\n\\n            if (!success) revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    function balanceOfSelf(Currency currency) internal view returns (uint256) {\\n        if (currency.isNative()) return address(this).balance;\\n        else return IERC20(Currency.unwrap(currency)).balanceOf(address(this));\\n    }\\n\\n    function equals(Currency currency, Currency other) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(other);\\n    }\\n\\n    function isNative(Currency currency) internal pure returns (bool) {\\n        return Currency.unwrap(currency) == Currency.unwrap(NATIVE);\\n    }\\n\\n    function toId(Currency currency) internal pure returns (uint256) {\\n        return uint160(Currency.unwrap(currency));\\n    }\\n\\n    function fromId(uint256 id) internal pure returns (Currency) {\\n        return Currency.wrap(address(uint160(id)));\\n    }\\n}\\n\",\"keccak256\":\"0xf04f76015a51981ad0f84fd3ebb0a4eb6c31685604c22584669915aa8dd7ac54\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/FeePolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype FeePolicy is uint24;\\n\\nlibrary FeePolicyLibrary {\\n    uint256 internal constant RATE_PRECISION = 10 ** 6;\\n    int256 internal constant MAX_FEE_RATE = 500000;\\n    int256 internal constant MIN_FEE_RATE = -500000;\\n\\n    uint256 internal constant RATE_MASK = 0x7fffff; // 23 bits\\n\\n    error InvalidFeePolicy();\\n\\n    function encode(bool usesQuote_, int24 rate_) internal pure returns (FeePolicy feePolicy) {\\n        if (rate_ > MAX_FEE_RATE || rate_ < MIN_FEE_RATE) {\\n            revert InvalidFeePolicy();\\n        }\\n\\n        uint256 mask = usesQuote_ ? 1 << 23 : 0;\\n        assembly {\\n            feePolicy := or(mask, add(and(rate_, 0xffffff), MAX_FEE_RATE))\\n        }\\n    }\\n\\n    function isValid(FeePolicy self) internal pure returns (bool) {\\n        int24 r = rate(self);\\n\\n        return !(r > MAX_FEE_RATE || r < MIN_FEE_RATE);\\n    }\\n\\n    function usesQuote(FeePolicy self) internal pure returns (bool f) {\\n        assembly {\\n            f := shr(23, self)\\n        }\\n    }\\n\\n    function rate(FeePolicy self) internal pure returns (int24 r) {\\n        assembly {\\n            r := sub(and(self, RATE_MASK), MAX_FEE_RATE)\\n        }\\n    }\\n\\n    function calculateFee(FeePolicy self, uint256 amount, bool reverseRounding) internal pure returns (int256 fee) {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 absRate;\\n        unchecked {\\n            absRate = uint256(uint24(positive ? r : -r));\\n        }\\n        // @dev absFee must be less than type(int256).max\\n        uint256 absFee = Math.divide(amount * absRate, RATE_PRECISION, reverseRounding ? !positive : positive);\\n        fee = positive ? int256(absFee) : -int256(absFee);\\n    }\\n\\n    function calculateOriginalAmount(FeePolicy self, uint256 amount, bool reverseFee)\\n        internal\\n        pure\\n        returns (uint256 originalAmount)\\n    {\\n        int24 r = rate(self);\\n\\n        bool positive = r > 0;\\n        uint256 divider;\\n        assembly {\\n            if reverseFee { r := sub(0, r) }\\n            divider := add(RATE_PRECISION, r)\\n        }\\n        originalAmount = Math.divide(amount * RATE_PRECISION, divider, positive);\\n    }\\n}\\n\",\"keccak256\":\"0x91f98ffef9d8a0bb460bcbc31d10820d9a1bee9bbf3df04eef23ca2937a4a26a\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    function divide(uint256 a, uint256 b, bool roundingUp) internal pure returns (uint256 ret) {\\n        // In the OrderBook contract code, b is never zero.\\n        assembly {\\n            ret := add(div(a, b), and(gt(mod(a, b), 0), roundingUp))\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                    sar(96, mul(add(24828157081833163892658089445524,\\n                        sar(96, mul(add(3273285459638523848632254066296,\\n                            x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Base conversion: mul `2**96 / (5**18 * 2**192)`.\\n            r := sdiv(p, 302231454903657293676544000000000000000000)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb2dc502dd66a9e36e6c4bb8c4fb3d21120f9f0ff7a934dcfe21ec820cac72275\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/OrderId.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Tick} from \\\"./Tick.sol\\\";\\nimport {BookId} from \\\"./BookId.sol\\\";\\n\\ntype OrderId is uint256;\\n\\nlibrary OrderIdLibrary {\\n    /**\\n     * @dev Encode the order id.\\n     * @param bookId The book id.\\n     * @param tick The tick.\\n     * @param index The index.\\n     * @return id The order id.\\n     */\\n    function encode(BookId bookId, Tick tick, uint40 index) internal pure returns (OrderId id) {\\n        // @dev If we just use tick at the assembly code, the code will convert tick into bytes32.\\n        //      e.g. When index == -2, the shifted value( shl(40, tick) ) will be\\n        //      0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000 instead of 0xfffffffe0000000000\\n        //      Therefore, we have to safely cast tick into uint256 first.\\n        uint256 _tick = uint256(uint24(Tick.unwrap(tick)));\\n        assembly {\\n            id := add(index, add(shl(40, _tick), shl(64, bookId)))\\n        }\\n    }\\n\\n    function decode(OrderId id) internal pure returns (BookId bookId, Tick tick, uint40 index) {\\n        assembly {\\n            bookId := shr(64, id)\\n            tick := and(shr(40, id), 0xffffff)\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n\\n    function getBookId(OrderId id) internal pure returns (BookId bookId) {\\n        assembly {\\n            bookId := shr(64, id)\\n        }\\n    }\\n\\n    function getTick(OrderId id) internal pure returns (Tick tick) {\\n        assembly {\\n            tick := and(shr(40, id), 0xffffff)\\n        }\\n    }\\n\\n    function getIndex(OrderId id) internal pure returns (uint40 index) {\\n        assembly {\\n            index := and(id, 0xffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78c384badc4971d774987c6f5bce9d578712c7469688735b3c1eafaf2e748fe6\",\"license\":\"GPL-2.0-or-later\"},\"clober-dex/v2-core/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./Math.sol\\\";\\n\\ntype Tick is int24;\\n\\nlibrary TickLibrary {\\n    using Math for *;\\n    using TickLibrary for Tick;\\n\\n    error InvalidTick();\\n    error InvalidPrice();\\n    error TickOverflow();\\n\\n    int24 internal constant MAX_TICK = 2 ** 19 - 1;\\n    int24 internal constant MIN_TICK = -MAX_TICK;\\n\\n    uint256 internal constant MIN_PRICE = 1350587;\\n    uint256 internal constant MAX_PRICE = 4647684107270898330752324302845848816923571339324334;\\n\\n    uint256 private constant _R0 = 0xfff97272373d413259a46990;\\n    uint256 private constant _R1 = 0xfff2e50f5f656932ef12357c;\\n    uint256 private constant _R2 = 0xffe5caca7e10e4e61c3624ea;\\n    uint256 private constant _R3 = 0xffcb9843d60f6159c9db5883;\\n    uint256 private constant _R4 = 0xff973b41fa98c081472e6896;\\n    uint256 private constant _R5 = 0xff2ea16466c96a3843ec78b3;\\n    uint256 private constant _R6 = 0xfe5dee046a99a2a811c461f1;\\n    uint256 private constant _R7 = 0xfcbe86c7900a88aedcffc83b;\\n    uint256 private constant _R8 = 0xf987a7253ac413176f2b074c;\\n    uint256 private constant _R9 = 0xf3392b0822b70005940c7a39;\\n    uint256 private constant _R10 = 0xe7159475a2c29b7443b29c7f;\\n    uint256 private constant _R11 = 0xd097f3bdfd2022b8845ad8f7;\\n    uint256 private constant _R12 = 0xa9f746462d870fdf8a65dc1f;\\n    uint256 private constant _R13 = 0x70d869a156d2a1b890bb3df6;\\n    uint256 private constant _R14 = 0x31be135f97d08fd981231505;\\n    uint256 private constant _R15 = 0x9aa508b5b7a84e1c677de54;\\n    uint256 private constant _R16 = 0x5d6af8dedb81196699c329;\\n    uint256 private constant _R17 = 0x2216e584f5fa1ea92604;\\n    uint256 private constant _R18 = 0x48a170391f7dc42;\\n    uint256 private constant _R19 = 0x149b34;\\n\\n    function validateTick(Tick tick) internal pure {\\n        if (Tick.unwrap(tick) > MAX_TICK || Tick.unwrap(tick) < MIN_TICK) revert InvalidTick();\\n    }\\n\\n    modifier validatePrice(uint256 price) {\\n        if (price > MAX_PRICE || price < MIN_PRICE) revert InvalidPrice();\\n        _;\\n    }\\n\\n    function fromPrice(uint256 price) internal pure validatePrice(price) returns (Tick) {\\n        unchecked {\\n            int24 tick = int24((int256(price).lnWad() * 42951820407860) / 2 ** 128);\\n            if (toPrice(Tick.wrap(tick)) > price) return Tick.wrap(tick - 1);\\n            return Tick.wrap(tick);\\n        }\\n    }\\n\\n    function toPrice(Tick tick) internal pure returns (uint256 price) {\\n        validateTick(tick);\\n        int24 tickValue = Tick.unwrap(tick);\\n        uint256 absTick = uint24(tickValue < 0 ? -tickValue : tickValue);\\n\\n        unchecked {\\n            if (absTick & 0x1 != 0) price = _R0;\\n            else price = 1 << 96;\\n            if (absTick & 0x2 != 0) price = (price * _R1) >> 96;\\n            if (absTick & 0x4 != 0) price = (price * _R2) >> 96;\\n            if (absTick & 0x8 != 0) price = (price * _R3) >> 96;\\n            if (absTick & 0x10 != 0) price = (price * _R4) >> 96;\\n            if (absTick & 0x20 != 0) price = (price * _R5) >> 96;\\n            if (absTick & 0x40 != 0) price = (price * _R6) >> 96;\\n            if (absTick & 0x80 != 0) price = (price * _R7) >> 96;\\n            if (absTick & 0x100 != 0) price = (price * _R8) >> 96;\\n            if (absTick & 0x200 != 0) price = (price * _R9) >> 96;\\n            if (absTick & 0x400 != 0) price = (price * _R10) >> 96;\\n            if (absTick & 0x800 != 0) price = (price * _R11) >> 96;\\n            if (absTick & 0x1000 != 0) price = (price * _R12) >> 96;\\n            if (absTick & 0x2000 != 0) price = (price * _R13) >> 96;\\n            if (absTick & 0x4000 != 0) price = (price * _R14) >> 96;\\n            if (absTick & 0x8000 != 0) price = (price * _R15) >> 96;\\n            if (absTick & 0x10000 != 0) price = (price * _R16) >> 96;\\n            if (absTick & 0x20000 != 0) price = (price * _R17) >> 96;\\n            if (absTick & 0x40000 != 0) price = (price * _R18) >> 96;\\n        }\\n        if (tickValue > 0) price = 0x1000000000000000000000000000000000000000000000000 / price;\\n    }\\n\\n    function gt(Tick a, Tick b) internal pure returns (bool) {\\n        return Tick.unwrap(a) > Tick.unwrap(b);\\n    }\\n\\n    function baseToQuote(Tick tick, uint256 base, bool roundingUp) internal pure returns (uint256) {\\n        return Math.divide((base * tick.toPrice()), 1 << 96, roundingUp);\\n    }\\n\\n    function quoteToBase(Tick tick, uint256 quote, bool roundingUp) internal pure returns (uint256) {\\n        // @dev quote = unit(uint64) * unitSize(uint64) < 2^96\\n        //      We don't need to check overflow here\\n        return Math.divide(quote << 96, tick.toPrice(), roundingUp);\\n    }\\n}\\n\",\"keccak256\":\"0xffbe19efd2b2e4e1eee3ed15c9363f5c45d70a6058b0b85ec9199e34de3b6b9b\",\"license\":\"GPL-2.0-or-later\"},\"solmate/tokens/ERC6909.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC6909 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC6909.sol)\\nabstract contract ERC6909 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OperatorSet(address indexed owner, address indexed operator, bool approved);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\\n\\n    event Transfer(address caller, address indexed from, address indexed to, uint256 indexed id, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC6909 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(address => bool)) public isOperator;\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6909 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transfer(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        balanceOf[msg.sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, msg.sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (msg.sender != sender && !isOperator[sender][msg.sender]) {\\n            uint256 allowed = allowance[sender][msg.sender][id];\\n            if (allowed != type(uint256).max) allowance[sender][msg.sender][id] = allowed - amount;\\n        }\\n\\n        balanceOf[sender][id] -= amount;\\n\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, sender, receiver, id, amount);\\n\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        allowance[msg.sender][spender][id] = amount;\\n\\n        emit Approval(msg.sender, spender, id, amount);\\n\\n        return true;\\n    }\\n\\n    function setOperator(address operator, bool approved) public virtual returns (bool) {\\n        isOperator[msg.sender][operator] = approved;\\n\\n        emit OperatorSet(msg.sender, operator, approved);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x0f632fb3; // ERC165 Interface ID for ERC6909\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address receiver,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[receiver][id] += amount;\\n\\n        emit Transfer(msg.sender, address(0), receiver, id, amount);\\n    }\\n\\n    function _burn(\\n        address sender,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[sender][id] -= amount;\\n\\n        emit Transfer(msg.sender, sender, address(0), id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x767ed60e11d739ed7eb9e10467eb0e0573293238b7a2a56f96b23f145297f1d2\",\"license\":\"MIT\"},\"solmate/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"},\"src/SimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISimpleOracleStrategy.sol\\\";\\n\\ncontract SimpleOracleStrategy is ISimpleOracleStrategy, Ownable2Step {\\n    using CurrencyLibrary for Currency;\\n    using FeePolicyLibrary for FeePolicy;\\n    using TickLibrary for Tick;\\n\\n    uint256 public constant RATE_PRECISION = 1e6;\\n\\n    IOracle public immutable referenceOracle;\\n    IRebalancer public immutable rebalancer;\\n    IBookManager public immutable bookManager;\\n\\n    mapping(address => bool) public isOperator;\\n    mapping(bytes32 => Config) internal _configs;\\n    mapping(bytes32 => Price) internal _prices;\\n\\n    modifier onlyOperator() {\\n        if (!isOperator[msg.sender]) revert NotOperator();\\n        _;\\n    }\\n\\n    constructor(IOracle referenceOracle_, IRebalancer rebalancer_, IBookManager bookManager_, address initialOwner)\\n        Ownable(initialOwner)\\n    {\\n        referenceOracle = referenceOracle_;\\n        rebalancer = rebalancer_;\\n        bookManager = bookManager_;\\n    }\\n\\n    function getConfig(bytes32 key) external view returns (Config memory) {\\n        return _configs[key];\\n    }\\n\\n    function getPrice(bytes32 key) external view returns (Price memory) {\\n        return _prices[key];\\n    }\\n\\n    function computeOrders(bytes32 key, uint256 amountA, uint256 amountB)\\n        external\\n        view\\n        returns (Order[] memory ordersA, Order[] memory ordersB)\\n    {\\n        Config memory config = _configs[key];\\n        Price memory price = _prices[key];\\n\\n        IBookManager.BookKey memory bookKeyA;\\n        IBookManager.BookKey memory bookKeyB;\\n        {\\n            (BookId bookIdA, BookId bookIdB) = rebalancer.getBookPairs(key);\\n            bookKeyA = bookManager.getBookKey(bookIdA);\\n            bookKeyB = bookManager.getBookKey(bookIdB);\\n        }\\n\\n        if (!_isOraclePriceValid(price.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base)) {\\n            return (ordersA, ordersB);\\n        }\\n\\n        // SimpleStrategy has only one bid and one ask order\\n        ordersA = new Order[](1);\\n        ordersB = new Order[](1);\\n\\n        (amountA, amountB) = _calculateAmounts(\\n            amountA,\\n            amountB,\\n            price.oraclePrice,\\n            _getCurrencyDecimals(bookKeyA.quote),\\n            _getCurrencyDecimals(bookKeyA.base),\\n            config\\n        );\\n\\n        if (bookKeyA.makerPolicy.usesQuote()) amountA = bookKeyA.makerPolicy.calculateOriginalAmount(amountA, false);\\n        if (bookKeyB.makerPolicy.usesQuote()) amountB = bookKeyB.makerPolicy.calculateOriginalAmount(amountB, false);\\n\\n        ordersA[0] = Order({tick: price.tickA, rawAmount: SafeCast.toUint64(amountA / bookKeyA.unitSize)});\\n        ordersB[0] = Order({tick: price.tickB, rawAmount: SafeCast.toUint64(amountB / bookKeyB.unitSize)});\\n    }\\n\\n    function _calculateAmounts(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 oraclePrice,\\n        uint8 decimalsA,\\n        uint8 decimalsB,\\n        Config memory config\\n    ) internal view returns (uint256 resultA, uint256 resultB) {\\n        // @dev Use the same decimals for both amounts to calculate the value properly\\n        if (decimalsA > decimalsB) {\\n            amountB = amountB * 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            amountA = amountA * 10 ** (decimalsB - decimalsA);\\n        }\\n\\n        resultA = amountA * config.rateA / RATE_PRECISION;\\n        resultB = amountB * config.rateB / RATE_PRECISION;\\n\\n        uint256 basePrice = 10 ** referenceOracle.decimals();\\n        uint256 valueA = resultA * basePrice;\\n        uint256 valueB = resultB * oraclePrice;\\n\\n        if (valueA > valueB) {\\n            resultA = valueB / basePrice;\\n            valueA = resultA * basePrice;\\n        } else {\\n            resultB = valueA / oraclePrice;\\n            valueB = resultB * oraclePrice;\\n        }\\n\\n        if (valueA < amountA * config.minRateA / RATE_PRECISION * basePrice) {\\n            resultA = amountA * config.minRateA / RATE_PRECISION;\\n        }\\n        if (valueB < amountB * config.minRateB / RATE_PRECISION * oraclePrice) {\\n            resultB = amountB * config.minRateB / RATE_PRECISION;\\n        }\\n\\n        // @dev Turn back to original decimals\\n        if (decimalsA > decimalsB) {\\n            resultB = resultB / 10 ** (decimalsA - decimalsB);\\n        } else if (decimalsA < decimalsB) {\\n            resultA = resultA / 10 ** (decimalsB - decimalsA);\\n        }\\n    }\\n\\n    function isOraclePriceValid(bytes32 key) external view returns (bool) {\\n        Config memory config = _configs[key];\\n        Price memory price = _prices[key];\\n\\n        (BookId bookIdA,) = rebalancer.getBookPairs(key);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n\\n        return _isOraclePriceValid(price.oraclePrice, config.referenceThreshold, bookKeyA.quote, bookKeyA.base);\\n    }\\n\\n    function _isOraclePriceValid(\\n        uint256 oraclePrice,\\n        uint256 referenceThreshold,\\n        Currency currencyA,\\n        Currency currencyB\\n    ) internal view returns (bool) {\\n        uint256 referencePrice;\\n        address[] memory assets = new address[](2);\\n        assets[0] = Currency.unwrap(currencyA);\\n        assets[1] = Currency.unwrap(currencyB);\\n\\n        try referenceOracle.getAssetsPrices(assets) returns (uint256[] memory prices) {\\n            // price = basePrice / quotePrice\\n            referencePrice = prices[1] * 10 ** referenceOracle.decimals() / prices[0];\\n        } catch {\\n            return false;\\n        }\\n\\n        if (\\n            referencePrice * (RATE_PRECISION + referenceThreshold) / RATE_PRECISION < oraclePrice\\n                || referencePrice * (RATE_PRECISION - referenceThreshold) / RATE_PRECISION > oraclePrice\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function updatePrice(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB) external onlyOperator {\\n        uint256 priceA = tickA.toPrice();\\n        uint256 priceB = Tick.wrap(-Tick.unwrap(tickB)).toPrice();\\n\\n        if (priceA >= priceB) revert InvalidPrice();\\n\\n        Config memory config = _configs[key];\\n        if (\\n            oraclePrice * (RATE_PRECISION + config.priceThresholdA) / RATE_PRECISION < priceA\\n                || oraclePrice * (RATE_PRECISION - config.priceThresholdA) / RATE_PRECISION > priceA\\n                || oraclePrice * (RATE_PRECISION + config.priceThresholdB) / RATE_PRECISION < priceB\\n                || oraclePrice * (RATE_PRECISION - config.priceThresholdB) / RATE_PRECISION > priceB\\n        ) revert ExceedsThreshold();\\n\\n        (BookId bookIdA,) = rebalancer.getBookPairs(key);\\n\\n        IBookManager.BookKey memory bookKeyA = bookManager.getBookKey(bookIdA);\\n        uint8 decimalsA = _getCurrencyDecimals(bookKeyA.quote);\\n        uint8 decimalsB = _getCurrencyDecimals(bookKeyA.base);\\n\\n        // @dev Convert oracle price to the same decimals as the reference oracle\\n        oraclePrice = oraclePrice * 10 ** decimalsB / 10 ** decimalsA;\\n        oraclePrice = (oraclePrice * 10 ** referenceOracle.decimals()) >> 96;\\n\\n        _prices[key] = Price({oraclePrice: SafeCast.toUint208(oraclePrice), tickA: tickA, tickB: tickB});\\n        emit UpdatePrice(key, oraclePrice, tickA, tickB);\\n    }\\n\\n    function setConfig(bytes32 key, Config memory config) external onlyOwner {\\n        if (\\n            config.referenceThreshold > RATE_PRECISION || config.rateA > RATE_PRECISION || config.rateB > RATE_PRECISION\\n                || config.minRateA > RATE_PRECISION || config.minRateB > RATE_PRECISION\\n                || config.priceThresholdA > RATE_PRECISION || config.priceThresholdB > RATE_PRECISION\\n        ) revert InvalidConfig();\\n\\n        if (config.rateA < config.minRateA || config.rateB < config.minRateB) revert InvalidConfig();\\n\\n        _configs[key] = config;\\n        emit UpdateConfig(key, config);\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        isOperator[operator] = status;\\n        emit SetOperator(operator, status);\\n    }\\n\\n    function _getCurrencyDecimals(Currency currency) internal view returns (uint8) {\\n        return currency.isNative() ? 18 : IERC20Metadata(Currency.unwrap(currency)).decimals();\\n    }\\n}\\n\",\"keccak256\":\"0xf814497bcbbd23f5ff204464cc0c86fe3563672196d8fccfb3deffb4b8a1d2c1\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    error LengthMismatch();\\n    error InvalidTimeout();\\n    error InvalidGracePeriod();\\n\\n    event SetSequencerOracle(address indexed newSequencerOracle);\\n    event SetTimeout(uint256 newTimeout);\\n    event SetGracePeriod(uint256 newGracePeriod);\\n    event SetFallbackOracle(address indexed newFallbackOracle);\\n    event SetFeed(address indexed asset, address[] feeds);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function sequencerOracle() external view returns (address);\\n\\n    function timeout() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function fallbackOracle() external view returns (address);\\n\\n    function getFeeds(address asset) external view returns (address[] memory);\\n\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n    function isSequencerValid() external view returns (bool);\\n\\n    function setFallbackOracle(address newFallbackOracle) external;\\n\\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external;\\n\\n    function setSequencerOracle(address newSequencerOracle) external;\\n\\n    function setTimeout(uint256 newTimeout) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0x9e8202dd9194f8add977d74eddb669b4103d6f50b7316a4fa8fdc76c1f2735ed\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Ownable2Step, Ownable} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {ILocker} from \\\"clober-dex/v2-core/interfaces/ILocker.sol\\\";\\nimport {BookId, BookIdLibrary} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\nimport {OrderId, OrderIdLibrary} from \\\"clober-dex/v2-core/libraries/OrderId.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {ERC6909Supply} from \\\"../libraries/ERC6909Supply.sol\\\";\\n\\ninterface IRebalancer {\\n    error NotSelf();\\n    error InvalidHook();\\n    error InvalidBookPair();\\n    error InvalidLockAcquiredSender();\\n    error InvalidLockCaller();\\n    error LockFailure();\\n    error InvalidMaker();\\n    error InvalidAmount();\\n    error InvalidValue();\\n\\n    event Open(bytes32 indexed key, BookId indexed bookIdA, BookId indexed bookIdB, address strategy);\\n    event Mint(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Burn(address indexed user, bytes32 indexed key, uint256 amountA, uint256 amountB, uint256 lpAmount);\\n    event Rebalance(bytes32 indexed key);\\n\\n    struct Pool {\\n        BookId bookIdA;\\n        BookId bookIdB;\\n        IStrategy strategy;\\n        uint256 reserveA;\\n        uint256 reserveB;\\n        OrderId[] orderListA;\\n        OrderId[] orderListB;\\n    }\\n\\n    function bookPair(BookId bookId) external view returns (BookId);\\n\\n    function getPool(bytes32 key) external view returns (Pool memory);\\n\\n    function getBookPairs(bytes32 key) external view returns (BookId bookIdA, BookId bookIdB);\\n\\n    function getLiquidity(bytes32 key) external view returns (uint256 liquidityA, uint256 liquidityB);\\n\\n    function open(IBookManager.BookKey calldata bookKeyA, IBookManager.BookKey calldata bookKeyB, address strategy)\\n        external\\n        returns (bytes32 key);\\n\\n    function mint(bytes32 key, uint256 amountA, uint256 amountB) external payable returns (uint256);\\n\\n    function burn(bytes32 key, uint256 amount) external returns (uint256, uint256);\\n\\n    function rebalance(bytes32 key) external;\\n\\n    function setStrategy(bytes32 key, address strategy) external;\\n}\\n\",\"keccak256\":\"0xd9be77c370200341183710b61aedbb899bf02281e8ed9c3077287b075dd7d65e\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/ISimpleOracleStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Tick, TickLibrary} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\nimport {IBookManager} from \\\"clober-dex/v2-core/interfaces/IBookManager.sol\\\";\\nimport {FeePolicy, FeePolicyLibrary} from \\\"clober-dex/v2-core/libraries/FeePolicy.sol\\\";\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Currency, CurrencyLibrary} from \\\"clober-dex/v2-core/libraries/Currency.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {IRebalancer} from \\\"./IRebalancer.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\n\\ninterface ISimpleOracleStrategy is IStrategy {\\n    error InvalidPrice();\\n    error InvalidConfig();\\n    error ExceedsThreshold();\\n    error NotOperator();\\n\\n    event SetOperator(address indexed operator, bool status);\\n    event UpdateConfig(bytes32 indexed key, Config config);\\n    event UpdatePrice(bytes32 indexed key, uint256 oraclePrice, Tick tickA, Tick tickB);\\n\\n    struct Config {\\n        uint24 referenceThreshold;\\n        uint24 rateA;\\n        uint24 rateB;\\n        uint24 minRateA;\\n        uint24 minRateB;\\n        uint24 priceThresholdA;\\n        uint24 priceThresholdB;\\n    }\\n\\n    struct Price {\\n        uint208 oraclePrice;\\n        Tick tickA;\\n        Tick tickB;\\n    }\\n\\n    function referenceOracle() external view returns (IOracle);\\n    function rebalancer() external view returns (IRebalancer);\\n    function bookManager() external view returns (IBookManager);\\n    function isOperator(address operator) external view returns (bool);\\n    function getConfig(bytes32 key) external view returns (Config memory);\\n    function getPrice(bytes32 key) external view returns (Price memory);\\n    function isOraclePriceValid(bytes32 key) external view returns (bool);\\n    function updatePrice(bytes32 key, uint256 oraclePrice, Tick tickA, Tick tickB) external;\\n    function setConfig(bytes32 key, Config memory config) external;\\n    function setOperator(address operator, bool status) external;\\n}\\n\",\"keccak256\":\"0x96b735cd3205341a98ab75d9cba9704033932417dab6246bed7442ddd86d18af\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {BookId} from \\\"clober-dex/v2-core/libraries/BookId.sol\\\";\\nimport {Tick} from \\\"clober-dex/v2-core/libraries/Tick.sol\\\";\\n\\ninterface IStrategy {\\n    struct Order {\\n        Tick tick;\\n        uint64 rawAmount;\\n    }\\n\\n    function computeOrders(bytes32 key, uint256 amountA, uint256 amountB)\\n        external\\n        view\\n        returns (Order[] memory ordersA, Order[] memory ordersB);\\n}\\n\",\"keccak256\":\"0x3b6732946b31a84a629b5de38fdd65acad345d4b5251be28e462c8c6fad366f9\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/ERC6909Supply.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC6909} from \\\"solmate/tokens/ERC6909.sol\\\";\\n\\nabstract contract ERC6909Supply is ERC6909 {\\n    mapping(uint256 => uint256) public totalSupply;\\n\\n    function _mint(address receiver, uint256 id, uint256 amount) internal virtual override {\\n        super._mint(receiver, id, amount);\\n        totalSupply[id] += amount;\\n    }\\n\\n    function _burn(address sender, uint256 id, uint256 amount) internal virtual override {\\n        super._burn(sender, id, amount);\\n        totalSupply[id] -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x918de786bbc6556ce5bad8eef18ab3435eb2e2f39e256e84e68b4f985f4d0fba\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561000f575f80fd5b506040516127a13803806127a183398101604081905261002e91610103565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610084565b50506001600160a01b0392831660805290821660a0521660c05261015f565b600180546001600160a01b031916905561009d816100a0565b50565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461009d575f80fd5b5f805f8060808587031215610116575f80fd5b8451610121816100ef565b6020860151909450610132816100ef565b6040860151909350610143816100ef565b6060860151909250610154816100ef565b939692955090935050565b60805160a05160c0516125cb6101d65f395f818161027a0152818161076e01528181610ba901528181610c3b01526110fb01525f818161011e015281816106d201528181610b16015261105f01525f818161025301528181610828015281816118f00152818161198d0152611b6801526125cb5ff3fe608060405234801561000f575f80fd5b5060043610610115575f3560e01c80636d70f7ae116100ad5780638da5cb5b1161007d578063e30c397811610063578063e30c39781461044b578063f27a0e8a1461045c578063f2fde38b1461046f575f80fd5b80638da5cb5b14610428578063a30416d314610438575f80fd5b80636d70f7ae146102af5780636dd5b69d146102e1578063715018a61461041857806379ba509714610420575f80fd5b806331d98b3f116100e857806331d98b3f146101ab578063337cceb91461024e5780633f322bc914610275578063558a72971461029c575f80fd5b806301d22ccd146101195780631c667d811461015d5780631dc90f6d146101725780632b3ba68114610193575b5f80fd5b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017061016b366004611f1e565b610482565b005b610185610180366004611f61565b6109da565b604051610154929190611fdc565b61019d620f424081565b604051908152602001610154565b6102186101b9366004612009565b60408051606080820183525f8083526020808401829052928401819052938452600482529282902082519384018352546001600160d01b0381168452600160d01b8104600290810b92850192909252600160e81b9004900b9082015290565b6040805182516001600160d01b03168152602080840151600290810b918301919091529282015190920b90820152606001610154565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101706102aa366004612034565b610ec3565b6102d16102bd36600461206f565b60026020525f908152604090205460ff1681565b6040519015158152602001610154565b6103b06102ef366004612009565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152505f90815260036020908152604091829020825160e081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b9092041660c082015290565b60405161015491905f60e08201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401528060c08501511660c08401525092915050565b610170610f2a565b610170610f3d565b5f546001600160a01b0316610140565b6102d1610446366004612009565b610f86565b6001546001600160a01b0316610140565b61017061046a36600461211a565b611197565b61017061047d36600461206f565b611454565b335f9081526002602052604090205460ff166104ca576040517f7c214f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6104d78360020b6114d1565b90505f6104ee6104e6846121e6565b60020b6114d1565b9050808210610528576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f86815260036020908152604091829020825160e081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a08201819052600160901b90930490911660c0820152908390620f4240906105c39082612206565b6105cd9089612219565b6105d79190612230565b1080610611575082620f42408260a0015162ffffff16620f42406105fb919061224f565b6106059089612219565b61060f9190612230565b115b8061064a575081620f42408260c0015162ffffff16620f42406106349190612206565b61063e9089612219565b6106489190612230565b105b80610683575081620f42408260c0015162ffffff16620f424061066d919061224f565b6106779089612219565b6106819190612230565b115b156106ba576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018890525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa15801561071e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107429190612278565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156107b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d791906122bf565b90505f6107e78260400151611790565b90505f6107f6835f0151611790565b905061080382600a61244d565b61080e82600a61244d565b610818908c612219565b6108229190612230565b995060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610882573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a6919061245b565b6108b190600a61244d565b6108bb908c612219565b901c995060405180606001604052806108d38c61180e565b6001600160d01b03908116825260028c810b602080850191909152908c900b6040938401525f8f81526004825283902084518154928601519585015162ffffff908116600160e81b027cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909716600160d01b027fffffff00000000000000000000000000000000000000000000000000000000009094169190941617919091179190911692909217909155518b907fe448d9e40a2b1c46bdff160055298a20c084ad56c6030de3c487892b8315459d906109c5908d908d908d90928352600291820b6020840152900b604082015260600190565b60405180910390a25050505050505050505050565b5f838152600360209081526040808320815160e081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b90940490921660c0808601919091528a885260048088528689208751808501895290546001600160d01b0381168252600160d01b8104600290810b838c0152600160e81b909104900b81890152875180840189528a8152808a018b90528089018b90528085018b90528086018b90528087018b9052885193840189528a84529883018a90528288018a90528284018a9052938201899052938101889052945163c630ed7d60e01b81529283018a9052958695939491939281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa158015610b62573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b869190612278565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610bf6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c1a91906122bf565b604051639b22917d60e01b81526001600160c01b03831660048201529094507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610c88573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cac91906122bf565b92505050610cd7835f01516001600160d01b0316855f015162ffffff168460400151855f0151611845565b610ce45750505050610ebb565b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081610cf9575050604080516001808252818301909252919750602082015b604080518082019091525f8082526020820152815260200190600190039081610d35579050509450610d8d8888855f01516001600160d01b0316610d7c8660400151611790565b8651610d8790611790565b89611ab5565b60608401519199509750610da69062ffffff1660171c90565b15610dc3576060820151610dc09062ffffff16895f611d73565b97505b610dd6816060015162ffffff1660171c90565b15610df3576060810151610df09062ffffff16885f611d73565b96505b6040518060400160405280846020015160020b8152602001610e2d846020015167ffffffffffffffff168b610e289190612230565b611dc8565b67ffffffffffffffff16815250865f81518110610e4c57610e4c61247b565b60200260200101819052506040518060400160405280846040015160020b8152602001610e8c836020015167ffffffffffffffff168a610e289190612230565b67ffffffffffffffff16815250855f81518110610eab57610eab61247b565b6020026020010181905250505050505b935093915050565b610ecb611dfe565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b91015b60405180910390a25050565b610f32611dfe565b610f3b5f611e2a565b565b60015433906001600160a01b03168114610f7a5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610f8381611e2a565b50565b5f818152600360209081526040808320815160e081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b830482166080850152600160781b8304821660a0850152600160901b9092041660c0830152858552600480855283862084519283018552546001600160d01b0381168352600160d01b8104600290810b96840196909652600160e81b900490940b81840152915163c630ed7d60e01b81529283018590529183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156110ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110cf9190612278565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611140573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061116491906122bf565b905061118d835f01516001600160d01b0316855f015162ffffff168360400151845f0151611845565b9695505050505050565b61119f611dfe565b620f4240815f015162ffffff1611806111c35750620f4240816020015162ffffff16115b806111d95750620f4240816040015162ffffff16115b806111ef5750620f4240816060015162ffffff16115b806112055750620f4240816080015162ffffff16115b8061121b5750620f42408160a0015162ffffff16115b806112315750620f42408160c0015162ffffff16115b1561124f576040516306b7c75960e31b815260040160405180910390fd5b806060015162ffffff16816020015162ffffff1610806112805750806080015162ffffff16816040015162ffffff16105b1561129e576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151848601516060870151608088015160a089015160c08a015162ffffff908116600160901b027fffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff928216600160781b027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff948316600160601b02949094167fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff9583166901000000000000000000026bffffff00000000000000000019978416660100000000000002979097166bffffffffffff0000000000001998841663010000000265ffffffffffff19909c16939099169290921799909917959095169590951792909217169190911717169190911790555182907f9fb40f2c657ba02a2d8419d8962d85ff670afe7942128c803c133283ae93342490610f1e9084905f60e08201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401528060c08501511660c08401525092915050565b61145c611dfe565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556114995f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f6114db82611e50565b815f600282900b81136114ee57816114f7565b6114f7826121e6565b62ffffff811691506001161561151b576bfff97272373d413259a469909250611523565b600160601b92505b60028116156115425760606bfff2e50f5f656932ef12357c8402901c92505b60048116156115615760606bffe5caca7e10e4e61c3624ea8402901c92505b60088116156115805760606bffcb9843d60f6159c9db58838402901c92505b601081161561159f5760606bff973b41fa98c081472e68968402901c92505b60208116156115be5760606bff2ea16466c96a3843ec78b38402901c92505b60408116156115dd5760606bfe5dee046a99a2a811c461f18402901c92505b60808116156115fc5760606bfcbe86c7900a88aedcffc83b8402901c92505b61010081161561161c5760606bf987a7253ac413176f2b074c8402901c92505b61020081161561163c5760606bf3392b0822b70005940c7a398402901c92505b61040081161561165c5760606be7159475a2c29b7443b29c7f8402901c92505b61080081161561167c5760606bd097f3bdfd2022b8845ad8f78402901c92505b61100081161561169c5760606ba9f746462d870fdf8a65dc1f8402901c92505b6120008116156116bc5760606b70d869a156d2a1b890bb3df68402901c92505b6140008116156116dc5760606b31be135f97d08fd9812315058402901c92505b6180008116156116fc5760606b09aa508b5b7a84e1c677de548402901c92505b6201000081161561171c5760606a5d6af8dedb81196699c3298402901c92505b6202000081161561173b576060692216e584f5fa1ea926048402901c92505b6204000081161561175857606067048a170391f7dc428402901c92505b5f8260020b131561178957611786837801000000000000000000000000000000000000000000000000612230565b92505b5050919050565b5f6001600160a01b0382161561180557816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117dc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611800919061245b565b611808565b60125b92915050565b5f6001600160d01b03821115611841576040516306dfcc6560e41b815260d0600482015260248101839052604401610f71565b5090565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f8151811061187e5761187e61247b565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106118b2576118b261247b565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f29061192790849060040161248f565b5f60405180830381865afa92505050801561196357506040513d5f823e601f3d908101601f1916820160405261196091908101906124db565b60015b611971575f92505050611aad565b805f815181106119835761198361247b565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0b919061245b565b611a1690600a61244d565b82600181518110611a2957611a2961247b565b6020026020010151611a3b9190612219565b611a459190612230565b92505086620f4240611a578882612206565b611a619085612219565b611a6b9190612230565b1080611a97575086620f4240611a81888261224f565b611a8b9085612219565b611a959190612230565b115b15611aa6575f92505050611aad565b6001925050505b949350505050565b5f808360ff168560ff161115611aeb57611acf848661257c565b611ada90600a61244d565b611ae49088612219565b9650611b1b565b8360ff168560ff161015611b1b57611b03858561257c565b611b0e90600a61244d565b611b189089612219565b97505b620f4240836020015162ffffff1689611b349190612219565b611b3e9190612230565b9150620f4240836040015162ffffff1688611b599190612219565b611b639190612230565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611be6919061245b565b611bf190600a61244d565b90505f611bfe8285612219565b90505f611c0b8985612219565b905080821115611c3257611c1f8382612230565b9450611c2b8386612219565b9150611c4b565b611c3c8983612230565b9350611c488985612219565b90505b82620f4240876060015162ffffff168d611c659190612219565b611c6f9190612230565b611c799190612219565b821015611ca657620f4240866060015162ffffff168c611c999190612219565b611ca39190612230565b94505b88620f4240876080015162ffffff168c611cc09190612219565b611cca9190612230565b611cd49190612219565b811015611d0157620f4240866080015162ffffff168b611cf49190612219565b611cfe9190612230565b93505b8660ff168860ff161115611d3557611d19878961257c565b611d2490600a61244d565b611d2e9085612230565b9350611d65565b8660ff168860ff161015611d6557611d4d888861257c565b611d5890600a61244d565b611d629086612230565b94505b505050965096945050505050565b5f6207a11f19627fffff851601600281900b8212828415611d9457825f0392505b82620f4240019050611dbd620f424087611dae9190612219565b82810615158416908390040190565b979650505050505050565b5f67ffffffffffffffff82111561184157604080516306dfcc6560e41b8152600481019190915260248101839052604401610f71565b5f546001600160a01b03163314610f3b5760405163118cdaa760e01b8152336004820152602401610f71565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055610f8381611eac565b6207ffff600282900b1380611e755750611e6c6207ffff6121e6565b60020b8160020b125b15610f83576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035600281900b8114611f19575f80fd5b919050565b5f805f8060808587031215611f31575f80fd5b8435935060208501359250611f4860408601611f08565b9150611f5660608601611f08565b905092959194509250565b5f805f60608486031215611f73575f80fd5b505081359360208301359350604090920135919050565b5f815180845260208085019450602084015f5b83811015611fd1578151805160020b885283015167ffffffffffffffff168388015260409096019590820190600101611f9d565b509495945050505050565b604081525f611fee6040830185611f8a565b82810360208401526120008185611f8a565b95945050505050565b5f60208284031215612019575f80fd5b5035919050565b6001600160a01b0381168114610f83575f80fd5b5f8060408385031215612045575f80fd5b823561205081612020565b915060208301358015158114612064575f80fd5b809150509250929050565b5f6020828403121561207f575f80fd5b813561208a81612020565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b60405160e0810167ffffffffffffffff811182821017156120c8576120c8612091565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156120f7576120f7612091565b604052919050565b62ffffff81168114610f83575f80fd5b8035611f19816120ff565b5f8082840361010081121561212d575f80fd5b8335925060e0601f1982011215612142575f80fd5b5061214b6120a5565b6020840135612159816120ff565b81526040840135612169816120ff565b6020820152606084013561217c816120ff565b6040820152608084013561218f816120ff565b60608201526121a060a0850161210f565b60808201526121b160c0850161210f565b60a08201526121c260e0850161210f565b60c0820152809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b5f8160020b627fffff1981036121fe576121fe6121d2565b5f0392915050565b80820180821115611808576118086121d2565b8082028115828204841417611808576118086121d2565b5f8261224a57634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115611808576118086121d2565b80516001600160c01b0381168114611f19575f80fd5b5f8060408385031215612289575f80fd5b61229283612262565b91506122a060208401612262565b90509250929050565b8051611f19816120ff565b8051611f1981612020565b5f60c082840312156122cf575f80fd5b60405160c0810167ffffffffffffffff82821081831117156122f3576122f3612091565b816040528451915061230482612020565b908252602084015190808216821461231a575f80fd5b506020820152604083015161232e81612020565b604082015261233f606084016122a9565b6060820152612350608084016122b4565b608082015261236160a084016122a9565b60a08201529392505050565b600181815b808511156123a757815f190482111561238d5761238d6121d2565b8085161561239a57918102915b93841c9390800290612372565b509250929050565b5f826123bd57506001611808565b816123c957505f611808565b81600181146123df57600281146123e957612405565b6001915050611808565b60ff8411156123fa576123fa6121d2565b50506001821b611808565b5060208310610133831016604e8410600b8410161715612428575081810a611808565b612432838361236d565b805f1904821115612445576124456121d2565b029392505050565b5f61208a60ff8416836123af565b5f6020828403121561246b575f80fd5b815160ff8116811461208a575f80fd5b634e487b7160e01b5f52603260045260245ffd5b602080825282518282018190525f9190848201906040850190845b818110156124cf5783516001600160a01b0316835292840192918401916001016124aa565b50909695505050505050565b5f60208083850312156124ec575f80fd5b825167ffffffffffffffff80821115612503575f80fd5b818501915085601f830112612516575f80fd5b81518181111561252857612528612091565b8060051b91506125398483016120ce565b8181529183018401918481019088841115612552575f80fd5b938501935b8385101561257057845182529385019390850190612557565b98975050505050505050565b60ff8281168282160390811115611808576118086121d256fea2646970667358221220d2962778e340534ea87aedcd92bc6e2edae9d11f70d4bbb3d5061afb1826592d64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610115575f3560e01c80636d70f7ae116100ad5780638da5cb5b1161007d578063e30c397811610063578063e30c39781461044b578063f27a0e8a1461045c578063f2fde38b1461046f575f80fd5b80638da5cb5b14610428578063a30416d314610438575f80fd5b80636d70f7ae146102af5780636dd5b69d146102e1578063715018a61461041857806379ba509714610420575f80fd5b806331d98b3f116100e857806331d98b3f146101ab578063337cceb91461024e5780633f322bc914610275578063558a72971461029c575f80fd5b806301d22ccd146101195780631c667d811461015d5780631dc90f6d146101725780632b3ba68114610193575b5f80fd5b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017061016b366004611f1e565b610482565b005b610185610180366004611f61565b6109da565b604051610154929190611fdc565b61019d620f424081565b604051908152602001610154565b6102186101b9366004612009565b60408051606080820183525f8083526020808401829052928401819052938452600482529282902082519384018352546001600160d01b0381168452600160d01b8104600290810b92850192909252600160e81b9004900b9082015290565b6040805182516001600160d01b03168152602080840151600290810b918301919091529282015190920b90820152606001610154565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101706102aa366004612034565b610ec3565b6102d16102bd36600461206f565b60026020525f908152604090205460ff1681565b6040519015158152602001610154565b6103b06102ef366004612009565b6040805160e0810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152505f90815260036020908152604091829020825160e081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a0820152600160901b9092041660c082015290565b60405161015491905f60e08201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401528060c08501511660c08401525092915050565b610170610f2a565b610170610f3d565b5f546001600160a01b0316610140565b6102d1610446366004612009565b610f86565b6001546001600160a01b0316610140565b61017061046a36600461211a565b611197565b61017061047d36600461206f565b611454565b335f9081526002602052604090205460ff166104ca576040517f7c214f0400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6104d78360020b6114d1565b90505f6104ee6104e6846121e6565b60020b6114d1565b9050808210610528576040517ebfc92100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f86815260036020908152604091829020825160e081018452905462ffffff808216835263010000008204811693830193909352660100000000000081048316938201939093526901000000000000000000830482166060820152600160601b830482166080820152600160781b8304821660a08201819052600160901b90930490911660c0820152908390620f4240906105c39082612206565b6105cd9089612219565b6105d79190612230565b1080610611575082620f42408260a0015162ffffff16620f42406105fb919061224f565b6106059089612219565b61060f9190612230565b115b8061064a575081620f42408260c0015162ffffff16620f42406106349190612206565b61063e9089612219565b6106489190612230565b105b80610683575081620f42408260c0015162ffffff16620f424061066d919061224f565b6106779089612219565b6106819190612230565b115b156106ba576040517f107826c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163c630ed7d60e01b8152600481018890525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa15801561071e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107429190612278565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa1580156107b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d791906122bf565b90505f6107e78260400151611790565b90505f6107f6835f0151611790565b905061080382600a61244d565b61080e82600a61244d565b610818908c612219565b6108229190612230565b995060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610882573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108a6919061245b565b6108b190600a61244d565b6108bb908c612219565b901c995060405180606001604052806108d38c61180e565b6001600160d01b03908116825260028c810b602080850191909152908c900b6040938401525f8f81526004825283902084518154928601519585015162ffffff908116600160e81b027cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909716600160d01b027fffffff00000000000000000000000000000000000000000000000000000000009094169190941617919091179190911692909217909155518b907fe448d9e40a2b1c46bdff160055298a20c084ad56c6030de3c487892b8315459d906109c5908d908d908d90928352600291820b6020840152900b604082015260600190565b60405180910390a25050505050505050505050565b5f838152600360209081526040808320815160e081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b83048216608080860191909152600160781b8404831660a080870191909152600160901b90940490921660c0808601919091528a885260048088528689208751808501895290546001600160d01b0381168252600160d01b8104600290810b838c0152600160e81b909104900b81890152875180840189528a8152808a018b90528089018b90528085018b90528086018b90528087018b9052885193840189528a84529883018a90528288018a90528284018a9052938201899052938101889052945163c630ed7d60e01b81529283018a9052958695939491939281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa158015610b62573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b869190612278565b604051639b22917d60e01b81526001600160c01b038316600482015291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610bf6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c1a91906122bf565b604051639b22917d60e01b81526001600160c01b03831660048201529094507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b22917d9060240160c060405180830381865afa158015610c88573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cac91906122bf565b92505050610cd7835f01516001600160d01b0316855f015162ffffff168460400151855f0151611845565b610ce45750505050610ebb565b60408051600180825281830190925290816020015b604080518082019091525f8082526020820152815260200190600190039081610cf9575050604080516001808252818301909252919750602082015b604080518082019091525f8082526020820152815260200190600190039081610d35579050509450610d8d8888855f01516001600160d01b0316610d7c8660400151611790565b8651610d8790611790565b89611ab5565b60608401519199509750610da69062ffffff1660171c90565b15610dc3576060820151610dc09062ffffff16895f611d73565b97505b610dd6816060015162ffffff1660171c90565b15610df3576060810151610df09062ffffff16885f611d73565b96505b6040518060400160405280846020015160020b8152602001610e2d846020015167ffffffffffffffff168b610e289190612230565b611dc8565b67ffffffffffffffff16815250865f81518110610e4c57610e4c61247b565b60200260200101819052506040518060400160405280846040015160020b8152602001610e8c836020015167ffffffffffffffff168a610e289190612230565b67ffffffffffffffff16815250855f81518110610eab57610eab61247b565b6020026020010181905250505050505b935093915050565b610ecb611dfe565b6001600160a01b0382165f81815260026020908152604091829020805460ff191685151590811790915591519182527f1618a22a3b00b9ac70fd5a82f1f5cdd8cb272bd0f1b740ddf7c26ab05881dd5b91015b60405180910390a25050565b610f32611dfe565b610f3b5f611e2a565b565b60015433906001600160a01b03168114610f7a5760405163118cdaa760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b610f8381611e2a565b50565b5f818152600360209081526040808320815160e081018352905462ffffff80821683526301000000820481168386015266010000000000008204811683850152690100000000000000000082048116606080850191909152600160601b830482166080850152600160781b8304821660a0850152600160901b9092041660c0830152858552600480855283862084519283018552546001600160d01b0381168352600160d01b8104600290810b96840196909652600160e81b900490940b81840152915163c630ed7d60e01b81529283018590529183907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c630ed7d906024016040805180830381865afa1580156110ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110cf9190612278565b50604051639b22917d60e01b81526001600160c01b03821660048201529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b22917d9060240160c060405180830381865afa158015611140573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061116491906122bf565b905061118d835f01516001600160d01b0316855f015162ffffff168360400151845f0151611845565b9695505050505050565b61119f611dfe565b620f4240815f015162ffffff1611806111c35750620f4240816020015162ffffff16115b806111d95750620f4240816040015162ffffff16115b806111ef5750620f4240816060015162ffffff16115b806112055750620f4240816080015162ffffff16115b8061121b5750620f42408160a0015162ffffff16115b806112315750620f42408160c0015162ffffff16115b1561124f576040516306b7c75960e31b815260040160405180910390fd5b806060015162ffffff16816020015162ffffff1610806112805750806080015162ffffff16816040015162ffffff16105b1561129e576040516306b7c75960e31b815260040160405180910390fd5b5f828152600360209081526040918290208351815492850151848601516060870151608088015160a089015160c08a015162ffffff908116600160901b027fffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff928216600160781b027fffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff948316600160601b02949094167fffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffff9583166901000000000000000000026bffffff00000000000000000019978416660100000000000002979097166bffffffffffff0000000000001998841663010000000265ffffffffffff19909c16939099169290921799909917959095169590951792909217169190911717169190911790555182907f9fb40f2c657ba02a2d8419d8962d85ff670afe7942128c803c133283ae93342490610f1e9084905f60e08201905062ffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401528060c08501511660c08401525092915050565b61145c611dfe565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556114995f546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f6114db82611e50565b815f600282900b81136114ee57816114f7565b6114f7826121e6565b62ffffff811691506001161561151b576bfff97272373d413259a469909250611523565b600160601b92505b60028116156115425760606bfff2e50f5f656932ef12357c8402901c92505b60048116156115615760606bffe5caca7e10e4e61c3624ea8402901c92505b60088116156115805760606bffcb9843d60f6159c9db58838402901c92505b601081161561159f5760606bff973b41fa98c081472e68968402901c92505b60208116156115be5760606bff2ea16466c96a3843ec78b38402901c92505b60408116156115dd5760606bfe5dee046a99a2a811c461f18402901c92505b60808116156115fc5760606bfcbe86c7900a88aedcffc83b8402901c92505b61010081161561161c5760606bf987a7253ac413176f2b074c8402901c92505b61020081161561163c5760606bf3392b0822b70005940c7a398402901c92505b61040081161561165c5760606be7159475a2c29b7443b29c7f8402901c92505b61080081161561167c5760606bd097f3bdfd2022b8845ad8f78402901c92505b61100081161561169c5760606ba9f746462d870fdf8a65dc1f8402901c92505b6120008116156116bc5760606b70d869a156d2a1b890bb3df68402901c92505b6140008116156116dc5760606b31be135f97d08fd9812315058402901c92505b6180008116156116fc5760606b09aa508b5b7a84e1c677de548402901c92505b6201000081161561171c5760606a5d6af8dedb81196699c3298402901c92505b6202000081161561173b576060692216e584f5fa1ea926048402901c92505b6204000081161561175857606067048a170391f7dc428402901c92505b5f8260020b131561178957611786837801000000000000000000000000000000000000000000000000612230565b92505b5050919050565b5f6001600160a01b0382161561180557816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117dc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611800919061245b565b611808565b60125b92915050565b5f6001600160d01b03821115611841576040516306dfcc6560e41b815260d0600482015260248101839052604401610f71565b5090565b6040805160028082526060820183525f9283928392909160208301908036833701905050905084815f8151811061187e5761187e61247b565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106118b2576118b261247b565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000090911690639d23d9f29061192790849060040161248f565b5f60405180830381865afa92505050801561196357506040513d5f823e601f3d908101601f1916820160405261196091908101906124db565b60015b611971575f92505050611aad565b805f815181106119835761198361247b565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0b919061245b565b611a1690600a61244d565b82600181518110611a2957611a2961247b565b6020026020010151611a3b9190612219565b611a459190612230565b92505086620f4240611a578882612206565b611a619085612219565b611a6b9190612230565b1080611a97575086620f4240611a81888261224f565b611a8b9085612219565b611a959190612230565b115b15611aa6575f92505050611aad565b6001925050505b949350505050565b5f808360ff168560ff161115611aeb57611acf848661257c565b611ada90600a61244d565b611ae49088612219565b9650611b1b565b8360ff168560ff161015611b1b57611b03858561257c565b611b0e90600a61244d565b611b189089612219565b97505b620f4240836020015162ffffff1689611b349190612219565b611b3e9190612230565b9150620f4240836040015162ffffff1688611b599190612219565b611b639190612230565b90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611be6919061245b565b611bf190600a61244d565b90505f611bfe8285612219565b90505f611c0b8985612219565b905080821115611c3257611c1f8382612230565b9450611c2b8386612219565b9150611c4b565b611c3c8983612230565b9350611c488985612219565b90505b82620f4240876060015162ffffff168d611c659190612219565b611c6f9190612230565b611c799190612219565b821015611ca657620f4240866060015162ffffff168c611c999190612219565b611ca39190612230565b94505b88620f4240876080015162ffffff168c611cc09190612219565b611cca9190612230565b611cd49190612219565b811015611d0157620f4240866080015162ffffff168b611cf49190612219565b611cfe9190612230565b93505b8660ff168860ff161115611d3557611d19878961257c565b611d2490600a61244d565b611d2e9085612230565b9350611d65565b8660ff168860ff161015611d6557611d4d888861257c565b611d5890600a61244d565b611d629086612230565b94505b505050965096945050505050565b5f6207a11f19627fffff851601600281900b8212828415611d9457825f0392505b82620f4240019050611dbd620f424087611dae9190612219565b82810615158416908390040190565b979650505050505050565b5f67ffffffffffffffff82111561184157604080516306dfcc6560e41b8152600481019190915260248101839052604401610f71565b5f546001600160a01b03163314610f3b5760405163118cdaa760e01b8152336004820152602401610f71565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055610f8381611eac565b6207ffff600282900b1380611e755750611e6c6207ffff6121e6565b60020b8160020b125b15610f83576040517fce8ef7fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035600281900b8114611f19575f80fd5b919050565b5f805f8060808587031215611f31575f80fd5b8435935060208501359250611f4860408601611f08565b9150611f5660608601611f08565b905092959194509250565b5f805f60608486031215611f73575f80fd5b505081359360208301359350604090920135919050565b5f815180845260208085019450602084015f5b83811015611fd1578151805160020b885283015167ffffffffffffffff168388015260409096019590820190600101611f9d565b509495945050505050565b604081525f611fee6040830185611f8a565b82810360208401526120008185611f8a565b95945050505050565b5f60208284031215612019575f80fd5b5035919050565b6001600160a01b0381168114610f83575f80fd5b5f8060408385031215612045575f80fd5b823561205081612020565b915060208301358015158114612064575f80fd5b809150509250929050565b5f6020828403121561207f575f80fd5b813561208a81612020565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b60405160e0810167ffffffffffffffff811182821017156120c8576120c8612091565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156120f7576120f7612091565b604052919050565b62ffffff81168114610f83575f80fd5b8035611f19816120ff565b5f8082840361010081121561212d575f80fd5b8335925060e0601f1982011215612142575f80fd5b5061214b6120a5565b6020840135612159816120ff565b81526040840135612169816120ff565b6020820152606084013561217c816120ff565b6040820152608084013561218f816120ff565b60608201526121a060a0850161210f565b60808201526121b160c0850161210f565b60a08201526121c260e0850161210f565b60c0820152809150509250929050565b634e487b7160e01b5f52601160045260245ffd5b5f8160020b627fffff1981036121fe576121fe6121d2565b5f0392915050565b80820180821115611808576118086121d2565b8082028115828204841417611808576118086121d2565b5f8261224a57634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115611808576118086121d2565b80516001600160c01b0381168114611f19575f80fd5b5f8060408385031215612289575f80fd5b61229283612262565b91506122a060208401612262565b90509250929050565b8051611f19816120ff565b8051611f1981612020565b5f60c082840312156122cf575f80fd5b60405160c0810167ffffffffffffffff82821081831117156122f3576122f3612091565b816040528451915061230482612020565b908252602084015190808216821461231a575f80fd5b506020820152604083015161232e81612020565b604082015261233f606084016122a9565b6060820152612350608084016122b4565b608082015261236160a084016122a9565b60a08201529392505050565b600181815b808511156123a757815f190482111561238d5761238d6121d2565b8085161561239a57918102915b93841c9390800290612372565b509250929050565b5f826123bd57506001611808565b816123c957505f611808565b81600181146123df57600281146123e957612405565b6001915050611808565b60ff8411156123fa576123fa6121d2565b50506001821b611808565b5060208310610133831016604e8410600b8410161715612428575081810a611808565b612432838361236d565b805f1904821115612445576124456121d2565b029392505050565b5f61208a60ff8416836123af565b5f6020828403121561246b575f80fd5b815160ff8116811461208a575f80fd5b634e487b7160e01b5f52603260045260245ffd5b602080825282518282018190525f9190848201906040850190845b818110156124cf5783516001600160a01b0316835292840192918401916001016124aa565b50909695505050505050565b5f60208083850312156124ec575f80fd5b825167ffffffffffffffff80821115612503575f80fd5b818501915085601f830112612516575f80fd5b81518181111561252857612528612091565b8060051b91506125398483016120ce565b8181529183018401918481019088841115612552575f80fd5b938501935b8385101561257057845182529385019390850190612557565b98975050505050505050565b60ff8281168282160390811115611808576118086121d256fea2646970667358221220d2962778e340534ea87aedcd92bc6e2edae9d11f70d4bbb3d5061afb1826592d64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 156,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7790,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "isOperator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7795,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_configs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Config)9734_storage)"
      },
      {
        "astId": 7800,
        "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
        "label": "_prices",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Price)9743_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Config)9734_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)9734_storage"
      },
      "t_mapping(t_bytes32,t_struct(Price)9743_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ISimpleOracleStrategy.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)9743_storage"
      },
      "t_struct(Config)9734_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Config",
        "members": [
          {
            "astId": 9721,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "referenceThreshold",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9723,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateA",
            "offset": 3,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9725,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "rateB",
            "offset": 6,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9727,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateA",
            "offset": 9,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9729,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "minRateB",
            "offset": 12,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9731,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdA",
            "offset": 15,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 9733,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "priceThresholdB",
            "offset": 18,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)9743_storage": {
        "encoding": "inplace",
        "label": "struct ISimpleOracleStrategy.Price",
        "members": [
          {
            "astId": 9736,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "oraclePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint208"
          },
          {
            "astId": 9739,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickA",
            "offset": 26,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)4314"
          },
          {
            "astId": 9742,
            "contract": "src/SimpleOracleStrategy.sol:SimpleOracleStrategy",
            "label": "tickB",
            "offset": 29,
            "slot": "0",
            "type": "t_userDefinedValueType(Tick)4314"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint208": {
        "encoding": "inplace",
        "label": "uint208",
        "numberOfBytes": "26"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_userDefinedValueType(Tick)4314": {
        "encoding": "inplace",
        "label": "Tick",
        "numberOfBytes": "3"
      }
    }
  }
}